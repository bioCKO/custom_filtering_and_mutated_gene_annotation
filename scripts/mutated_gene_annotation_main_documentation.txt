#===============================================================================
#
#         FILE: home/proj/MDW_genomics/steepale/mutated_gene_annotation/mutated_gene_annotation_main_documentation.txt
#
#        USAGE: for documentation purposes, scripts inside
#
#  DESCRIPTION:  This script serves as a step by step documentation script and development script for mining DNA and RNA sequence data for driver genes
#                
# REQUIREMENTS:  ---
#        NOTES:  ---
#       AUTHOR:  Alec Steep, steepale@msu.edu
#  AFFILIATION:  Michigan State University (MSU), East Lansing, MI, United States
#				         USDA ARS Avian Disease and Oncology Lab (ADOL), East Lansing, MI, United States
#				         Technical University of Munich (TUM), Weihenstephan, Germany
#      VERSION:  1.0
#      CREATED:  2016.11.18
#     REVISION:  
#===============================================================================

# Permanent PROJECT DIRECTORY (TUM Cluster)
cd home/proj/MDW_genomics/steepale/mutated_gene_annotation

Goal: Catalog all somatic non-synonymous snv and indel mutations for validation experiments

#fs='S*.ensemble.merged.sorted.vep.vcf'

#Examine non synonymous somatic snps and indels that have been annotated.
# One caller
#cd /scratch/xu/MDV_project/vep/maf/
# Grab the nonsynonymous variants from a collection of vcf files
#echo -e "CHROM\tPOS\tREF\tALT\tMUTATION\tEFFECT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" > /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/all_nonsyn_snvs_indels.txt
#for fs in `ls -1 S*.ensemble.merged.sorted.vep.vcf`
#do echo "$fs"
#s=`echo "$fs" | sed 's/.ensemble.merged.sorted.vep.vcf//'`
#s=`echo $fs | xargs -i basename {} | sed 's/.ensemble.merged.sorted.vep.vcf//'`
#r=`grep -v "^##" $fs |\
#grep -o -e '[a-zA-Z0-9_.-]*|MODERATE|[a-zA-Z0-9_.-]*|[a-zA-Z0-9_.-]*|' -e '[a-zA-Z0-9_.-]*|HIGH|[a-zA-Z0-9_.-]*|[a-zA-Z0-9_.-]*|' |\
#cut -f 1,2,4,5`
#echo "${r}" | while read line
#do
#z=`grep $line $s.ensemble.merged.sorted.vep.vcf | cut -f 1,2,4,5`
#echo "${z}" | while read line2
#do
#echo -e "$line2\t$line$s" | \
#sed 's/|/\t/g '>> /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/all_nonsyn_snvs_indels.txt
#done
#done
#done

# Reformat each line to correspond to appropriate column
#cd /home/proj/MDW_genomics/steepale/mutated_gene_annotation/
#python ./scripts/reformat.py \
#./data/all_nonsyn_snvs_indels.txt \
#./data/all_nonsyn_snvs_indels2.txt

#./scripts/reformat.py
###############
#import sys

#infile=sys.argv[1]
#outfile=open(sys.argv[2], 'w')

#for line in open(infile):
#        parts = line.split('\t')
#        try:
#        	parts[4] == ''
#        except IndexError:
#        	continue
#        if parts[0] == "CHROM":
#        	outfile.write(line)
#        elif parts[7][0].isalpha():
#        	outfile.write(parts[0]+'\t'+parts[1]+'\t'+parts[2]+'\t'+parts[3]+'\t'+parts[4]+'\t'+parts[5]+'\t'+parts[6]+'\t'+parts[7]+'\t'+'NA'+'\t'+parts[8]+'\t'+'\n')
#        elif parts[7][0].isdigit():
#        	outfile.write(parts[0]+'\t'+parts[1]+'\t'+parts[2]+'\t'+parts[3]+'\t'+parts[4]+'\t'+parts[5]+'\t'+parts[6]+'\t'+'NA'+'\t'+parts[7]+'\t'+parts[8]+'\t'+'\n')
#        else:
#        	outfile.write(line)
###############

#(grep '^CHROM' ./data/all_nonsyn_snvs_indels2.txt; \
#awk 'BEGIN { FS = OFS = "\t" } { for(i=1; i<=NF; i++) if($i ~ /^ *$/) $i = "NA" }; 1' ./data/all_nonsyn_snvs_indels2.txt | \
#grep -v -e '^NA' -e '^CHROM' | \
#awk -F"\t" '!seen[$1, $2, $3, $4, $10]++' | \
#sort -V) > ./data/all_nonsyn_snvs_indels.txt

# Send the files to local computer for manipulation in R
#rsync -avp \
#a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/all_nonsyn_snvs_indels.txt \
#/Users/Alec/Documents/Bioinformatics/MDV_Project/mutated_gene_annotation/


# Check the individually called SNPs and Indels
#module load SAMTools/1.2

# Check for individually called somatic SNVs on tumors, germlines, parental lines
#grep -v '^CHROM' ./data/all_nonsyn_snvs_indels.txt | \
#awk '$3 ~ /^[a-zA-Z]$/ {print $0}' | \
#awk '$4 ~ /^[a-zA-Z]$/ {print $0}' | \
#awk -F"\t" '!seen[$1, $2, $3, $4, $10]++' | \
#sort -k7,7 > ./data/all_nonsyn_snvs_to_read.txt

# Replace all of the samples ID's using an array and sed to replace the word only strings in file
#declare -A samples
#samples["S1"]="738-1_S1"
#samples["S2"]="741-1_S2"
#samples["S3"]="756-3_S3"
#samples["S4"]="766-1_S4"
#samples["S5"]="798-1_S5"
#samples["S6"]="833-1_S6"
#samples["S7"]="834-2_S7"
#samples["S8"]="855-1_S8"
#samples["S9"]="863-1_S9"
#samples["S10"]="918-3_S10"
#samples["S11"]="927-2_S11"
#samples["S12"]="834-2_2_S12"
#samples["S13"]="911-1_2_S13"
#samples["S14"]="777-3_S14"
#samples["S15"]="787-2_S15"
#samples["S16"]="788-1_S16"
#samples["S17"]="794-1_S17"
#samples["S18"]="835-1_S18"
#samples["S19"]="841-3_S19"
#samples["S20"]="842-2_S20"
#samples["S21"]="884-2_S21"
#samples["S22"]="901-2_S22"
#samples["S23"]="906-1_S23"
#samples["S24"]="911-1_S24"
#samples["S25"]="842-2_2_S25"
#samples["S26"]="901-2_2_S26"
#for n in "${!samples[@]}"
#do
#echo "$n - ${samples[$n]}"
#sed -i "s/\b$n\b/${samples[$n]}/g " ./data/all_nonsyn_snvs_to_read.txt
#done
#
#
#rm germline_samples_pass.txt
#rm tumor_samples_pass.txt
#rm ./data/filter/*.int
#rm ./data/filter/*.test
#echo "Counts" > ./tumor_counts.txt
#echo "Counts" > ./germline_counts.txt
#echo "FAIL" > ./data/somatic_SNVs_fail_germline_sample_freq.txt
## Attempt 2016/12/07
## Print the header for variants in pass and fail files
## Header for filtered variants that passed (pass file 1)
#echo "#Somatic SNVs that passed custom filtering" > ./data/somatic_SNVs_pass.txt
#echo "#Filters include:" >> ./data/somatic_SNVs_pass.txt
#echo "#SSNV cannot appear in more than 8 germline samples" >> ./data/somatic_SNVs_pass.txt
#echo "#Variant allele must have at least 2 read bases" >> ./data/somatic_SNVs_pass.txt
#echo "#Variant allele frequency must be at least 10%" >> ./data/somatic_SNVs_pass.txt
## Header for filtered variants that passed (final pass file)
#echo "#Somatic SNVs that passed custom filtering" > ./data/somatic_SNVs_pass_final.txt
#echo "#Filters include:" >> ./data/somatic_SNVs_pass_final.txt
#echo "#Variant cannot appear in more than 8 germline samples" >> ./data/somatic_SNVs_pass_final.txt
#echo "#Variant allele must have at least 2 read bases" >> ./data/somatic_SNVs_pass_final.txt
#echo "#Variant allele frequency must be at least 10%" >> ./data/somatic_SNVs_pass_final.txt
#echo "#Variant must appear in at least one tumor samples after variant allele frequency and variant coverage filters" >> ./data/somatic_SNVs_pass_final.txt
#echo "#Variant must have a coverage across entire cohort of tumor and germline bam files of greater than 150 base reads total (unique filter due to spots in genome of low coverage)" >> ./data/somatic_SNVs_pass_final.txt
#
## Header for filtered variants that did not pass 
#echo -e "#Somatic SNVs that did not pass variant allele count filter\n" > ./data/somatic_SNVs_fail_allele_count.txt
#echo -e "#Somatic SNVs that did not pass variant allele frequency filter\n" > ./data/somatic_SNVs_fail_vaf.txt
#echo -e "#Somatic SNVs that did not pass tumor sample frequency threshold\n" > ./data/somatic_SNVs_fail_tumor_sample_freq.txt
#echo -e "#Somatic SNVs that did not pass germline sample frequency threshold\n" > ./data/somatic_SNVs_fail_germline_sample_freq.txt
#
## Reading each unique somatic variant in while loop (input file at very end of loop)
#while read line
#do
#chr=`echo $line | cut -d ' ' -f 1`
#pos=`echo $line | cut -d ' ' -f 2`
#ref=`echo $line | cut -d ' ' -f 3`
#alt=`echo $line | cut -d ' ' -f 4`
## Variant sample
#vs=`echo $line | cut -d ' ' -f 10`
## Variant with annotation
##var=`echo $line`
## The gene symbol of gene associated with variant
#symbol=`echo "$var" | cut -d " " -f 7`
## File name of variant
#fv=`echo -e "$var" | sed 's/ /_/g'`
## Create file to count number of somatic samples containing variant, allows files to have a 0 count
#touch "./data/filter/"$fv"_tumor.test"
## Create file to count number of germline samples containing variant, allows files to have a 0 count
#touch "./data/filter/"$fv"_germline.test"
## Create file to count (2nd count) number of somatic samples containing variant, allows files to have a 0 count
#touch ./data/filter/tumor_count.int
## Create file to count (2nd count) number of germline samples containing variant, allows files to have a 0 count
#touch ./data/filter/germline_count.int
#
#
## Search each tumor bam for each somatic called variant
## Create zero value for sum of coverage of tumor variant sites
#tcovsum=0
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## Samtools mpileup output: CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
## Coverage
#cov=`echo -e "$mpu" | cut -f4`
#cov="${cov:-0}"
## Add coverage to the sum of coverage
#tcovsum=`expr $tcovsum + $cov`
## Place somaticly verified variants in file so line number corresponds to number of tumor samples that contain varaint
#if (echo $int | grep -q "$alt"); then
#echo -e "$s\t$mpu" >> "./data/filter/"$fv"_tumor.test"
#fi
#done
#
#
## Search each germline bam for each somatic called variant
## Create zero value for sum of coverage of tumor variant sites
#gcovsum=0
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[0]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## Samtools mpileup output: CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
## Coverage
#cov=`echo -e "$mpu" | cut -f4`
#cov="${cov:-0}"
## Add coverage to the sum of coverage
#fcovsum=`expr $gcovsum + $cov`
## Place somatically called variants  that appear in germline samples in file so line number corresponds to number of germline samples that contain varaint
#if (echo $int | grep -q "$alt"); then
#echo -e "$s\t$mpu" >> "./data/filter/"$fv"_germline.test"
#fi
#done
#
## Add the sum of coverage on all tumor and germline samples. This will be used to filter out variants with inadequate
## coverage across cohort of samples
#covsum=`expr $tcovsum + $gcovsum`
#
## Number of tumor samples with variant
#tsnum=`wc -l "./data/filter/"$fv"_tumor.test" | cut -d ' ' -f1`
#echo -e "$tsnum $fv" >> ./tumor_counts.txt
## Number of germline samples with variant
#gsnum=`wc -l "./data/filter/"$fv"_germline.test" | cut -d ' ' -f1`
#echo -e "$tsnum $fv" >> ./germline_counts.txt
#
## Print the header for variants in pass file, (only if there is a tumor sample with called variant)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] ; then
#echo -e "\nVariant" | tee ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#echo "$var" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#echo "Tumor Samples Containing Variant" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#fi
## Print the header for each variant in fail allele filter file
#echo -e "\nVariant" >> ./data/somatic_SNVs_fail_allele_count.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_SNVs_fail_allele_count.txt
#echo "$var" >> ./data/somatic_SNVs_fail_allele_count.txt
#echo "Tumor Samples Containing Variant" >> ./data/somatic_SNVs_fail_allele_count.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_SNVs_fail_allele_count.txt
## Print the header for each variant in the fail variant allele frequency file
#echo -e "\nVariant" >> ./data/somatic_SNVs_fail_vaf.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_SNVs_fail_vaf.txt
#echo "$var" >> ./data/somatic_SNVs_fail_vaf.txt
#echo "Tumor Samples Containing Variant" >> ./data/somatic_SNVs_fail_vaf.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_SNVs_fail_vaf.txt
## Print the header for each variant in the fail germline sample frequency file
#echo -e "\nVariant" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#echo "$var" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#echo "Germline Samples Containing Variant" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#
## Search each tumor bam for each somatic called variant
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
# CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
#
## FILTER VARIABLES
## Variant allele count
#vcount=`echo $int | grep -o "$alt" | wc -l`
## Coverage assigned a value even if mpu variable is either empty or is undefined
#cov=`echo -e "$mpu" | cut -f 4`
#cov="${cov:-1000000}"
## Variant allele frequency even if mpu variable is either empty or is undefined
#vaf=`echo "scale=2;$vcount/$cov" | bc`
#vaf="${vaf:-0}"
## Variant allele frequency threshold
#vaf_thres=`echo "scale=2;1/10" | bc`
#
## Filter variants that contain less than 2 alternative alleles
#if [ $vcount -le "1" ]; then
#echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_allele_count.txt
#echo -e "Variant Allele Count: $vcount" >> ./data/somatic_SNVs_fail_allele_count.txt
#
## Filter variants that contain a variant allele frequency less than theshold (5%)
#elif (( $(echo "$vaf < $vaf_thres" | bc -l) )); then
#echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_vaf.txt
#echo -e "Variant Allele Frequency: $vaf" >> ./data/somatic_SNVs_fail_vaf.txt
#
## Filter variant that do not show a variant allele in any tumor samples
#elif [ "$tsnum" -le "0" ]; then
#echo -e "$tsnum $fv" >> ./data/somatic_SNVs_fail_tumor_sample_freq.txt
#
## Filter variants that appear in greater than 8 germline samples
#elif [ "$gsnum" -gt "8" ]; then
#echo -e "$gsnum $fv" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#
## Print the variables that passed all filters
#else
#echo -e "$s\t$mpu\t$vcount\t$vaf" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#fi
#done
#
## Place holder to allow for counting of tumor samples with variants (2nd count)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ]; then
#echo -e "----------" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_SNVs_pass.txt
#fi
#
## Count the number of tumor samples that passed the test
#echo "$var" >> tumor_samples_pass.txt
#echo "Tumor Samples That Passed Filters" >> tumor_samples_pass.txt
#tsnum2=`sed -n '/^Tumor/,/^---/p' ./data/filter/tumor_count.int | grep -v -e "^Tumor" -e "^---" -e "^SAMPLE" | wc -l`
#tscalls=`sed -n '/^Tumor/,/^---/p' ./data/filter/tumor_count.int | grep -v -e "^Tumor" -e "^---" -e "^SAMPLE"`
#tscalls_tsf=`echo -e "$tscalls" | sed "s/$/\t$tsnum2/g" | sed "s/^/LINE_T\t/"`
#
#echo -e "$tnum2" >> tumor_samples_pass.txt
#
## Print the header and variants in FINAL pass file, (only if there is a tumor sample with called variant)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
#echo -e "\nVariant" >> ./data/somatic_SNVs_pass_final.txt
#echo -e "LINE_ID\tCHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_SNVs_pass_final.txt
#echo -e "LINE_V $var" >> ./data/somatic_SNVs_pass_final.txt
#echo -e "Tumor Samples Containing Variant" >> ./data/somatic_SNVs_pass_final.txt
#echo -e "LINE_ID\tSAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF\tTSF" >> ./data/somatic_SNVs_pass_final.txt
#echo -e "$tscalls_tsf" >> ./data/somatic_SNVs_pass_final.txt
#fi
#
## Print the header for germline samples called in pass file (pass file 1)
##if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ]; then
##echo "Germline Samples Containing Variant" | tee ./data/filter/germline_count.int >> ./data/somatic_SNVs_pass.txt
##echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" | tee -a ./data/filter/germline_count.int >> ./data/somatic_SNVs_pass.txt
##fi
#
## Search each germline bam for each somatic called variant
##for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[0]*_S*_Bwa_RG_dedupped_realigned.bam`
##do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
##mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
##s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## CHROM, POS, READ_BASES
##int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
#
## FILTER VARIABLES
## Variant allele count
##vcount=`echo $int | grep -o "$alt" | wc -l`
## Coverage assigned a value even if mpu variable is either empty or is undefined
##cov=`echo -e "$mpu" | cut -f 4`
##cov="${cov:-1000000}"
## Variant allele frequency even if mpu variable is either empty or is undefined
##vaf=`echo "scale=2;$vcount/$cov" | bc`
##vaf="${vaf:-0}"
## Variant allele frequency threshold
##vaf_thres=`echo "scale=2;1/10" | bc`
#
##echo -e "gsnum: $gsnum" >> ./gsnum.txt
#
## Filter variants that contain less than 2 alternative alleles
##if [ $vcount -le "1" ]; then
##echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_allele_count.txt
##echo -e "Variant Allele Count: $vcount" >> ./data/somatic_SNVs_fail_allele_count.txt
#
## Filter variants that contain a variant allele frequency less than theshold (5%)
##elif (( $(echo "$vaf < $vaf_thres" | bc -l) )); then
##echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_vaf.txt
##echo -e "Variant Allele Frequency: $vaf" >> ./data/somatic_SNVs_fail_vaf.txt
#
## Filter variants that appear in 9 or more germline samples contain
##elif [ "$gsnum" -gt "8" ]; then
##echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt
#
## Print the variables that passed all filters
##else
##echo -e "$s\t$mpu\t$vcount\t$vaf" | tee -a ./data/filter/germline_count.int >> ./data/somatic_SNVs_pass.txt
##fi
##done
#
## Place holder to allow for counting of germline samples with variants (2nd count)
##if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ]; then
##echo -e "----------" | tee -a ./data/filter/germline_count.int >> ./data/somatic_SNVs_pass.txt
##fi
#
## Count the number of germline samples that passed the test
##echo "$var" >> germline_samples_pass.txt
##echo "Germline Samples That Passed Filters" >> germline_samples_pass.txt
##gsnum2=`sed -n '/^Germline/,/^---/p' ./data/filter/germline_count.int | grep -v -e "^Germline" -e "^---" -e "^SAMPLE" | wc -l`
##gscalls=`sed -n '/^Germline/,/^---/p' ./data/filter/germline_count.int | grep -v -e "^Germline" -e "^---" -e "^SAMPLE"`
##gscalls_gsf=`echo -e "$gscalls" | sed "s/$/\t$gsnum2/g"`
##cat ./data/filter/germline_count.int >> germline.txt
##echo -e "$gnum2" >> germline_samples_pass.txt
#
## Print the header and variants for germline samples called in pass file (final pass file)
##if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$gsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
##echo "Germline Samples Containing Variant" >> ./data/somatic_SNVs_pass_final.txt
##echo -e "LINE_ID\tSAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF\tGSF" >> ./data/somatic_SNVs_pass_final.txt
##echo -e "LINE_G\t$gscalls_gsf" >> ./data/somatic_SNVs_pass_final.txt
##fi
#
## Print the parental header in FINAL pass file
##if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
##echo "Parental Lines Containing Variant" >> ./data/somatic_SNVs_pass_final.txt
##echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_SNVs_pass_final.txt
##fi
#
## Search each parental line bam for each somatic called variant
##for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/00268[3-4]_Line-[6-7]_Bwa_RG_dedupped_realigned.bam`
##do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
##mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
##s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## CHROM, POS, READ_BASES
##int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
#
## FILTER VARIABLES
## Variant allele count
##vcount=`echo $int | grep -o "$alt" | wc -l`
## Coverage assigned a value even if mpu variable is either empty or is undefined
##cov=`echo -e "$mpu" | cut -f 4`
##cov="${cov:-1000000}"
## Variant allele frequency even if mpu variable is either empty or is undefined
##vaf=`echo "scale=2;$vcount/$cov" | bc`
##vaf="${vaf:-0}"
## Variant allele frequency threshold
##vaf_thres=`echo "scale=2;1/10" | bc`
#
## Filter only calls that will appear in file due to previous filter of somatic calls (":" is linux equivalent to Python's "PASS)
## Print the variables that passed all filters
##if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
##echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_pass_final.txt
##fi
##done
#done <./data/all_nonsyn_snvs_to_read.txt
#
## Make a copy of the pass file for further file manipulation
#cp ./data/somatic_SNVs_pass_final.txt ./data/somatic_SNVs_pass_final2.txt
## Capture the lines that start with these 2 strings and change the delimiter from space to tab
#grep -e "^LINE_V" -e "^LINE_T" ./data/somatic_SNVs_pass_final2.txt | \
#sed 's/ /\t/g' > ./data/somatic_SNVs_pass_final3.txt
#
## Create an intermediate file called layout to mimic finla file
#echo -e "#CHROM\tPOS\tREF\tALT\tCOV\tBASES\tVAC\tVAF\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLES" > layout.txt
## Read each line of the file with variants
#while read line
#do
## Apply the proper values from each line (String ID's at the beginning of each line to allow easy sorting)
#start=`echo -e "$line" | cut -f1`
#if [ "$start" = "LINE_V" ]; then
#v_line=`echo -e "$line"`
#chr=`echo "$v_line" | cut -f2`
#pos=`echo "$v_line" | cut -f3`
#ref=`echo "$v_line" | cut -f4`
#alt=`echo "$v_line" | cut -f5`
#mut=`echo "$v_line" | cut -f6`
#impact=`echo "$v_line" | cut -f7`
#symbol=`echo "$v_line" | cut -f8`
#ensembl=`echo "$v_line" | cut -f9`
#entrez=`echo "$v_line" | cut -f10`
#elif [ "$start" = "LINE_T" ]; then
#t_line=`echo -e "$line"`
#samples=`echo -e "$t_line" | cut -f2`
#cov=`echo -e "$t_line" | cut -f6`
#bases=`echo -e "$t_line" | cut -f7`
#vac=`echo -e "$t_line" | cut -f9`
#vaf=`echo -e "$t_line" | cut -f10`
#else
#:
#fi
#if [ "$start" = "LINE_T" ]; then
#echo -e "$chr\t$pos\t$ref\t$alt\t$cov\t$bases\t$vac\t$vaf\t$mut\t$impact\t$symbol\t$ensembl\t$entrez\t$samples" >> layout.txt
#fi
#done <./data/somatic_SNVs_pass_final3.txt
#
##Sort for unique values
#(grep "^#" layout.txt; grep -v "^#" layout.txt | sort | uniq) > layout_uniq.txt
## Remove the samples
#grep -v "^#" layout_uniq.txt | cut -f1-13 > layout_uniq_no_samples.txt
#
## Sort for the unique variants
#grep -v "^#" layout_uniq.txt | cut -f1,2,3,4 | sort | uniq > uniq_vars.int
#
## Grep the layout file for uniq variants and collect the appropriate stats
#rm ./results/somatic_snvs_final.int
#echo -e "#CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tTSN\tSAMPLE\tVAC\tVAF" > ./results/somatic_snvs_final.txt
#while read line
#do
#vac=`grep -e "$line" layout_uniq.txt | cut -f7`
#vacs=`echo -e "$vac" | tr '\n' '|' | sed 's/|$//'`
#vaf=`grep -e "$line" layout_uniq.txt | cut -f8`
#vafs=`echo -e "$vaf" | tr '\n' '|' | sed 's/|$//'`
#sample=`grep -e "$line" layout_uniq.txt | cut -f14 | awk '!seen[$0]++'`
#samples=`echo -e "$sample" | tr '\n' '|' | sed 's/|$//'`
#tsn=`echo -e "$samples" | tr '|' '\n' | wc -l`
#part1=`grep -e "$line" layout_uniq.txt | cut -f1-4 | awk '!seen[$0]++'`
#part2=`grep -e "$line" layout_uniq.txt | cut -f9-13 | awk '!seen[$0]++'`
#echo -e "$part1\t$part2\t$tsn\t$samples\t$vacs\t$vafs" >> ./results/somatic_snvs_final.int
#done <./uniq_vars.int
#sort -k7,7 ./results/somatic_snvs_final.int >> ./results/somatic_snvs_final.txt

# Run VEP annotation for somatic snvs
# Replace all of the samples ID's using an array and sed to replace the word only strings in file
# Send all the files into working directory and rename them
declare -A samples
samples["S1"]="738-1_S1"
samples["S2"]="741-1_S2"
samples["S3"]="756-3_S3"
samples["S4"]="766-1_S4"
samples["S5"]="798-1_S5"
samples["S6"]="833-1_S6"
samples["S7"]="834-2_S7"
samples["S8"]="855-1_S8"
samples["S9"]="863-1_S9"
samples["S10"]="918-3_S10"
samples["S11"]="927-2_S11"
samples["S12"]="834-2_2_S12"
samples["S13"]="911-1_2_S13"
samples["S14"]="777-3_S14"
samples["S15"]="787-2_S15"
samples["S16"]="788-1_S16"
samples["S17"]="794-1_S17"
samples["S18"]="835-1_S18"
samples["S19"]="841-3_S19"
samples["S20"]="842-2_S20"
samples["S21"]="884-2_S21"
samples["S22"]="901-2_S22"
samples["S23"]="906-1_S23"
samples["S24"]="911-1_S24"
samples["S25"]="842-2_2_S25"
samples["S26"]="901-2_2_S26"
for n in "${!samples[@]}"
do
echo "$n - ${samples[$n]}"
sed "s/\b$n\b/${samples[$n]}/g " /home/proj/MDW_genomics/xu/somaticseq/$n.ensemble.snp.vcf > ./data/somaticseq_vcf/${samples[$n]}_somaticseq_snv.vcf
bgzip -c ./data/somaticseq_vcf/${samples[$n]}_somaticseq_snv.vcf > ./data/somaticseq_vcf/${samples[$n]}_somaticseq_snv.vcf.gz
tabix -p vcf ./data/somaticseq_vcf/${samples[$n]}_somaticseq_snv.vcf.gz
done

# Perform VEP annotation on somatic SNV calls (non-filtered)
find ./data/somaticseq_vcf/ -name "*_somaticseq_snv.vcf" | \
xargs -i basename {} | \
sed 's/_somaticseq_snv.vcf//' | \
sort | uniq | head -n1| \
xargs -i echo 'qsub ./scripts/somatic_snvs_vep.sh {}' |sh

# ./scripts/somatic_snvs_vep.sh
##############################

cd /home/proj/MDW_genomics/steepale/mutated_gene_annotation

# Annotate with VEP
perl /home/users/a.steep/Apps/ensembl-tools-release-87/scripts/variant_effect_predictor/variant_effect_predictor.pl \
-i "./data/somaticseq_vcf/"$1"_somaticseq_snv.vcf" \
-o "./data/somaticseq_vcf/"$1"_somaticseq_snv_vep.vcf" \
--vcf \
--cache \
--species gallus_gallus \
--force_overwrite \
--plugin ProteinSeqs,"./data/proteinseqs/"$1"_somatic_snvs_reference.fa","./data/proteinseqs/"$1"_somatic_snvs_mutated.fa" \
--protein \
--hgvs \
--domains \
--ccds \
--uniprot \
--tsl \
--appris \
--sift b

##############################

# Once the files have been annotated, delete the copied somatic snv files to conserve space
rm ./data/somaticseq_vcf/*_somaticseq_snv.vcf*

# First change the "TUMOR" column title to each tumor sample's respective name
for bird in `cat /home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt`
do
sed -i "s/TUMOR/$bird/" "./data/somaticseq_vcf/"$bird"_somaticseq_snv_vep.vcf"
done

# Change the "NORMAL" column title to each normal sample's respective name
python ./scripts/edit_column_name.py

# ./scripts/edit_column_name.py
##############################
import sys
import os

#infile = open(sys.argv[1])
#outfile = open(sys.argv[2], 'w')

# Outfiles
#new_vep_file = {}
#open("./data/somaticseq_vcf/738-1_S1_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/741-1_S2_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/756-3_S3_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/766-1_S4_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/777-3_S14_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/787-2_S15_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/788-1_S16_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/794-1_S17_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/798-1_S5_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/833-1_S6_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/834-2_2_S12_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/834-2_S7_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/835-1_S18_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/841-3_S19_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/842-2_2_S25_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/842-2_S20_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/855-1_S8_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/863-1_S9_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/884-2_S21_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/901-2_2_S26_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/901-2_S22_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/906-1_S23_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/911-1_2_S13_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/911-1_S24_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/918-3_S10_somaticseq_snv_vep_labels.vcf", 'w')
#open("./data/somaticseq_vcf/927-2_S11_somaticseq_snv_vep_labels.vcf", 'w')


# Reference files
tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
germline_birds_file = "/home/users/a.steep/databases/samples/germline_sample_dnaseq_list_NNN-N_SN.txt"

# Create a vep_vcf file dictionary
tumor_vep_file = {}
for tbird in open(tumor_birds_file):
	tbird = tbird.rstrip()
	tumor_vep_file[tbird] = './data/somaticseq_vcf/' + tbird + '_somaticseq_snv_vep.vcf'

# Create a dictionary of output files
new_vep_file = {}
for tbird in open(tumor_birds_file):
	tbird = tbird.rstrip()
	new_vep_file[tbird] = open('./data/somaticseq_vcf/'+tbird+'_somaticseq_snv_vep_labels.vcf', 'w')

for gbird in open(germline_birds_file):
	gbird = gbird.rstrip()
	for tbird in open(tumor_birds_file):
		tbird = tbird.rstrip()
		if gbird[0:3] == tbird[0:3]:
			#outfile = new_vep_file[tbird]
			#print(outfile)
			for vcf_vep_line in open(tumor_vep_file[tbird]):
				if vcf_vep_line.split('\t')[0] == '#CHROM':
					vep_vcf_line = vcf_vep_line.replace('NORMAL', gbird)
					(new_vep_file[tbird]).write(vep_vcf_line)
				else:
					(new_vep_file[tbird]).write(vcf_vep_line)
##############################


# Merge all the files into an all encompassing vep annotated vcf file (useful for oncoprint later)
# Compress and index the files
for vep_vcf in `ls -1 ./data/somaticseq_vcf/*_somaticseq_snv_vep_labels.vcf | xargs -i basename {} | sed s'/_somaticseq_snv_vep_labels.vcf//'`
do
bgzip -c "./data/somaticseq_vcf/"$vep_vcf"_somaticseq_snv_vep_labels.vcf" > "./data/somaticseq_vcf/"$vep_vcf"_somaticseq_snv_vep_labels.vcf.gz"
tabix -p vcf "./data/somaticseq_vcf/"$vep_vcf"_somaticseq_snv_vep_labels.vcf.gz"
done

# Merge the vcf files
echo " `ls -1 ./data/somaticseq_vcf/*_somaticseq_snv_vep.vcf.gz | tr '\n' ' '`" |
xargs -i vcf-merge {} | bgzip -c > ./data/somatic_snvs_raw_vep.vcf.gz

vcf-merge ./data/somaticseq_vcf/738-1_S1_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/741-1_S2_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/756-3_S3_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/766-1_S4_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/777-3_S14_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/787-2_S15_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/788-1_S16_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/794-1_S17_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/798-1_S5_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/833-1_S6_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/834-2_2_S12_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/834-2_S7_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/835-1_S18_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/841-3_S19_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/842-2_2_S25_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/842-2_S20_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/855-1_S8_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/863-1_S9_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/884-2_S21_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/901-2_2_S26_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/901-2_S22_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/906-1_S23_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/911-1_2_S13_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/911-1_S24_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/918-3_S10_somaticseq_snv_vep_labels.vcf.gz \
./data/somaticseq_vcf/927-2_S11_somaticseq_snv_vep_labels.vcf.gz | \
bgzip -c > ./data/somatic_snvs_raw_vep.vcf.gz

# Remove the germline sample columns from the vcf file
(zgrep "^##" ./data/somatic_snvs_raw_vep.vcf.gz; \
zgrep -v "^##" ./data/somatic_snvs_raw_vep.vcf.gz | \
cut -f1-9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61) > \
./data/somatic_snvs_tumors_vep.vcf.gz

# Remove the relabeled files
rm ./data/somaticseq_vcf/927-2_S11_somaticseq_snv_vep_labels.vcf*
rm ./data/somatic_snvs_raw_vep.vcf.gz


# Filter the calls of interest from the vep vcf file and collect stats from samtools mpileup manual analysis
for Tbird in `cat /home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt | head -n1`
do
qsub ./scripts/custom_filter_somatic_snvs_wrapper.sh $Tbird
done

#for Tbird in `cat /home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt | head -n1`
#do
#echo './data/somaticseq_vcf/'$Tbird'_somaticseq_snv_vep.vcf'
#echo './data/somaticseq_vcf/'$Tbird'_somaticseq_snv_vep_test.vcf'
#head -n 100 './data/somaticseq_vcf/'$Tbird'_somaticseq_snv_vep.vcf' > './data/somaticseq_vcf/'$Tbird'_somaticseq_snv_vep_test.vcf'
#done



# ./scripts/custom_filter_somatic_snvs_wrapper.sh
##############################

cd /home/proj/MDW_genomics/steepale/mutated_gene_annotation

Tbird=$1

python ./scripts/custom_filter_somatic_snvs.py \
'./data/somaticseq_vcf/'$Tbird'_somaticseq_snv_vep.vcf' \
'./data/all_nonsyn_snvs_'$Tbird'.txt' \
$Tbird

# Grab the uniq lines (also corresponds to uniq snvs in this case) and sort
(grep "^#" './data/all_nonsyn_snvs_'$Tbird'.txt'; \
grep -v "^#" './data/all_nonsyn_snvs_'$Tbird'.txt' | sort | uniq) > \
'./data/all_nonsyn_snvs_'$Tbird'_final.txt'

# Remove redundant files
rm './data/all_nonsyn_snvs_'$Tbird'.txt'

##############################

# ./scripts/custom_filter_somatic_snvs.py
##############################
import sys
import os
import re
import subprocess
from subprocess import check_output
#import logging

# General Strategy of script:
# Script will take a single vep file from one tumor sample and search for each called variant
# across it's own tumor as well as all germline bam files with samtools mpileup. Then filters
# will be applied.

# Filters include:
# Variant must be in tumor bam file from which it was originally called by a variant caller
# Variants must have a variant allele frequency greater than or equal to 0.05
# Tumor file and germline bam pairs much each have a coverage of 4 at variant site
# Variant must not be found in more than 0 germline files (in any)

# Input file
vep_file = open(sys.argv[1], 'r')

# Output file
outfile = open(sys.argv[2], 'w')

# Tumor sample
tbird = sys.argv[3]

# Output to loggin file
#logging.basicConfig(filename='./analysis/vep_filter.log' ,level=logging.DEBUG)

# Reference files
#tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
germline_birds_file = "/home/users/a.steep/databases/samples/germline_sample_dnaseq_list_NNN-N_SN.txt"

# Create a dictionary of germline bam files
germline_bam_file = {}
for gbird in open(germline_birds_file):
	gbird = gbird.rstrip()
	germline_bam_file[gbird] = '/home/proj/MDW_genomics/xu/final_bam/' + gbird + '_Bwa_RG_dedupped_realigned.bam'

# Create a dictionary of tumor bam files
tumor_bam_file = {}
#for tbird in open(tumor_birds_file):
#	tbird = tbird.rstrip()
#tumor_bam_file[tbird] = '/home/proj/MDW_genomics/xu/final_bam/' + tbird + '_Bwa_RG_dedupped_realigned.bam'
tumor_bam_file[tbird] = '/home/proj/MDW_genomics/xu/final_bam/' + tbird + '_Bwa_RG_dedupped_realigned.bam'

# Write header to outfile
outfile.write('#CHROM' + '\t' + 'POS' + '\t' + 'REF' + '\t' + 'ALT' + '\t' + 'MUT' + '\t' + 'IMPACT' + '\t' + 'SYMBOL' + '\t' + 'GENE_ID' + '\t' + 'TSN' + '\t' + 'SAMPLE' + '\t' + 'VAC' + '\t' + 'VAF' + '\t' + 'CALLER_CONSENSUS' + '\n')

#lin_num = 1
# Create an array of the annotated vcf files
# vcf_file = {}
# Iterate over samples labels (birds) and create array
# for bird in open(tumor_birds_file):
#	bird = bird.rstrip()
	#vcf_file.append(bird)
#	vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_snv_vep.vcf"
	#Examine each vep file one by one to create a master file
for vep_line in vep_file:
	if vep_line[0] != '#':
		#lin_num = lin_num + 1
		#print(lin_num)
		vep_line = vep_line.rstrip()
		vep_cols = vep_line.split('\t')
		vep_chr = vep_cols[0]
		vep_pos = vep_cols[1]
		vep_ref = vep_cols[3]
		vep_alt = vep_cols[4]
		vep_snv = vep_chr + '\t' + vep_pos + '\t' + vep_ref + '\t' + vep_alt
		vep_info = vep_cols[7]
		vep_format = vep_cols[8]
		vep_normal = vep_cols[9]
		vep_tumor = vep_cols[10]
		vep_sample = tbird.rstrip()
		#print(vep_snv)
		#print(vep_sample)
		if re.search('SOMATIC', vep_info.split(';')[0]):
			vep_somat = vep_info.split(';')[0]
		else:
			vep_somat = 'NA'
		if re.search('MVJSDU', vep_info.split(';')[0]):
			vep_tools = vep_info.split(';')[0]
		elif re.search('MVJSDU', vep_info.split(';')[1]):
			vep_tools = vep_info.split(';')[1]
		if re.search('NUM_TOOLS', vep_info.split(';')[1]):
			vep_tool_num = vep_info.split(';')[1]
		elif re.search('NUM_TOOLS', vep_info.split(';')[2]):
			vep_tool_num = vep_info.split(';')[2]
		if re.search('CSQ=', vep_info.split(';')[2]):
			vep_info_ann = vep_info.split(';')[2].split('SQ=')[1]
			vep_info_ann_num = vep_info_ann.count(',') + 1
			info_ann = []
		elif re.search('CSQ=', vep_info.split(';')[3]):
			vep_info_ann = vep_info.split(';')[3].split('SQ=')[1]
			vep_info_ann_num = vep_info_ann.count(',') + 1
			info_ann = []
		for n in range(vep_info_ann_num):
			info_ann.append(n)
			info_ann[n] = vep_info_ann.split(',')[n]
			info_ann2read = info_ann[n]
			info_cols = info_ann2read.split('|')
			vep_allele = info_cols[0]
			vep_cons = info_cols[1]
			vep_impact = info_cols[2]
			vep_symbol = info_cols[3]
			vep_geneid = info_cols[4]
			vep_feat_type = info_cols[5]
			vep_feature = info_cols[6]
			vep_biotype = info_cols[7]
			vep_exon = info_cols[8]
			vep_intron = info_cols[9]
			vep_HGVSc = info_cols[10]
			vep_HGVSp = info_cols[11]
			vep_cDNA_pos = info_cols[12]
			vep_CDS_pos = info_cols[13]
			vep_protein_pos = info_cols[14]
			vep_aminos = info_cols[15]
			vep_codons = info_cols[16]
			vep_existing_var = info_cols[17]
			vep_distance = info_cols[18]
			vep_strand = info_cols[19]
			vep_flags = info_cols[20]
			vep_symbol_source = info_cols[21]
			vep_HGNC_ID = info_cols[22]
			vep_tsl = info_cols[23]
			vep_appris = info_cols[24]
			vep_ccds = info_cols[25]
			vep_ensp = info_cols[26]
			vep_swissprot = info_cols[27]
			vep_trembl = info_cols[28]
			vep_uniparc = info_cols[29]
			vep_sift = info_cols[30]
			vep_domains = info_cols[31]
			vep_hgvs_offset = info_cols[32]
			# Create counter for each germline and tumor bam file with variant at sufficient VAF and set to zero
			g_sample_var_count = 0
			t_sample_var_count = 0
			# Create coverage variables
			same_tumor_cov = "no"
			gleich_germline_cov = "no"
			# Reset all variables
			g_bird = None
			germline_bam = None
			g_mpu_bases = None
			g_mpu_depth = None
			g_VAC = None
			g_VAF = None
			g_samtools_cmd = None
			g_samtools_proc = None
			g_out = None
			g_err = None
			g_mpu_out = None
			g_mpu = None
			same_bird = None
			same_mpu_chr = None
			same_mpu_pos = None
			same_mpu_ref = None
			same_mpu_depth = None
			same_mpu_bases = None
			same_VAC = None
			same_VAF = None
			g_mpu_chr = None
			g_mpu_pos = None
			g_mpu_ref = None
			g_mpu_depth = None
			g_mpu_bases = None
			g_VAC = None
			g_VAF = None
			t_bird = None
			tumor_bam = None
			t_samtools_cmd = None
			t_samtools_proc = None
			t_out = None
			t_err = None
			t_mpu_out = None
			t_mpu = None
			gleich_bird = None
			gleich_mpu_chr = None
			gleich_mpu_pos = None
			gleich_mpu_ref = None
			gleich_mpu_depth = None
			gleich_mpu_bases = None
			gleich_VAC = None
			gleich_VAF = None
			t_mpu_chr = None
			t_mpu_pos = None
			t_mpu_ref = None
			t_mpu_depth = None
			t_mpu_bases = None
			t_VAC = None
			t_VAF = None
			tumor_samples = None
			tumor_VAC = None
			tumor_VAF = None
			gleich_tumor_status = 'no'
			same_germline_status = 'no'
			tumor_in_germline_out = 'no'
			if vep_impact == 'MODERATE' or vep_impact == 'HIGH':
				# Search each tumor and germline bam file for the variant
				for g_bird, germline_bam in germline_bam_file.items():
					# Set all counting variables to zero
					g_mpu_bases = ''
					g_mpu_depth = 0
					g_VAC = 0
					g_VAF = 0
					# Put the command in a variable
					g_samtools_cmd = 'samtools mpileup -r ' + vep_chr+':'+vep_pos+'-'+vep_pos+' '+germline_bam
					# Use subprocess.Popen to ellicit shell commands 
					g_samtools_proc = subprocess.Popen([g_samtools_cmd], stdout=subprocess.PIPE, shell=True)
					# Use communicate to capture the output in a 'bytes' object
					(g_out, g_err) = g_samtools_proc.communicate()
					# Decode the 'bytes' object to a string
					g_mpu_out = g_out.decode("utf-8")
					g_mpu = g_mpu_out.rstrip()
					if g_bird[0:3] == vep_sample[0:3] and g_mpu != '':
						#print(g_mpu)
						same_bird = vep_sample
						same_mpu_chr = g_mpu.split('\t')[0]
						same_mpu_pos = g_mpu.split('\t')[1]
						same_mpu_ref = g_mpu.split('\t')[2]
						same_mpu_depth = int(g_mpu.split('\t')[3])
						if same_mpu_depth == 0:
							pass
						else:
							same_mpu_bases = g_mpu.split('\t')[4].upper()
							same_VAC = same_mpu_bases.count(vep_alt)
							same_VAF = same_VAC/same_mpu_depth
							if same_VAF >= 0.05 and same_mpu_depth >= 4:
								g_sample_var_count = g_sample_var_count + 1
								same_germline_status = 'yes'
								#print('SAME GERMLINE STATUS WORKS: ' + same_germline_status + '\n' + '\n')
							if same_mpu_depth >= 4:
								same_tumor_cov = "yes"
							else:
								same_tumor_cov = "no"
					elif g_mpu == '' or int(g_mpu.split('\t')[3]) == 0:
						pass
					else:
						#print(g_mpu)
						g_mpu_chr = g_mpu.split('\t')[0]
						g_mpu_pos = g_mpu.split('\t')[1]
						g_mpu_ref = g_mpu.split('\t')[2]
						g_mpu_depth = int(g_mpu.split('\t')[3])
						g_mpu_bases = g_mpu.split('\t')[4].upper()
						g_VAC = g_mpu_bases.count(vep_alt)
						g_VAF = g_VAC/g_mpu_depth
						# Add to counter for each germline file with variant at sufficient VAF
						if g_VAF >= 0.10:
							g_sample_var_count = g_sample_var_count + 1
				# Search input tumor bam for each somatic called variant
				for t_bird, tumor_bam in tumor_bam_file.items():
					t_samtools_cmd = 'samtools mpileup -r ' + vep_chr+':'+vep_pos+'-'+vep_pos+' '+tumor_bam
					t_samtools_proc = subprocess.Popen([t_samtools_cmd], stdout=subprocess.PIPE, shell=True)
					(t_out, t_err) = t_samtools_proc.communicate()
					t_mpu_out = t_out.decode("utf-8")
					t_mpu = t_mpu_out.rstrip()
					if t_bird == vep_sample and t_mpu != '':
						gleich_bird = vep_sample
						gleich_mpu_chr = t_mpu.split('\t')[0]
						gleich_mpu_pos = t_mpu.split('\t')[1]
						gleich_mpu_ref = t_mpu.split('\t')[2]
						gleich_mpu_depth = int(t_mpu.split('\t')[3])
						gleich_mpu_bases = t_mpu.split('\t')[4].upper()
						gleich_VAC = gleich_mpu_bases.count(vep_alt)
						gleich_VAF = gleich_VAC/gleich_mpu_depth
						if gleich_VAF >= 0.05 and gleich_mpu_depth >= 4:
							t_sample_var_count = t_sample_var_count + 1
							gleich_tumor_status = 'yes'
							if tumor_samples != None:
								tumor_samples = tumor_samples + '|' + t_bird
							elif tumor_samples == None:
								tumor_samples = t_bird
							if tumor_VAC != None:
								tumor_VAC = tumor_VAC + '|' + str(gleich_VAC)
							elif tumor_VAC == None:
								tumor_VAC = str(gleich_VAC)
							if tumor_VAF != None:
								tumor_VAF = tumor_VAF + '|' + str(gleich_VAF)[0:5]
							elif tumor_VAF == None:
								tumor_VAF = str(gleich_VAF)[0:5]
							#print('Gleich Tumor STATUS WORKS: ' + gleich_tumor_status + '\n' + '\n')
						if gleich_mpu_depth >= 4:
							gleich_germline_cov = "yes"
						else:
							gleich_germline_cov = "no"
					elif t_mpu == '' or int(t_mpu.split('\t')[3]) == 0:
						pass
					#else:
						#t_mpu_chr = t_mpu.split('\t')[0]
						#print('vep_snv: ' + vep_snv)
						#print('Variant Call Sample: ' + vep_sample)
						#print('t_bird: ' + t_bird)
						#print('tumor_bam: ' + tumor_bam)
						#print('t_mpu: ' + t_mpu)
						#print('t_mpu_chr: ' + t_mpu_chr)
						#t_mpu_pos = t_mpu.split('\t')[1]
						#t_mpu_ref = t_mpu.split('\t')[2]
						#t_mpu_depth = int(t_mpu.split('\t')[3])
						#t_mpu_bases = t_mpu.split('\t')[4].upper()
						#t_VAC = t_mpu_bases.count(vep_alt)
						#t_VAF = t_VAC/t_mpu_depth
						#if t_VAF >= 0.05:
							#t_sample_var_count = t_sample_var_count + 1
							#if tumor_samples != None:
								#tumor_samples = tumor_samples + '|' + t_bird
							#elif tumor_samples == None:
								#tumor_samples = t_bird
							#if tumor_VAC != None:
								#tumor_VAC = tumor_VAC + '|' + str(t_VAC)
							#elif tumor_VAC == None:
								#tumor_VAC = str(t_VAC)
							#if tumor_VAF != None:
								#tumor_VAF = tumor_VAF + '|' + str(t_VAF)[0:5]
							#elif tumor_VAF == None:
								#tumor_VAF = str(t_VAF)[0:5]
				if gleich_tumor_status == 'yes' and same_germline_status == 'no':
					tumor_in_germline_out = 'yes'
				else:
					tumor_in_germline_out = 'no'
				if vep_symbol == '':
					vep_symbol = 'NA'
				# Perform final filters, if found at relevant freq in tumors and not found at slightly high freq in germline
				if t_sample_var_count > 0 and g_sample_var_count <= 0 and gleich_germline_cov == 'yes' and same_tumor_cov == 'yes' and tumor_in_germline_out == 'yes':
					outfile.write(vep_chr + '\t' + vep_pos + '\t' + vep_ref + '\t' + vep_alt + '\t' + vep_cons + '\t' + vep_impact + '\t' + vep_symbol + '\t' + vep_geneid + '\t' + str(t_sample_var_count) + '\t' + tumor_samples + '\t' + tumor_VAC + '\t' + tumor_VAF + '\t' + vep_tool_num + '\n')

#logging.debug('This message should go to the log file')
#logging.info('So should this')
#logging.warning('And this, too')
##############################

# Create a file with all snvs and associated stats
python ./scripts/combine_final_snvs.py

# ./scripts/combine_final_snvs.py
############################
import sys
import os
import re

# Output file
outfile = open("./results/somatics_snvs_final.txt", 'w')

# Reference files
tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
germline_birds_file = "/home/users/a.steep/databases/samples/germline_sample_dnaseq_list_NNN-N_SN.txt"
#final_somatic_snv_files = '/home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/final_somatic_snv_files.txt'

# Write header to outfile
outfile.write('#CHROM' + '\t' + 'POS' + '\t' + 'REF' + '\t' + 'ALT' + '\t' + 'MUT' + '\t' + 'IMPACT' + '\t' + 'SYMBOL' + '\t' + 'GENE_ID' + '\t' + 'TSN' + '\t' + 'SAMPLE' + '\t' + 'VAC' + '\t' + 'VAF' + '\n')

# Iterate over samples labels (birds) and create dictionary
final_snv_file = {}
for bird in open(tumor_birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	final_snv_file[bird] = "./data/all_nonsyn_snvs_" + bird + "_final.txt"

# Define empty variables
#final_output = None

other_file_list = ['./data/all_nonsyn_snvs_738-1_S1_final.txt',
'./data/all_nonsyn_snvs_741-1_S2_final.txt',
'./data/all_nonsyn_snvs_756-3_S3_final.txt',
'./data/all_nonsyn_snvs_766-1_S4_final.txt',
'./data/all_nonsyn_snvs_777-3_S14_final.txt',
'./data/all_nonsyn_snvs_787-2_S15_final.txt',
'./data/all_nonsyn_snvs_788-1_S16_final.txt',
'./data/all_nonsyn_snvs_794-1_S17_final.txt',
'./data/all_nonsyn_snvs_798-1_S5_final.txt',
'./data/all_nonsyn_snvs_833-1_S6_final.txt',
'./data/all_nonsyn_snvs_834-2_2_S12_final.txt',
'./data/all_nonsyn_snvs_834-2_S7_final.txt',
'./data/all_nonsyn_snvs_835-1_S18_final.txt',
'./data/all_nonsyn_snvs_841-3_S19_final.txt',
'./data/all_nonsyn_snvs_842-2_2_S25_final.txt',
'./data/all_nonsyn_snvs_842-2_S20_final.txt',
'./data/all_nonsyn_snvs_855-1_S8_final.txt',
'./data/all_nonsyn_snvs_863-1_S9_final.txt',
'./data/all_nonsyn_snvs_884-2_S21_final.txt',
'./data/all_nonsyn_snvs_901-2_2_S26_final.txt',
'./data/all_nonsyn_snvs_901-2_S22_final.txt',
'./data/all_nonsyn_snvs_906-1_S23_final.txt',
'./data/all_nonsyn_snvs_911-1_2_S13_final.txt',
'./data/all_nonsyn_snvs_911-1_S24_final.txt',
'./data/all_nonsyn_snvs_918-3_S10_final.txt',
'./data/all_nonsyn_snvs_927-2_S11_final.txt']

# Grab unique values and combine variable
# Start going through all the samples one by one
for bird in open(tumor_birds_file):
	bird = bird.rstrip()
	# For each line in final SNVs file
	for snv_line in open(final_snv_file[bird]):
		snv_line = snv_line.rstrip()
		if snv_line[0] != '#':
			snv_col = snv_line.split('\t')
			snv_chr = snv_col[0]
			final_chr = snv_chr
			snv_pos = snv_col[1]
			final_pos = snv_pos
			snv_ref = snv_col[2]
			final_ref = snv_ref
			snv_alt = snv_col[3]
			final_alt = snv_alt
			snv_mut = snv_col[4]
			final_mut = snv_mut
			snv_impact = snv_col[5]
			final_impact = snv_impact
			snv_symbol = snv_col[6]
			final_symbol = snv_symbol
			snv_geneid = snv_col[7]
			final_geneid = snv_geneid
			snv_tsn = int(snv_col[8])
			final_tsn = snv_tsn
			snv_sample = snv_col[9]
			final_sample = snv_sample
			snv_vac = snv_col[10]
			final_vac = snv_vac
			snv_vaf = snv_col[11]
			final_vaf = snv_vaf
			#final_output = None
			#print(final_tsn)
			for n in range(26):
				for other_line in open(other_file_list[n]):
					other_line = other_line.rstrip()
					#print('other_line: ' + other_line)
					if other_line[0] != '#':
						other_col = other_line.split('\t')
						other_chr = other_col[0]
						other_pos = other_col[1]
						other_ref = other_col[2]
						other_alt = other_col[3]
						other_mut = other_col[4]
						other_impact = other_col[5]
						other_symbol = other_col[6]
						other_geneid = other_col[7]
						other_tsn = int(other_col[8])
						other_sample = other_col[9]
						other_vac = other_col[10]
						other_vaf = other_col[11]
						if snv_chr == other_chr and snv_pos == other_pos and snv_alt == other_alt and snv_sample != other_sample:
							final_output = 'Won'
							#final_chr = snv_chr
							#final_pos = snv_pos
							#final_ref = snv_ref
							#final_alt = snv_alt
							#final_mut = snv_mut
							#final_impact = snv_impact
							#final_symbol = snv_symbol
							#final_geneid = snv_geneid
							final_tsn = final_tsn + other_tsn
							final_sample = final_sample + '|' + other_sample 
							final_vac = final_vac + '|' + other_vac
							final_vaf = final_vaf + '|' + other_vaf
			#if final_output != None:
			outfile.write(final_chr + '\t' + final_pos + '\t' + final_ref + '\t' + final_alt + '\t' + final_mut + '\t' + final_impact + '\t' + final_symbol + '\t' + final_geneid + '\t' + str(final_tsn) + '\t' + final_sample + '\t' + final_vac + '\t' + final_vaf + '\n')
############################

# Rename the output file
mv ./results/somatics_snvs_final.txt ./results/somatics_snvs_final_int.txt

# Sort the files and grab unique line (some lines are redendent comparisons)
(grep "^#" ./results/somatics_snvs_final_int.txt; \
grep -v "^#" ./results/somatics_snvs_final_int.txt | \
awk -F"\t" '!seen[$1, $2, $3, $4, $5, $6, $7, $8, $9]++' | \
sort -k9,9n) > ./results/somatic_snvs_final.txt

# Create a VEP annotated vcf file from filtered calls
# SNVs
python ./scripts/filtered_somatic_snv_calls_vcf_format.py \
./results/somatic_snvs_final.txt \
./results/somatic_snvs_final_vep.vcf

# ./scripts/filtered_somatic_snv_calls_vcf_format.py
#############################
import sys
import os
import re

# Input file
infile = sys.argv[1]

# Output file
outfile = open(sys.argv[2], 'w')


# Reference files
birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
header_file = "./data/somaticseq_vcf/738-1_S1_somaticseq_snv_vep.vcf"

# Create an array of vcf files
vcf_file = {}
# Iterate over samples labels (birds) and create array
for bird in open(birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_snv_vep.vcf"

# Create a header for the vep vcf file
# Note: I checked all headers from tumor vcf files, they are all the same, can choose one arbitrarily
for header_line in open(header_file):
	if header_line[0] == '#':
		outfile.write(header_line)

# Start at each line in the final filtered variants file and pull appropriate calls from annotated vcf file
for in_line in open(infile):
	if in_line[0] != '#':
		in_line = in_line.rstrip()
		in_cols = in_line.split('\t')
		in_chr = in_cols[0]
		in_pos = in_cols[1]
		in_ref = in_cols[2]
		in_alt = in_cols[3]
		in_snv = in_chr + in_pos + in_ref + in_alt
		in_sample = in_cols[9]
		in_sample_num = in_sample.count('|') + 1
		#print('\n' + in_line)
		#print(in_sample)
		#print(in_sample_num)
		# Note: Range treats numbers as zero-based
		sample = []
		for n in range(in_sample_num):
			print(n)
			print(in_sample)
			print(in_sample.split('|')[n])
			sample.append(n)
			sample[n] = in_sample.split('|')[n]
			print('sample[' + str(n) + ']: ' + sample[n])
			vcf_file2read = vcf_file[sample[n]]
			#print(vcf_file2read)
			for vcf_line in open(vcf_file2read):
				#vcf_line = vcf_line.rstrip()
				if vcf_line[0] != '#': 
					vcf_cols = vcf_line.split('\t')
					vcf_chr = vcf_cols[0]
					vcf_pos = vcf_cols[1]
					vcf_ref = vcf_cols[3]
					vcf_alt = vcf_cols[4]
					vcf_snv = vcf_chr + vcf_pos + vcf_ref + vcf_alt
					if in_snv == vcf_snv:
						outfile.write(vcf_line)
#############################


# Run VEP annotation for somatic indels
# Replace all of the samples ID's using an array and sed to replace the word only strings in file
# Send all the files into working directory and rename them
declare -A samples
samples["S1"]="738-1_S1"
samples["S2"]="741-1_S2"
samples["S3"]="756-3_S3"
samples["S4"]="766-1_S4"
samples["S5"]="798-1_S5"
samples["S6"]="833-1_S6"
samples["S7"]="834-2_S7"
samples["S8"]="855-1_S8"
samples["S9"]="863-1_S9"
samples["S10"]="918-3_S10"
samples["S11"]="927-2_S11"
samples["S12"]="834-2_2_S12"
samples["S13"]="911-1_2_S13"
samples["S14"]="777-3_S14"
samples["S15"]="787-2_S15"
samples["S16"]="788-1_S16"
samples["S17"]="794-1_S17"
samples["S18"]="835-1_S18"
samples["S19"]="841-3_S19"
samples["S20"]="842-2_S20"
samples["S21"]="884-2_S21"
samples["S22"]="901-2_S22"
samples["S23"]="906-1_S23"
samples["S24"]="911-1_S24"
samples["S25"]="842-2_2_S25"
samples["S26"]="901-2_2_S26"
for n in "${!samples[@]}"
do
echo "$n - ${samples[$n]}"
sed "s/\b$n\b/${samples[$n]}/g " /home/proj/MDW_genomics/xu/somaticseq/$n.ensemble.indel.vcf > ./data/somaticseq_vcf/${samples[$n]}_somaticseq_indel.vcf
bgzip -c ./data/somaticseq_vcf/${samples[$n]}_somaticseq_indel.vcf > ./data/somaticseq_vcf/${samples[$n]}_somaticseq_indel.vcf.gz
tabix -p vcf ./data/somaticseq_vcf/${samples[$n]}_somaticseq_indel.vcf.gz
done

# Perform VEP annotation on somatic INDEL calls (non-filtered)
find ./data/somaticseq_vcf/ -name "*_somaticseq_indel.vcf" | \
xargs -i basename {} | \
sed 's/_somaticseq_indel.vcf//' | \
sort | uniq | \
xargs -i echo 'qsub ./scripts/somatic_indels_vep.sh {}' |sh

# ./scripts/somatic_indels_vep.sh
##############################

cd /home/proj/MDW_genomics/steepale/mutated_gene_annotation

# Annotate with VEP
perl /home/users/a.steep/Apps/ensembl-tools-release-87/scripts/variant_effect_predictor/variant_effect_predictor.pl \
-i "./data/somaticseq_vcf/"$1"_somaticseq_indel.vcf" \
-o "./data/somaticseq_vcf/"$1"_somaticseq_indel_vep.vcf" \
--vcf \
--cache \
--species gallus_gallus \
--force_overwrite \
--plugin ProteinSeqs,"./data/proteinseqs/"$1"_somatic_indels_reference.fa","./data/proteinseqs/"$1"_somatic_indels_mutated.fa" \
--protein \
--hgvs \
--domains \
--ccds \
--uniprot \
--tsl \
--appris \
--sift b

##############################

# First change the "TUMOR" column title to each sample's respective name
for bird in `cat /home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt`
do
sed -i "s/TUMOR/$bird/" "./data/somaticseq_vcf/"$bird"_somaticseq_indel_vep.vcf"
done

# Change the "NORMAL" column title to each normal sample's respective name
python ./scripts/edit_column_name_indels.py

# ./scripts/edit_column_name_indels.py
##############################
import sys
import os

#infile = open(sys.argv[1])
#outfile = open(sys.argv[2], 'w')

# Reference files
tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
germline_birds_file = "/home/users/a.steep/databases/samples/germline_sample_dnaseq_list_NNN-N_SN.txt"

# Create a vep_vcf file dictionary
tumor_vep_file = {}
for tbird in open(tumor_birds_file):
	tbird = tbird.rstrip()
	tumor_vep_file[tbird] = './data/somaticseq_vcf/' + tbird + '_somaticseq_indel_vep.vcf'

# Create a dictionary of output files
new_vep_file = {}
for tbird in open(tumor_birds_file):
	tbird = tbird.rstrip()
	new_vep_file[tbird] = open('./data/somaticseq_vcf/'+tbird+'_somaticseq_indel_vep_labels.vcf', 'w')

for gbird in open(germline_birds_file):
	gbird = gbird.rstrip()
	for tbird in open(tumor_birds_file):
		tbird = tbird.rstrip()
		if gbird[0:3] == tbird[0:3]:
			#outfile = new_vep_file[tbird]
			#print(outfile)
			for vcf_vep_line in open(tumor_vep_file[tbird]):
				if vcf_vep_line.split('\t')[0] == '#CHROM':
					vep_vcf_line = vcf_vep_line.replace('NORMAL', gbird)
					(new_vep_file[tbird]).write(vep_vcf_line)
				else:
					(new_vep_file[tbird]).write(vcf_vep_line)
##############################


# Filter the calls of interest from the vep vcf file and collect stats from samtools mpileup manual analysis
for Tbird in `cat /home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt`
do
qsub ./scripts/custom_filter_somatic_indels_wrapper.sh $Tbird
done

#for Tbird in `cat /home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt | head -n1`
#do
#echo './data/somaticseq_vcf/'$Tbird'_somaticseq_indel_vep.vcf'
#echo './data/somaticseq_vcf/'$Tbird'_somaticseq_indel_vep_test.vcf'
#head -n 100 './data/somaticseq_vcf/'$Tbird'_somaticseq_indel_vep.vcf' > './data/somaticseq_vcf/'$Tbird'_somaticseq_indel_vep_test.vcf'
#done

# ./scripts/custom_filter_somatic_indels_wrapper.sh
##############################

cd /home/proj/MDW_genomics/steepale/mutated_gene_annotation

Tbird=$1

python ./scripts/custom_filter_somatic_indels.py \
'./data/somaticseq_vcf/'$Tbird'_somaticseq_indel_vep.vcf' \
'./data/all_nonsyn_indels_'$Tbird'.txt' \
$Tbird

# Grab the uniq lines (also corresponds to uniq indels in this case) and sort
(grep "^#" './data/all_nonsyn_indels_'$Tbird'.txt'; \
grep -v "^#" './data/all_nonsyn_indels_'$Tbird'.txt' | sort | uniq) > \
'./data/all_nonsyn_indels_'$Tbird'_final.txt'

# Remove redundant files
rm './data/all_nonsyn_indels_'$Tbird'.txt'

##############################

# ./scripts/custom_filter_somatic_indels.py
##############################
import sys
import os
import re
import subprocess
from subprocess import check_output

# Input file
vep_file = open(sys.argv[1], 'r')

# Output files
outfile = open(sys.argv[2], 'w')


# Tumor sample
tbird = sys.argv[3]

# Reference files
#tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
germline_birds_file = "/home/users/a.steep/databases/samples/germline_sample_dnaseq_list_NNN-N_SN.txt"

# Create a dictionary of germline bam files
germline_bam_file = {}
for gbird in open(germline_birds_file):
	gbird = gbird.rstrip()
	germline_bam_file[gbird] = '/home/proj/MDW_genomics/xu/final_bam/' + gbird + '_Bwa_RG_dedupped_realigned.bam'

# Create a dictionary of tumor bam files
tumor_bam_file = {}
#for tbird in open(tumor_birds_file):
#	tbird = tbird.rstrip()
tumor_bam_file[tbird] = '/home/proj/MDW_genomics/xu/final_bam/' + tbird + '_Bwa_RG_dedupped_realigned.bam'

# Write header to outfile
outfile.write('#CHROM' + '\t' + 'POS' + '\t' + 'REF' + '\t' + 'ALT' + '\t' + 'MUT' + '\t' + 'IMPACT' + '\t' + 'SYMBOL' + '\t' + 'GENE_ID' + '\t' + 'TSN' + '\t' + 'SAMPLE' + '\t' + 'VAC' + '\t' + 'VAF' + '\n')

# Create null variables
vep_del_length = None
vep_del_samtools_str = ''
vep_ins_length = None
vep_ins_samtools_str = ''

#lin_num = 1
# Create an array of the annotated vcf files
#vcf_file = {}
# Iterate over samples labels (birds) and create array
#for bird in open(tumor_birds_file):
#bird = bird.rstrip()
#vcf_file.append(bird)
#vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_indel_vep.vcf"
#Examine each vep file one by one to create a master file
for vep_line in vep_file:
	if vep_line[0] != '#':
		#lin_num = lin_num + 1
		#print(lin_num)
		vep_line = vep_line.rstrip()
		vep_cols = vep_line.split('\t')
		vep_chr = vep_cols[0]
		#print('vep_chr: ' + vep_chr)
		vep_pos = vep_cols[1]
		#print('vep_pos: ' + vep_pos)
		vep_ref = vep_cols[3]
		#print('vep_ref: ' + vep_ref)
		vep_alt = vep_cols[4]
		#print('vep_alt: ' + vep_alt)
		# Create samtools annotation for insertion
		if len(vep_alt) > len(vep_ref):
			vep_ins_length = len(vep_alt) - len(vep_ref) 
			vep_ins_samtools_str = '+' + str(vep_ins_length) + vep_alt[-vep_ins_length:]
		# Create samtools annotation for deletion
		elif len(vep_alt) < len(vep_ref):
			vep_del_length = len(vep_ref) - len(vep_alt)
			vep_del_samtools_str = 'N' * vep_del_length
		elif len(vep_alt) == len(vep_ref):
			outfile.write('\n' + '\n' + 'WARNING WARNING WARNING' + '\n' + '\n' )
		vep_indel = vep_chr + '\t' + vep_pos + '\t' + vep_ref + '\t' + vep_alt
		vep_info = vep_cols[7]
		vep_format = vep_cols[8]
		vep_normal = vep_cols[9]
		vep_tumor = vep_cols[10]
		vep_sample = tbird
		#print(vep_indel)
		#print(vep_sample)
		if re.search('SOMATIC', vep_info.split(';')[0]):
			vep_somat = vep_info.split(';')[0]
		else:
			vep_somat = 'NA'
		if re.search('MVDL', vep_info.split(';')[0]):
			vep_tools = vep_info.split(';')[0]
		elif re.search('MVDL', vep_info.split(';')[1]):
			vep_tools = vep_info.split(';')[1]
		if re.search('NUM_TOOLS', vep_info.split(';')[1]):
			vep_tool_num = vep_info.split(';')[1]
		elif re.search('NUM_TOOLS', vep_info.split(';')[2]):
			vep_tool_num = vep_info.split(';')[2]
		if re.search('CSQ=', vep_info.split(';')[2]):
			vep_info_ann = vep_info.split(';')[2].split('SQ=')[1]
			vep_info_ann_num = vep_info_ann.count(',') + 1
			info_ann = []
		elif re.search('CSQ=', vep_info.split(';')[3]):
			vep_info_ann = vep_info.split(';')[3].split('SQ=')[1]
			vep_info_ann_num = vep_info_ann.count(',') + 1
			info_ann = []
		for n in range(vep_info_ann_num):
			info_ann.append(n)
			info_ann[n] = vep_info_ann.split(',')[n]
			info_ann2read = info_ann[n]
			info_cols = info_ann2read.split('|')
			vep_allele = info_cols[0]
			#print('vep_allele: ' + vep_allele)
			vep_cons = info_cols[1]
			#print('vep_cons: ' + vep_cons)
			vep_impact = info_cols[2]
			#print('vep_impact: ' + vep_impact)
			vep_symbol = info_cols[3]
			#print('vep_symbol: ' + vep_symbol)
			vep_geneid = info_cols[4]
			#print('vep_geneid: ' + vep_geneid)
			vep_feat_type = info_cols[5]
			#print('vep_feat_type: ' + vep_feat_type)
			vep_feature = info_cols[6]
			#print('vep_feature: ' + vep_feature)
			vep_biotype = info_cols[7]
			#print('vep_biotype: ' + vep_biotype)
			vep_exon = info_cols[8]
			#print('vep_exon: ' + vep_exon)
			vep_intron = info_cols[9]
			#print('vep_intron: ' + vep_intron)
			vep_HGVSc = info_cols[10]
			#print('vep_HGVSc: ' + vep_HGVSc)
			vep_HGVSp = info_cols[11]
			#print('vep_HGVSp: ' + vep_HGVSp)
			vep_cDNA_pos = info_cols[12]
			#print('vep_cDNA_pos: ' + vep_cDNA_pos)
			vep_CDS_pos = info_cols[13]
			#print('vep_CDS_pos: ' + vep_CDS_pos)
			vep_protein_pos = info_cols[14]
			#print('vep_protein_pos: ' + vep_protein_pos)
			vep_aminos = info_cols[15]
			#print('vep_aminos: ' + vep_aminos)
			vep_codons = info_cols[16]
			#print('vep_codons: ' + vep_codons)
			vep_existing_var = info_cols[17]
			#print('vep_existing_var: ' + vep_existing_var)
			vep_distance = info_cols[18]
			#print('vep_distance: ' + vep_distance)
			vep_strand = info_cols[19]
			#print('vep_strand: ' + vep_strand)
			vep_flags = info_cols[20]
			#print('vep_flags: ' + vep_flags)
			vep_symbol_source = info_cols[21]
			#print('vep_symbol_source: ' + vep_symbol_source)
			vep_HGNC_ID = info_cols[22]
			#print('vep_HGNC_ID: ' + vep_HGNC_ID)
			vep_tsl = info_cols[23]
			#print('vep_tsl: ' + vep_tsl)
			vep_appris = info_cols[24]
			#print('vep_appris: ' + vep_appris)
			vep_ccds = info_cols[25]
			#print('vep_ccds: ' + vep_ccds)
			vep_ensp = info_cols[26]
			#print('vep_ensp: ' + vep_ensp)
			vep_swissprot = info_cols[27]
			#print('vep_swissprot: ' + vep_swissprot)
			vep_trembl = info_cols[28]
			#print('vep_trembl: ' + vep_trembl)
			vep_uniparc = info_cols[29]
			#print('vep_uniparc: ' + vep_uniparc)
			vep_sift = info_cols[30]
			#print('vep_sift: ' + vep_sift)
			vep_domains = info_cols[31]
			#print('vep_domains: ' + vep_domains)
			vep_hgvs_offset = info_cols[32]
			#print('vep_hgvs_offset: ' + vep_hgvs_offset)
			# Create counter for each germline and tumor bam file with variant at sufficient VAF and set to zero
			g_sample_var_count = 0
			t_sample_var_count = 0
			# Create coverage variables
			same_tumor_cov = "no"
			gleich_germline_cov = "no"
			# Reset all variables
			g_bird = None
			germline_bam = None
			g_mpu_bases = None
			g_mpu_depth = None
			g_VAC = None
			g_VAF = None
			g_samtools_cmd = None
			g_samtools_proc = None
			g_out = None
			g_err = None
			g_mpu_out = None
			g_mpu = None
			same_bird = None
			same_mpu_chr = None
			same_mpu_pos = None
			same_mpu_ref = None
			same_mpu_depth = None
			same_mpu_bases = None
			same_VAC = None
			same_VAF = None
			g_mpu_chr = None
			g_mpu_pos = None
			g_mpu_ref = None
			g_mpu_depth = None
			g_mpu_bases = None
			g_VAC = None
			g_VAF = None
			t_bird = None
			tumor_bam = None
			t_samtools_cmd = None
			t_samtools_proc = None
			t_out = None
			t_err = None
			t_mpu_out = None
			t_mpu = None
			gleich_bird = None
			gleich_mpu_chr = None
			gleich_mpu_pos = None
			gleich_mpu_ref = None
			gleich_mpu_depth = None
			gleich_mpu_bases = None
			gleich_VAC = None
			gleich_VAF = None
			t_mpu_chr = None
			t_mpu_pos = None
			t_mpu_ref = None
			t_mpu_depth = None
			t_mpu_bases = None
			t_VAC = None
			t_VAF = None
			tumor_samples = None
			tumor_VAC = None
			tumor_VAF = None
			gleich_tumor_status = 'no'
			same_germline_status = 'no'
			tumor_in_germline_out = 'no'
			same_mpu = None
			gleich_mpu = None
			#if vep_pos == '80972149':
				#outfile.write('\n' + 'Its HERE' + '\n')
				#outfile.write('ALT: ' + vep_alt + '\n')
				#outfile.write('vep_impact: ' + vep_impact + '\n')
			if vep_impact == 'MODERATE' or vep_impact == 'HIGH':
				# Search each tumor and germline bam file for the variant
				for g_bird, germline_bam in germline_bam_file.items():
					# Set all counting variables to zero
					g_mpu_bases = ''
					g_mpu_depth = 0
					g_VAC = 0
					g_VAF = 0
					# Put the command in a variable
					g_samtools_cmd = 'samtools mpileup -r ' + vep_chr+':'+vep_pos+'-'+vep_pos+' '+germline_bam
					# Use subprocess.Popen to ellicit shell commands 
					g_samtools_proc = subprocess.Popen([g_samtools_cmd], stdout=subprocess.PIPE, shell=True)
					# Use communicate to capture the output in a 'bytes' object
					(g_out, g_err) = g_samtools_proc.communicate()
					# Decode the 'bytes' object to a string
					g_mpu_out = g_out.decode("utf-8")
					g_mpu = g_mpu_out.rstrip()
					if g_bird[0:3] == vep_sample[0:3] and g_mpu != '':
						same_bird = vep_sample
						same_mpu = g_mpu
						same_mpu_chr = g_mpu.split('\t')[0]
						same_mpu_pos = g_mpu.split('\t')[1]
						same_mpu_ref = g_mpu.split('\t')[2]
						same_mpu_depth = int(g_mpu.split('\t')[3])
						if same_mpu_depth == 0:
							pass
						else:
							same_mpu_bases = g_mpu.split('\t')[4].upper()
							if len(vep_alt) > len(vep_ref):
								same_VAC = same_mpu_bases.count(vep_ins_samtools_str)
							elif len(vep_alt) < len(vep_ref):
								same_VAC = same_mpu_bases.count(vep_del_samtools_str)
							same_VAF = same_VAC/same_mpu_depth
							#print('REF: ' + vep_ref + '\n')
							#print('ALT: ' + vep_alt + '\n')
							#if len(vep_alt) > len(vep_ref):
								#print('INSERTION: ' + vep_ins_samtools_str + '\n')
							#elif len(vep_alt) < len(vep_ref):
								#print('DELETION: ' + vep_del_samtools_str + '\n')
							#print('SAMTOOL OUTPUT: ' + g_mpu + '\n')
							#print('VAC: ' + str(same_VAC) + '\n')
							#print('VAF: ' + str(same_VAF) + '\n')
							if same_VAF >= 0.05 and same_mpu_depth >= 4:
								g_sample_var_count = g_sample_var_count + 1
								same_germline_status = 'yes'
								#print('SAME GERMLINE STATUS WORKS: ' + same_germline_status + '\n' + '\n')
							if same_mpu_depth >= 4:
								same_tumor_cov = "yes"
							else:
								same_tumor_cov = "no"
					elif g_mpu == '' or int(g_mpu.split('\t')[3]) == 0:
						pass
					else:
						g_mpu_chr = g_mpu.split('\t')[0]
						g_mpu_pos = g_mpu.split('\t')[1]
						g_mpu_ref = g_mpu.split('\t')[2]
						g_mpu_depth = int(g_mpu.split('\t')[3])
						#print(g_mpu)
						g_mpu_bases = g_mpu.split('\t')[4].upper()
						if len(vep_alt) > len(vep_ref):
							g_VAC = g_mpu_bases.count(vep_ins_samtools_str)
						elif len(vep_alt) < len(vep_ref):
							g_VAC = g_mpu_bases.count(vep_del_samtools_str)
						g_VAF = g_VAC/g_mpu_depth
						# Add to counter for each germline file with variant at sufficient VAF
						if g_VAF >= 0.10:
							g_sample_var_count = g_sample_var_count + 1
				# Search input tumor bam for each somatic called variant
				for t_bird, tumor_bam in tumor_bam_file.items():
					t_samtools_cmd = 'samtools mpileup -r ' + vep_chr+':'+vep_pos+'-'+vep_pos+' '+tumor_bam
					t_samtools_proc = subprocess.Popen([t_samtools_cmd], stdout=subprocess.PIPE, shell=True)
					(t_out, t_err) = t_samtools_proc.communicate()
					t_mpu_out = t_out.decode("utf-8")
					t_mpu = t_mpu_out.rstrip()
					if t_bird == vep_sample and t_mpu != '':
						gleich_bird = vep_sample
						gleich_mpu = t_mpu
						gleich_mpu_chr = t_mpu.split('\t')[0]
						gleich_mpu_pos = t_mpu.split('\t')[1]
						gleich_mpu_ref = t_mpu.split('\t')[2]
						gleich_mpu_depth = int(t_mpu.split('\t')[3])
						if gleich_mpu_depth == 0:
							pass
						else:
							gleich_mpu_bases = t_mpu.split('\t')[4].upper()
							if len(vep_alt) > len(vep_ref):
								gleich_VAC = gleich_mpu_bases.count(vep_ins_samtools_str)
							elif len(vep_alt) < len(vep_ref):
								gleich_VAC = gleich_mpu_bases.count(vep_del_samtools_str)
							#gleich_VAC = gleich_mpu_bases.count(vep_alt)
							gleich_VAF = gleich_VAC/gleich_mpu_depth
							if gleich_VAF >= 0.05 and gleich_mpu_depth >= 4:
								t_sample_var_count = t_sample_var_count + 1
								gleich_tumor_status = 'yes'
								if tumor_samples != None:
									tumor_samples = tumor_samples + '|' + t_bird
								elif tumor_samples == None:
									tumor_samples = t_bird
								if tumor_VAC != None:
									tumor_VAC = tumor_VAC + '|' + str(gleich_VAC)
								elif tumor_VAC == None:
									tumor_VAC = str(gleich_VAC)
								if tumor_VAF != None:
									tumor_VAF = tumor_VAF + '|' + str(gleich_VAF)[0:5]
								elif tumor_VAF == None:
									tumor_VAF = str(gleich_VAF)[0:5]
							#print('Gleich Tumor STATUS WORKS: ' + gleich_tumor_status + '\n' + '\n')
							if gleich_mpu_depth >= 4:
								gleich_germline_cov = "yes"
							else:
								gleich_germline_cov = "no"
					elif t_mpu == '' or int(t_mpu.split('\t')[3]) == 0:
						pass
					#else:
						#t_mpu_chr = t_mpu.split('\t')[0]
						#print('vep_indel: ' + vep_indel)
						#print('Variant Call Sample: ' + vep_sample)
						#print('t_bird: ' + t_bird)
						#print('tumor_bam: ' + tumor_bam)
						#print('t_mpu: ' + t_mpu)
						#print('t_mpu_chr: ' + t_mpu_chr)
						#t_mpu_pos = t_mpu.split('\t')[1]
						#t_mpu_ref = t_mpu.split('\t')[2]
						#t_mpu_depth = int(t_mpu.split('\t')[3])
						#t_mpu_bases = t_mpu.split('\t')[4].upper()
						#if len(vep_alt) > len(vep_ref):
						#	t_VAC = t_mpu_bases.count(vep_ins_samtools_str)
						#elif len(vep_alt) < len(vep_ref):
						#	t_VAC = t_mpu_bases.count(vep_del_samtools_str)
						#t_VAC = t_mpu_bases.count(vep_alt)
						#t_VAF = t_VAC/t_mpu_depth
						#if t_VAF >= 0.05:
						#	t_sample_var_count = t_sample_var_count + 1
						#	if tumor_samples != None:
						#		tumor_samples = tumor_samples + '|' + t_bird
						#	elif tumor_samples == None:
						#		tumor_samples = t_bird
						#	if tumor_VAC != None:
						#		tumor_VAC = tumor_VAC + '|' + str(t_VAC)
						#	elif tumor_VAC == None:
						#		tumor_VAC = str(t_VAC)
						#	if tumor_VAF != None:
						#		tumor_VAF = tumor_VAF + '|' + str(t_VAF)[0:5]
						#	elif tumor_VAF == None:
						#		tumor_VAF = str(t_VAF)[0:5]
				if gleich_tumor_status == 'yes' and same_germline_status == 'no':
					tumor_in_germline_out = 'yes'
				else:
					tumor_in_germline_out = 'no'
				if vep_symbol == '':
					vep_symbol = 'NA'
				#if vep_pos == '80972149':
					#outfile.write('\n' + 'REF: ' + vep_ref + '\n')
					#outfile.write('ALT: ' + vep_alt + '\n')
					#if len(vep_alt) > len(vep_ref):
						#outfile.write('INSERTION: ' + vep_ins_samtools_str + '\n')
					#elif len(vep_alt) < len(vep_ref):
						#outfile.write('DELETION: ' + vep_del_samtools_str + '\n')
						#outfile.write('GERMLINE SAMTOOLS OUTPUT: ' + g_mpu + '\n')
						#outfile.write('TUMOR SAMTOOLS OUTPUT: ' + gleich_mpu + '\n')
						#outfile.write('Tumor_VAC: ' + str(tumor_VAC) + '\n')
						#outfile.write('t_VAC: ' + str(t_VAC) + '\n')
				# Perform final filters, if found at relevant freq in tumors and not found at slightly high freq in germline
				if t_sample_var_count > 0 and g_sample_var_count <= 0 and gleich_germline_cov == 'yes' and same_tumor_cov == 'yes' and tumor_in_germline_out == 'yes':
					outfile.write(vep_chr + '\t' + vep_pos + '\t' + vep_ref + '\t' + vep_alt + '\t' + vep_cons + '\t' + vep_impact + '\t' + vep_symbol + '\t' + vep_geneid + '\t' + str(t_sample_var_count) + '\t' + tumor_samples + '\t' + tumor_VAC + '\t' + tumor_VAF + '\n')

############################

# Create a file with all indels and associated stats
python ./scripts/combine_final_indels.py

# ./scripts/combine_final_indels.py
############################
import sys
import os
import re

# Output file
outfile = open("./results/somatics_indels_final.txt", 'w')

# Reference files
tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
germline_birds_file = "/home/users/a.steep/databases/samples/germline_sample_dnaseq_list_NNN-N_SN.txt"
#final_somatic_indel_files = '/home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/final_somatic_indel_files.txt'

# Write header to outfile
outfile.write('#CHROM' + '\t' + 'POS' + '\t' + 'REF' + '\t' + 'ALT' + '\t' + 'MUT' + '\t' + 'IMPACT' + '\t' + 'SYMBOL' + '\t' + 'GENE_ID' + '\t' + 'TSN' + '\t' + 'SAMPLE' + '\t' + 'VAC' + '\t' + 'VAF' + '\n')

# Iterate over samples labels (birds) and create dictionary
final_indel_file = {}
for bird in open(tumor_birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	final_indel_file[bird] = "./data/all_nonsyn_indels_" + bird + "_final.txt"

# Define empty variables
#final_output = None

other_file_list = ['./data/all_nonsyn_indels_738-1_S1_final.txt',
'./data/all_nonsyn_indels_741-1_S2_final.txt',
'./data/all_nonsyn_indels_756-3_S3_final.txt',
'./data/all_nonsyn_indels_766-1_S4_final.txt',
'./data/all_nonsyn_indels_777-3_S14_final.txt',
'./data/all_nonsyn_indels_787-2_S15_final.txt',
'./data/all_nonsyn_indels_788-1_S16_final.txt',
'./data/all_nonsyn_indels_794-1_S17_final.txt',
'./data/all_nonsyn_indels_798-1_S5_final.txt',
'./data/all_nonsyn_indels_833-1_S6_final.txt',
'./data/all_nonsyn_indels_834-2_2_S12_final.txt',
'./data/all_nonsyn_indels_834-2_S7_final.txt',
'./data/all_nonsyn_indels_835-1_S18_final.txt',
'./data/all_nonsyn_indels_841-3_S19_final.txt',
'./data/all_nonsyn_indels_842-2_2_S25_final.txt',
'./data/all_nonsyn_indels_842-2_S20_final.txt',
'./data/all_nonsyn_indels_855-1_S8_final.txt',
'./data/all_nonsyn_indels_863-1_S9_final.txt',
'./data/all_nonsyn_indels_884-2_S21_final.txt',
'./data/all_nonsyn_indels_901-2_2_S26_final.txt',
'./data/all_nonsyn_indels_901-2_S22_final.txt',
'./data/all_nonsyn_indels_906-1_S23_final.txt',
'./data/all_nonsyn_indels_911-1_2_S13_final.txt',
'./data/all_nonsyn_indels_911-1_S24_final.txt',
'./data/all_nonsyn_indels_918-3_S10_final.txt',
'./data/all_nonsyn_indels_927-2_S11_final.txt']

# Grab unique values and combine variable
# Start going through all the samples one by one
for bird in open(tumor_birds_file):
	bird = bird.rstrip()
	# For each line in final SNVs file
	for indel_line in open(final_indel_file[bird]):
		indel_line = indel_line.rstrip()
		if indel_line[0] != '#':
			indel_col = indel_line.split('\t')
			indel_chr = indel_col[0]
			final_chr = indel_chr
			indel_pos = indel_col[1]
			final_pos = indel_pos
			indel_ref = indel_col[2]
			final_ref = indel_ref
			indel_alt = indel_col[3]
			final_alt = indel_alt
			indel_mut = indel_col[4]
			final_mut = indel_mut
			indel_impact = indel_col[5]
			final_impact = indel_impact
			indel_symbol = indel_col[6]
			final_symbol = indel_symbol
			indel_geneid = indel_col[7]
			final_geneid = indel_geneid
			indel_tsn = int(indel_col[8])
			final_tsn = indel_tsn
			indel_sample = indel_col[9]
			final_sample = indel_sample
			indel_vac = indel_col[10]
			final_vac = indel_vac
			indel_vaf = indel_col[11]
			final_vaf = indel_vaf
			#final_output = None
			#print(final_tsn)
			for n in range(26):
				for other_line in open(other_file_list[n]):
					other_line = other_line.rstrip()
					#print('other_line: ' + other_line)
					if other_line[0] != '#':
						other_col = other_line.split('\t')
						other_chr = other_col[0]
						other_pos = other_col[1]
						other_ref = other_col[2]
						other_alt = other_col[3]
						other_mut = other_col[4]
						other_impact = other_col[5]
						other_symbol = other_col[6]
						other_geneid = other_col[7]
						other_tsn = int(other_col[8])
						other_sample = other_col[9]
						other_vac = other_col[10]
						other_vaf = other_col[11]
						if indel_chr == other_chr and indel_pos == other_pos and indel_alt == other_alt and indel_sample != other_sample:
							final_output = 'Won'
							#final_chr = indel_chr
							#final_pos = indel_pos
							#final_ref = indel_ref
							#final_alt = indel_alt
							#final_mut = indel_mut
							#final_impact = indel_impact
							#final_symbol = indel_symbol
							#final_geneid = indel_geneid
							final_tsn = final_tsn + other_tsn
							final_sample = final_sample + '|' + other_sample 
							final_vac = final_vac + '|' + other_vac
							final_vaf = final_vaf + '|' + other_vaf
			#if final_output != None:
			outfile.write(final_chr + '\t' + final_pos + '\t' + final_ref + '\t' + final_alt + '\t' + final_mut + '\t' + final_impact + '\t' + final_symbol + '\t' + final_geneid + '\t' + str(final_tsn) + '\t' + final_sample + '\t' + final_vac + '\t' + final_vaf + '\n')

############################

# Rename the output file
mv ./results/somatics_indels_final.txt ./results/somatics_indels_final_int.txt

# Sort the files and grab unique line (some lines are redendent comparisons)
(grep "^#" ./results/somatics_indels_final_int.txt; \
grep -v "^#" ./results/somatics_indels_final_int.txt | \
awk -F"\t" '!seen[$1, $2, $3, $4, $5, $6, $7, $8, $9]++' | \
sort -k9,9n) > ./results/somatic_indels_final.txt

# Create a VEP annotated vcf file from filtered calls
# indels
python ./scripts/filtered_somatic_indel_calls_vcf_format.py \
./results/somatic_indels_final.txt \
./results/somatic_indels_final_vep.vcf

# ./scripts/filtered_somatic_indel_calls_vcf_format.py
#############################
import sys
import os
import re

# Input file
infile = sys.argv[1]

# Output file
outfile = open(sys.argv[2], 'w')


# Reference files
birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
header_file = "./data/somaticseq_vcf/738-1_S1_somaticseq_indel_vep.vcf"

# Create an array of vcf files
vcf_file = {}
# Iterate over samples labels (birds) and create array
for bird in open(birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_indel_vep.vcf"

# Create a header for the vep vcf file
# Note: I checked all headers from tumor vcf files, they are all the same, can choose one arbitrarily
for header_line in open(header_file):
	if header_line[0] == '#':
		outfile.write(header_line)

# Start at each line in the final filtered variants file and pull appropriate calls from annotated vcf file
for in_line in open(infile):
	if in_line[0] != '#':
		in_line = in_line.rstrip()
		in_cols = in_line.split('\t')
		in_chr = in_cols[0]
		in_pos = in_cols[1]
		in_ref = in_cols[2]
		in_alt = in_cols[3]
		in_indel = in_chr + in_pos + in_ref + in_alt
		in_sample = in_cols[9]
		in_sample_num = in_sample.count('|') + 1
		#print('\n' + in_line)
		#print(in_sample)
		#print(in_sample_num)
		# Note: Range treats numbers as zero-based
		sample = []
		for n in range(in_sample_num):
			print(n)
			print(in_sample)
			print(in_sample.split('|')[n])
			sample.append(n)
			sample[n] = in_sample.split('|')[n]
			print('sample[' + str(n) + ']: ' + sample[n])
			vcf_file2read = vcf_file[sample[n]]
			#print(vcf_file2read)
			for vcf_line in open(vcf_file2read):
				#vcf_line = vcf_line.rstrip()
				if vcf_line[0] != '#': 
					vcf_cols = vcf_line.split('\t')
					vcf_chr = vcf_cols[0]
					vcf_pos = vcf_cols[1]
					vcf_ref = vcf_cols[3]
					vcf_alt = vcf_cols[4]
					vcf_indel = vcf_chr + vcf_pos + vcf_ref + vcf_alt
					if in_indel == vcf_indel:
						outfile.write(vcf_line)


outfile.close()

#############################

# Combine final somatic snvs and indels
(grep "^#" ./results/somatic_snvs_final.txt; \
(grep -v "^#" ./results/somatic_snvs_final.txt; \
grep -v "^#" ./results/somatic_indels_final.txt) | sort) > ./results/somatic_snvs_and_indels_final.txt

# Combine final somatic snvs and indels in vep format without header
(grep -v "^#" ./results/somatic_indels_final_vep.vcf; \
grep -v "^#" ./results/somatic_snvs_final_vep.vcf) | sort > ./results/somatic_snvs_indels_combined_vep_no_header.vcf

# Create a genvisr table for lolliplots
python ./scripts/create_lolliplots_table.py

# ./scripts/create_lolliplots_table.py
##############################
import sys
import os
import re

# General Strategy of script:
# Take the final somatic snvs and indels in vep annotation format and create a genvisr table for lolliplots

# Input somatic SNV file
#snv_infile = open(sys.argv[1], 'r')
# Input somatic indel file 
#indel_infile = open(sys.argv[2], 'r')

# Reference files
# final somatic SNVs and Indels
snvs_indels_sample_file = "./results/somatic_snvs_and_indels_final.txt"

# read the combined somatic snv and indel file
muts_file = "./results/somatic_snvs_indels_combined_vep_no_header.vcf"
# Output file
outfile = open("./results/somatic_snvs_indels_genvisr.int", 'w')

# Write header to outfile
# Note: I have to have certain headers which is really annoying
outfile.write('gene' + '\t' + 'amino_acid_change' + '\t' + 'transcript_name' + '\t' + 'protein_id' + '\t' + 'Impact' + '\t' + 'Sample' + '\n')

# Loop through the snv and indel final muts file and grab samples
for snv_indel_line in open(snvs_indels_sample_file):
	if snv_indel_line[0] != '#':
		snv_indel_line = snv_indel_line.rstrip()
		snv_indel_col = snv_indel_line.split('\t')
		snv_indel_chr = snv_indel_col[0]
		snv_indel_pos = snv_indel_col[1]
		snv_indel_ref = snv_indel_col[2]
		snv_indel_alt = snv_indel_col[3]
		snv_indel_symbol = snv_indel_col[6]
		snv_indel_gene_id = snv_indel_col[7]
		#print('file 1 line')
		snv_indel_mutation = snv_indel_chr + '\t' + snv_indel_pos + '\t' + snv_indel_ref + '\t' + snv_indel_alt
		snv_indel_samples = snv_indel_col[9]
		for muts_line in open(muts_file):
			if muts_line[0] != '#':
				#muts_line = muts_line.rstrip()
				#print(muts_line)
				muts_cols = muts_line.split('\t')
				muts_chr = muts_cols[0]
				muts_pos = muts_cols[1]
				muts_ref = muts_cols[3]
				muts_alt = muts_cols[4]
				#print('file 2 line')
				muts_mutation = muts_chr + '\t' + muts_pos + '\t' + muts_ref + '\t' + muts_alt
				#if snv_indel_chr == muts_chr:
					#print('connection')
				muts_info = muts_cols[7]
				muts_format = muts_cols[8]
				muts_normal = muts_cols[9]
				muts_tumor = muts_cols[10]
				#print(vep_snv)
				#print(vep_sample)
				if re.search('SOMATIC', muts_info.split(';')[0]):
					muts_somat = muts_info.split(';')[0]
				else:
					muts_somat = 'NA'
				if re.search('MVJSDU', muts_info.split(';')[0]):
					muts_tools = muts_info.split(';')[0]
				elif re.search('MVJSDU', muts_info.split(';')[1]):
					muts_tools = muts_info.split(';')[1]
				if re.search('NUM_TOOLS', muts_info.split(';')[1]):
					muts_tool_num = muts_info.split(';')[1]
				elif re.search('NUM_TOOLS', muts_info.split(';')[2]):
					muts_tool_num = muts_info.split(';')[2]
				if re.search('CSQ=', muts_info.split(';')[2]):
					muts_info_ann = muts_info.split(';')[2].split('SQ=')[1]
					muts_info_ann_num = muts_info_ann.count(',') + 1
					info_ann = []
				elif re.search('CSQ=', muts_info.split(';')[3]):
					muts_info_ann = muts_info.split(';')[3].split('SQ=')[1]
					muts_info_ann_num = muts_info_ann.count(',') + 1
					info_ann = []
				for n in range(muts_info_ann_num):
					info_ann.append(n)
					info_ann[n] = muts_info_ann.split(',')[n]
					info_ann2read = info_ann[n]
					info_cols = info_ann2read.split('|')
					muts_allele = info_cols[0]
					muts_cons = info_cols[1]
					muts_impact = info_cols[2]
					muts_symbol = info_cols[3]
					muts_geneid = info_cols[4]
					muts_feat_type = info_cols[5]
					muts_feature = info_cols[6]
					muts_biotype = info_cols[7]
					muts_exon = info_cols[8]
					muts_intron = info_cols[9]
					muts_HGVSc = info_cols[10]
					muts_HGVSp = info_cols[11]
					muts_cDNA_pos = info_cols[12]
					muts_CDS_pos = info_cols[13]
					muts_protein_pos = info_cols[14]
					muts_aminos = info_cols[15]
					muts_codons = info_cols[16]
					muts_existing_var = info_cols[17]
					muts_distance = info_cols[18]
					muts_strand = info_cols[19]
					muts_flags = info_cols[20]
					muts_symbol_source = info_cols[21]
					muts_HGNC_ID = info_cols[22]
					muts_tsl = info_cols[23]
					muts_appris = info_cols[24]
					muts_ccds = info_cols[25]
					muts_ensp = info_cols[26]
					muts_swissprot = info_cols[27]
					muts_trembl = info_cols[28]
					muts_uniparc = info_cols[29]
					muts_sift = info_cols[30]
					muts_domains = info_cols[31]
					muts_hgvs_offset = info_cols[32]
					if muts_symbol == '':
						muts_symbol = 'NA'
					if snv_indel_symbol == 'NA':
						output_symbol = snv_indel_gene_id
					else:
						output_symbol = snv_indel_symbol
					#print(muts_HGVSp)
					if muts_HGVSp == '':
						output_HGVSp = 'remove'
					else:
						half2_HGVSp = muts_HGVSp.split(':')[1]
						output_HGVSp = half2_HGVSp
						#p_HGVSp = half2_HGVSp[0:2]
						#AA1_HGVSp = half2_HGVSp.split('p.')[1][0:3]
						#if re.findall(r'3D', half2_HGVSp):
						#	last_part_HGVSp = half2_HGVSp[-3:]
						#	pos_HGVSp = re.findall(r'\d+', half2_HGVSp[:-3])
						#elif:
						#else:
						#	pos_HGVSp = re.findall(r'\d+', half2_HGVSp)
						#output_HGVSp = muts_HGVSp
					if muts_feature == '':
						output_feature = 'NA'
					else:
						output_feature = muts_feature
					if muts_ensp == '':
						output_ensp = 'NA'
					else:
						output_ensp = muts_ensp
					if muts_sift == '':
						output_sift = 'Not_App'
					else:
						output_sift = muts_sift
					output_samples = snv_indel_samples.replace('|', ', ')
					if snv_indel_mutation == muts_mutation:
						outfile.write(output_symbol + '\t' + output_HGVSp + '\t' + output_feature + '\t' + output_ensp + '\t' + output_sift + '\t' + output_samples + '\n')

#Close the output file
outfile.close()
print('La Fin')
##############################

# Sort output file, remove redundant lines, remove lines with no variant annotation by position in protein
(grep '^gene' ./results/somatic_snvs_indels_genvisr.int; \
grep -v '^gene' ./results/somatic_snvs_indels_genvisr.int | \
sort | uniq) | grep -v 'remove' > ./results/somatic_snvs_indels_genvisr.txt

# Rsync the file to macbook pro for use in R studio
rsync -avp a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_indels_genvisr.txt ./data/


# Create VEP annotated vcf files from filtered calls PER SAMPLE
# Somatic SNVs
python ./scripts/filtered_somatic_snv_calls_vep_format_per_sample.py \
./data/all_nonsyn_snvs_738-1_S1_final.txt \
./results/somatic_snvs_final_vep.vcf

# ./scripts/filtered_somatic_snv_calls_vep_format_per_sample.py
#############################
import sys
import os
import re

# Input file
infile = sys.argv[1]

# Output file
outfile = open(sys.argv[2], 'w')

# Reference files
birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
header_file = "./data/somaticseq_vcf/738-1_S1_somaticseq_snv_vep.vcf"

# Create an array of vcf files
vcf_file = {}
# Iterate over samples labels (birds) and create array
for bird in open(birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_snv_vep.vcf"

# Create a header for the vep vcf file
# Note: I checked all headers from tumor vcf files, they are all the same, can choose one arbitrarily
for header_line in open(header_file):
	if header_line[0] == '#':
		outfile.write(header_line)

# Start at each line in the final filtered variants file and pull appropriate calls from annotated vcf file
for in_line in open(infile):
	if in_line[0] != '#':
		in_line = in_line.rstrip()
		in_cols = in_line.split('\t')
		in_chr = in_cols[0]
		in_pos = in_cols[1]
		in_ref = in_cols[2]
		in_alt = in_cols[3]
		in_snv = in_chr + in_pos + in_ref + in_alt
		in_sample = in_cols[9]
		in_sample_num = in_sample.count('|') + 1
		#print('\n' + in_line)
		#print(in_sample)
		#print(in_sample_num)
		# Note: Range treats numbers as zero-based
		sample = []
		for n in range(in_sample_num):
			print(n)
			print(in_sample)
			print(in_sample.split('|')[n])
			sample.append(n)
			sample[n] = in_sample.split('|')[n]
			print('sample[' + str(n) + ']: ' + sample[n])
			vcf_file2read = vcf_file[sample[n]]
			#print(vcf_file2read)
			for vcf_line in open(vcf_file2read):
				#vcf_line = vcf_line.rstrip()
				if vcf_line[0] != '#': 
					vcf_cols = vcf_line.split('\t')
					vcf_chr = vcf_cols[0]
					vcf_pos = vcf_cols[1]
					vcf_ref = vcf_cols[3]
					vcf_alt = vcf_cols[4]
					vcf_snv = vcf_chr + vcf_pos + vcf_ref + vcf_alt
					if in_snv == vcf_snv:
						outfile.write(vcf_line)
#############################



# Index VCF files of hard filtered snps and indels
find ./data/hard_filtered_variants/ -name "*_hard_filtered_snps_lenient.vcf.gz" | \
xargs -i tabix -f -p vcf {}

find ./data/hard_filtered_variants/ -name "*_hard_filtered_indels_lenient.vcf.gz" | \
xargs -i tabix -f -p vcf {}

# Perform phasing of somatic SNVS and INDELS with GATK ReadBackedPhasing
# https://software.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_phasing_ReadBackedPhasing.php
qsub ./scripts/read_backed_phasing_somatic_snvs.sh \
./results/somatic_indels_final_vep.vcf

# ./scripts/read_backed_phasing_somatic_snvs.sh
################################

cd /home/proj/MDW_genomics/steepale/mutated_gene_annotation

java -Xmx20g -jar /home/users/a.steep/Apps/GenomeAnalysisTK.jar \
-T ReadBackedPhasing \
-R /home/proj/MDW_genomics/steepale/galgal5/galgal5.fa \
-I ./data/bams/${Var}_Bwa_RG_dedupped_realigned.bam \
--variant ./data/hard_filtered_variants/${Var}_hard_filtered_snps_lenient.vcf.gz \
-L ./data/hard_filtered_variants/${Var}_hard_filtered_snps_lenient.vcf.gz \
-o ./data/hard_filtered_variants/${Var}_hard_filtered_snps_lenient_phased.vcf.gz \
--phaseQualityThresh 20.0

qstat -f ${PBS_JOBID}

###############################

find ./data/hard_filtered_variants/ -name "*_hard_filtered_indels_lenient.vcf.gz" | \
xargs -i basename {} | \
sed 's/_hard_filtered_indels_lenient.vcf.gz//' | \
sort | uniq | \
xargs -i echo 'qsub ./scripts/read_backed_phasing_indels.sh -v Var='{} |sh

# ./scripts/read_backed_phasing_indels.sh
################################
#!/bin/bash -login
#PBS -l nodes=1:ppn=1,walltime=04:00:00:00,mem=20gb
#PBS -j oe
set -e
set -u
set -o pipefail

module load GATK/3.5.0

cd /mnt/research/ADOL/OutsideCollaborations/20160201_Cheng_Steep_Xu_Zhang/germline_snps_indels

java -Xmx20g -cp $GATK -jar $GATK/GenomeAnalysisTK.jar \
-T ReadBackedPhasing \
-R ./data/ref/galgal5.fa \
-I ./data/bams/${Var}_Bwa_RG_dedupped_realigned.bam \
--variant ./data/hard_filtered_variants/${Var}_hard_filtered_indels_lenient.vcf.gz \
-L ./data/hard_filtered_variants/${Var}_hard_filtered_indels_lenient.vcf.gz \
-o ./data/hard_filtered_variants/${Var}_hard_filtered_indels_lenient_phased.vcf.gz \
--phaseQualityThresh 20.0

qstat -f ${PBS_JOBID}

###############################


python ./scripts/final_reports_pdf.py \
./results/somatic_snvs_and_indels_final.txt

# ./scripts/final_reports_pdf.py
#############################
import sys
import re
import os
import subprocess
import numpy
# Modules for PDF production
from reportlab.lib.enums import TA_JUSTIFY
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

# Input file
infile = sys.argv[1]

# Reference files:
###DONT_DELETE###chick_gene_file = "/home/users/a.steep/databases/ensembl/galgal5_ensembl_gene_transcript_protein.tsv"
SOMATIC_TEMP_chick_gene_file = "/home/users/a.steep/databases/ensembl/galgal5_ensembl_gene_transcript_protein_SOMATIC_TEMP.tsv"
###DONT_DELETE###ortholog_file = "/home/users/a.steep/databases/ensembl/chicken-human_orthologs.txt"
SOMATIC_TEMP_ortholog_file = "/home/users/a.steep/databases/ensembl/chicken-human_orthologs_SOMATIC_TEMP.txt"
###DONT_DELETE###ncbi2ensembl_file = "/home/users/a.steep/databases/ncbi/gene2ensembl"
SOMATIC_TEMP_ncbi2ensembl_file = "/home/users/a.steep/databases/ncbi/gene2ensembl_SOMATIC_TEMP.txt"
gene2refseq_file = "/home/users/a.steep/databases/ncbi/refseq/gene_RefSeqGene"
SOMATIC_TEMP_gene2refseq_file = open("/home/users/a.steep/databases/ncbi/refseq/gene_RefSeqGene_SOMATIC_TEMP.txt", 'w')
cosmic_cgc_file = "/home/users/a.steep/databases/cosmic/cosmic_CGC_gene_list.txt"
omin_file = "/home/users/a.steep/databases/omin/genemap2.txt"
sosnv_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_final.txt"
soindel_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_indels_final.txt"
ss_vep_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_final_vep.vcf"
si_vep_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_indels_final_vep.vcf"
birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"
so_snv_and_indel_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_and_indels_final.txt"
somatic_lolliplots_dir = "/home/proj/MDW_genomics/steepale/GenVisR/analysis/plots/somatic_variants/"

refseq_files = [
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.1.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.2.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.3.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.4.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.5.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.6.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.7.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.8.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.9.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.10.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.11.genomic.gbff"]

# Conditional variables
step1 = False
step2 = False

# Create empty dictionaries
ann_dict = {}
chick_gene_id2chick_gene_name = {}
chick_gene_id2chick_entrez_gene_id = {}
chick_gene_id2human_gene_id = {}
chick_gene_id2human_entrez_gene_id = {}
chick_gene_id2human_refseq_id = {}
chick_gene_id2human_refseq = {}
chick_gene_id2somatic_snv2vep = {}
chick_gene_id2somatic_indel2vep = {}

# Create a dictionary of vcf files
vcf_file = {}
vcf_file_indel = {}
# Iterate over samples labels (birds) and create dictionary of somatic snv vep files
# Iterate over samples labels (birds) and create dictionary of somatic snv vep files
for bird in open(birds_file):
    bird = bird.rstrip()
    #vcf_file.append(bird)
    vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_snv_vep.vcf"
    vcf_file_indel[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_indel_vep.vcf"

# Empty variables
chick_gene_id = ''

# Output file path:
outfile_path = './results/mutated_gene_summaries/'

# Create a unique set of somatically mutated gene ids (ensembl) from infile
set_ens_gene_id = set()
# Iterate through lines of the infile
for in_line in open(infile):
    if in_line[0] != '#':
        in_cols = in_line.split('\t')
        in_ens_gene_id = in_cols[7]
        set_ens_gene_id.add(in_ens_gene_id)

# Build the appropriate dictionaries based on the input file
#for in_line in open(infile):
#    if in_line[0] != '#':
#        in_line = in_line.rstrip()
#        in_cols = in_line.split('\t')
#        in_gene_symbol = in_cols[6]
#        in_ensembl_gene_id = in_cols[7]
#        in_entrez_gene_id = in_cols[8]
#        print(len(ann_dict))
#        print(in_gene_symbol + '\t' + in_ensembl_gene_id)

# Iterate through the set of ensemble gene ids from input file
for chick_gene_id in set_ens_gene_id:
    print('dic1 ' + chick_gene_id)
    # Start building the annotation dictionaries for annotation purposes
    # Obtain chick central dogma of bio info
    for line in open(SOMATIC_TEMP_chick_gene_file):
        # Start on the correct line
        if line.split('\t')[0] != 'Gene_ID' and chick_gene_id == line.split('\t')[0]:
            line = line.rstrip()
            chick_gene_id = line.split('\t')[0]
            chick_transcript_id = line.split('\t')[1]
            chick_pro_id = line.split('\t')[2]
            chick_gene_name = line.split('\t')[3]
            chick_transcript_count = line.split('\t')[4]
            chick_gene_id2chick_gene_name[chick_gene_id] = chick_gene_name

# Save the generated dictionary
#numpy.save('./data/dictionaries/chick_gene_id2chick_gene_name.npy', chick_gene_id2chick_gene_name)
# Load the generated dictionary
#chick_gene_id2chick_gene_name = numpy.load('./data/dictionaries/chick_gene_id2chick_gene_name.npy').item()
#print(chick_gene_id2chick_gene_name)

# Iterate through the set of ensemble gene ids from input file
for chick_gene_id in set_ens_gene_id:
    print('dic2 ' + chick_gene_id)
    # Obtain ensembl ortholog gene name and ID
    for orth_line in open(SOMATIC_TEMP_ortholog_file):
        if orth_line.split('\t')[1] == chick_gene_id and orth_line.split('\t')[4].split('\n')[0] == "ortholog_one2one":
            human_gene_id = orth_line.split('\t')[3]
            human_gene_name = orth_line.split('\t')[2]
            # Create an empty dictionary with key value as ensembl gene id
            chick_gene_id2human_gene_id[chick_gene_id] = human_gene_id

for chick_gene_id in set_ens_gene_id:
    print('dic3 ' + chick_gene_id)
    # Obtain Entrez ID
    for ncbi2ensembl_line in open(SOMATIC_TEMP_ncbi2ensembl_file):
        ncbi2ensembl_line = ncbi2ensembl_line.rstrip()
        if ncbi2ensembl_line.split('\t')[2] == chick_gene_id:
            chick_entrez_gene_id = ncbi2ensembl_line.split('\t')[1]
            chick_gene_id2chick_entrez_gene_id[chick_gene_id] = chick_entrez_gene_id
            #print(chick_gene_id2chick_entrez_gene_id)
        if chick_gene_id in chick_gene_id2human_gene_id.keys():
            if ncbi2ensembl_line.split('\t')[2] == str(chick_gene_id2human_gene_id[chick_gene_id]):
                human_entrez_gene_id = ncbi2ensembl_line.split('\t')[1]
                chick_gene_id2human_entrez_gene_id[chick_gene_id] = human_entrez_gene_id
                #print(chick_gene_id2chick_entrez_gene_id)

# Load the generated dictionary
chick_gene_id2human_refseq = numpy.load('./data/dictionaries/chick_gene_id2human_refseq_2.npy').item()

# Iterate through the set of ensemble gene ids from input file
#for chick_gene_id in set_ens_gene_id:
#    print('refseq ' + chick_gene_id)
#    if chick_gene_id in chick_gene_id2chick_gene_name.keys():
#        print(chick_gene_id2chick_gene_name[chick_gene_id])
#    # Obtain human refseq info
#    for gene2refseq_line in open(gene2refseq_file):
#        gene2refseq_line = gene2refseq_line.rstrip()
#        # Good spot for empty variables so script doesn't hang
#        refseq1 = ''
#        refseq2 = ''
#        refseq3 = ''
#        refseq4 = ''
#        human_refseq = ''
#        if chick_gene_id in chick_gene_id2human_entrez_gene_id.keys():
#            if gene2refseq_line.split('\t')[1] == chick_gene_id2human_entrez_gene_id[chick_gene_id]:
#                human_refseq_id = gene2refseq_line.split('\t')[3]
#                chick_gene_id2human_refseq_id[chick_gene_id] = human_refseq_id
#                # Start building output value for dictionary
#                # Obtain a summary of the gene in refseq
#                ref_seq_cmd = "zgrep -w " + chick_gene_id2human_refseq_id[chick_gene_id] + " " + "/home/users/a.steep/databases/ncbi/refseq/refseqgene.*.genomic.gbff.gz" + " | cut -d':' -f1 | sort | uniq | sed 's/.gz//'"
#                #refseq_file = os.system(ref_seq_cmd)
#                proc = subprocess.Popen([ref_seq_cmd], stdout=subprocess.PIPE, shell=True) 
#                (out, err) = proc.communicate()
#                out = str(out)
#                refseq_file = out.replace("b'", "")[:-3]
#                print(refseq_file)
#                with open(refseq_file) as regseq_file_mem:
#                    while True:
#                        refseq_lines = regseq_file_mem.readlines(22000000)
#                        if not refseq_lines:
#                            break
#                        for refseq_line in refseq_lines:
#                            refseq_line = refseq_line.rstrip()
#                            if re.search("^LOCUS", refseq_line) and re.search(human_refseq_id.split('.')[0], refseq_line):
#                                step1 = True
#                            elif re.search("^PRIMARY", refseq_line):
#                                step1 = False
#                            elif step1:
#                                if re.search("DEFINITION", refseq_line):
#                                    refseq1 = refseq_line + '\n'
#                                elif re.search("SOURCE", refseq_line):
#                                    refseq2 = refseq_line + '\n' + '\n'
#                                elif re.search("Summary:", refseq_line):
#                                    refseq3 = refseq_line
#                                    step2 = True
#                                elif re.search("PRIMARY", refseq_line):
#                                    step2 = False
#                                elif step2:
#                                    refseq4 = refseq4 + refseq_line
#                                else:
#                                    step2 = False
#                human_refseq = refseq1 + refseq2 + refseq3 + refseq4.replace('   ', '')
#                if human_refseq != '':
#                    #ann_dict[chick_gene_id] = {chick_gene_name: {human_gene_id: {human_entrez_gene_id: {human_refseq_id: human_refseq}}}}
#                    chick_gene_id2human_refseq[chick_gene_id] = human_refseq
#                    print(chick_gene_id2human_refseq[chick_gene_id])
#                # Save the generated dictionary
#                #numpy.save('./data/dictionaries/chick_gene_id2human_refseq_3.npy', chick_gene_id2human_refseq)
#                # Load the generated dictionary
#               chick_gene_id2human_refseq = numpy.load('./data/dictionaries/chick_gene_id2human_refseq_2.npy').item()
                

# Start building the output file
# Story line for PDF output
Story=[]

# Loop though dictionary values and grab all relevant chick ensembl gene ids
# Get other chick and othrologue human gene identifiers
for chick_gene_id in set_ens_gene_id:
    if chick_gene_id in chick_gene_id2chick_gene_name.keys():
        chick_gene_name = str(chick_gene_id2chick_gene_name[chick_gene_id])
    else:
        chick_gene_name = ''
    print(chick_gene_id)
    print(chick_gene_name)
    if chick_gene_id in chick_gene_id2chick_entrez_gene_id.keys():
        chick_entrez_gene_id = str(chick_gene_id2chick_entrez_gene_id[chick_gene_id])
    else:
        chick_entrez_gene_id = ''
    if chick_gene_id in chick_gene_id2human_gene_id.keys():
        human_ensembl_gene_id = str(chick_gene_id2human_gene_id[chick_gene_id])
    else:
        human_ensembl_gene_id = ''
    if chick_gene_id in chick_gene_id2human_entrez_gene_id.keys():
        human_entrez_gene_id = str(chick_gene_id2human_entrez_gene_id[chick_gene_id])
    else:
        human_entrez_gene_id = ''
    # If there is no chick gene name associated with chick ensemble ID, use ensemble ID in output file

    if len(chick_gene_id2chick_gene_name[chick_gene_id]) > 0:
        #outfile = open(outfile_path + str(chick_gene_id2chick_gene_name[chick_gene_id]) + '_annotations.txt', 'w')
        outfile = SimpleDocTemplate(outfile_path + str(chick_gene_id2chick_gene_name[chick_gene_id]) + "_annotations.pdf",pagesize=letter,
                        rightMargin=40,leftMargin=40,
                        topMargin=40,bottomMargin=18)
    # If there is a chick gene symbol associated with chicken gene symbol, use gene symbol in output file name
    elif len(chick_gene_id2chick_gene_name[chick_gene_id]) == 0:
        #outfile = open(outfile_path + chick_gene_id + '_annotations.txt', 'w')
        outfile = SimpleDocTemplate(outfile_path + chick_gene_id + "_annotations.pdf",pagesize=letter,
                        rightMargin=40,leftMargin=40,
                        topMargin=40,bottomMargin=18)
    # Generate a style format (from imported module) for the output PDF
    styles=getSampleStyleSheet()
    # Further adjust the style guide
    styles.add(ParagraphStyle(name='Justify', alignment=TA_JUSTIFY))

    # Capture Ensembl chick gene ID for output
    out_chick_ensembl_gene_id = 'Ensembl Chicken Gene ID: ' + chick_gene_id
    # Create the font size and add appropriate value in output
    pdf_text = '<font size=8>%s</font>' % out_chick_ensembl_gene_id 
    # Append value to storyline of PDF to be created
    Story.append(Paragraph(pdf_text, styles["Normal"]))

    # Capture Ensembl chick gene symbol for output
    if len(chick_gene_id2chick_gene_name[chick_gene_id]) > 0:
        out_ens_chick_gene_symbol = 'Ensembl Chicken Gene Name: ' + chick_gene_id2chick_gene_name[chick_gene_id]

        pdf_text = '<font size=8>%s</font>' % out_ens_chick_gene_symbol
        Story.append(Paragraph(pdf_text, styles["Normal"]))
        # Create a spacer line in PDF
        Story.append(Spacer(1, 12))

    # Capture human refseq gene summary for output
    if chick_gene_id in chick_gene_id2human_refseq.keys():
        # RefSeq title
        pdf_text = '<font size=8>RefSeq Human Ortholog Summary:</font>'
        Story.append(Paragraph(pdf_text, styles["Normal"]))

        out_refseq_human_gene = chick_gene_id2human_refseq[chick_gene_id]
        pdf_text = '<font size=8>%s</font>' % out_refseq_human_gene
        Story.append(Paragraph(pdf_text, styles["Normal"]))
        Story.append(Spacer(1, 12))
    
    # Grab COSMIC CGC annotation:
    # for chick_gene_id, values in ann_dict.items():
    #chick_gene_id = str(chick_gene_id) 
    #human_entrez_gene_id = str(chick_gene_id2human_entrez_gene_id[chick_gene_id])
    # Loop through COMSIC file
    for cgc_line in open(cosmic_cgc_file):
        cgc_line = cgc_line.rstrip()
        # If human entrez gene id from orthologue matches, then capture CGC info
        if cgc_line.split('\t')[2] == human_entrez_gene_id:
            cgc_cols = cgc_line.split('\t')
            cgc_symbol = cgc_cols[0]
            cgc_synonyms = cgc_cols[17]
            cgc_gene_name = cgc_cols[1]
            cgc_somatic = cgc_cols[5]
            cgc_germline = cgc_cols[6]
            cgc_som_types = cgc_cols[7]
            cgc_germ_types = cgc_cols[8]
            cgc_cancer_syndrome = cgc_cols[9]
            cgc_tissue = cgc_cols[10]
            cgc_genetics = cgc_cols[11]
            cgc_role = cgc_cols[12]
            cgc_mut_types = cgc_cols[13]
            cgc_trans_part = cgc_cols[14]
            cgc_other_germ = cgc_cols[15]
            cgc_other_syn = cgc_cols[16]
            # Output the CGC info:
            # CGC Title
            pdf_text = '<font size=8>COSMIC Cancer Gene Consensus:</font>' 
            Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Gene Symbol
            pdf_text = '<font size=8>%s</font>' % cgc_symbol
            Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Gene Name
            pdf_text = '<font size=8>%s</font>' % cgc_gene_name
            Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Gene Symbol Synonyms
            out_cgc_synonyms = 'Synonyms: ' + cgc_synonyms
            pdf_text = '<font size=8>%s</font>' % out_cgc_synonyms
            Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Cancer Types
            if cgc_somatic == 'yes':
                out_cgc_som_types = 'Cancers Associated with Somatic Mutations: ' + cgc_som_types
                pdf_text = '<font size=8>%s</font>' % out_cgc_som_types
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Germline Mutation Types
            if cgc_germline == 'yes':
                out_cgc_germ_types = 'GCancers Associated with Germline Mutations: ' + cgc_germ_types
                pdf_text = '<font size=8>%s</font>' % out_cgc_germ_types
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Known Cancer Syndromes
            if cgc_cancer_syndrome != '':
                out_cgc_germline = 'Known Cancer Syndromes: ' + cgc_germline
                pdf_text = '<font size=8>%s</font>' % out_cgc_germline
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Tissue Types
            if cgc_tissue != '':
                out_cgc_tissue = 'Tissue Types: ' + cgc_tissue
                pdf_text = '<font size=8>%s</font>' % out_cgc_tissue
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Role of Mutated Gene in Cancer
            if cgc_role != '':
                out_cgc_role = 'Role of Mutated Gene in Cancer: ' + cgc_role
                pdf_text = '<font size=8>%s</font>' % out_cgc_role
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Molecular Genetics
            if cgc_genetics != '':
                out_cgc_genetics = 'Molecular Genetics: ' + cgc_genetics
                pdf_text = '<font size=8>%s</font>' % out_cgc_genetics
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Mutation Types
            if cgc_mut_types != '':
                out_cgc_mut_types = 'Mutation Types: ' + cgc_mut_types
                pdf_text = '<font size=8>%s</font>' % out_cgc_mut_types
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Other Germline Mutations
            if cgc_other_germ == 'yes':
                out_cgc_other_germ = 'Other Germline Mutations: ' + cgc_other_germ
                pdf_text = '<font size=8>%s</font>' % out_cgc_other_germ
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # CGC Other Syndrome
            if cgc_other_syn != '':
                out_cgc_other_syn = 'Other Syndrome: ' + cgc_other_syn
                pdf_text = '<font size=8>%s</font>' % out_cgc_other_syn
                Story.append(Paragraph(pdf_text, styles["Normal"]))
            # Spacer
            Story.append(Spacer(1, 12))
    
    # Grab OMIN annotation:
    # for chick_gene_id, values in ann_dict.items():
    #chick_gene_id = str(chick_gene_id)
    # Lopp through OMIM File
    for omin_line in open(omin_file):
        if omin_line[0] != '#':
            omin_line = omin_line.rstrip()
            # If the orthologus human entrez or ensembl gene ID matches gene, collect OMIM variables
            if human_ensembl_gene_id != '' and re.search(human_ensembl_gene_id, omin_line):
                omin_cols = omin_line.split('\t')
                try:
                    omin_symbol = omin_cols[8]
                except IndexError:
                    omin_symbol = 'NA'
                try:
                    omin_com = omin_cols[11]
                except IndexError:
                    omin_com = 'NA'
                try:
                    omin_pheno = omin_cols[12]
                except IndexError:
                    omin_pheno = 'NA'
                #Output the OMIM info:
                # OMIM Title
                pdf_text = '<font size=8>Online Mendelian Inheritance in Man (OMIM):</font>' 
                Story.append(Paragraph(pdf_text, styles["Normal"]))
                # OMIM Gene Symbol
                pdf_text = '<font size=8>%s</font>' % omin_symbol
                Story.append(Paragraph(pdf_text, styles["Normal"]))
                # OMIM General Comments
                if omin_com != '':
                    out_omin_com = 'General Comments: ' + omin_com
                    pdf_text = '<font size=8>%s</font>' % out_omin_com
                    Story.append(Paragraph(pdf_text, styles["Normal"]))
                # OMIM Mutation Associated Phenotypes
                if omin_pheno != '':
                    out_omin_pheno = 'Phenotypes Associated with Mutated Gene: ' + omin_pheno
                    pdf_text = '<font size=8>%s</font>' % out_omin_pheno
                    Story.append(Paragraph(pdf_text, styles["Normal"]))
                # Spacer
                Story.append(Spacer(1, 12))
            elif human_entrez_gene_id != '' and re.search('\t'+human_entrez_gene_id+'\t', omin_line):
                omin_cols = omin_line.split('\t')
                try:
                    omin_symbol = omin_cols[8]
                except IndexError:
                    omin_symbol = 'NA'
                try:
                    omin_com = omin_cols[11]
                except IndexError:
                    omin_com = 'NA'
                try:
                    omin_pheno = omin_cols[12]
                except IndexError:
                    omin_pheno = 'NA'
                #Output the OMIM info:
                # OMIM Title
                pdf_text = '<font size=8>Online Mendelian Inheritance in Man (OMIM):</font>' 
                Story.append(Paragraph(pdf_text, styles["Normal"]))
                # OMIM Gene Symbol
                pdf_text = '<font size=8>%s</font>' % omin_symbol
                Story.append(Paragraph(pdf_text, styles["Normal"]))
                # OMIM General Comments
                if omin_com != '':
                    out_omin_com = 'General Comments: ' + omin_com
                    pdf_text = '<font size=8>%s</font>' % out_omin_com
                    Story.append(Paragraph(pdf_text, styles["Normal"]))
                # OMIM Mutation Associated Phenotypes
                if omin_pheno != '':
                    out_omin_pheno = 'Phenotypes Associated with Mutated Gene: ' + omin_pheno
                    pdf_text = '<font size=8>%s</font>' % out_omin_pheno
                    Story.append(Paragraph(pdf_text, styles["Normal"]))
                # Spacer
                Story.append(Spacer(1, 12))
    
    # Annotate the Lolliplots of Somaticly Mutated Genes
    # Tutorial for reportlab: http://www.blog.pythonlibrary.org/2010/03/08/a-simple-step-by-step-reportlab-tutorial/
    # Documentation for reportlab: https://www.reportlab.com/docs/reportlab-userguide.pdf
    # Lilliplot Title
    if chick_gene_name == '':
        #print('GENE_NAME = 0')
        if re.search(chick_gene_id, str(os.listdir(somatic_lolliplots_dir))):
            pdf_text = '<font size=10>Lolliplot of Somatic Mutations in Gene Protein Products:</font>' 
            Story.append(Paragraph(pdf_text, styles["Normal"]))
            Story.append(Spacer(1, 12))
    elif chick_gene_name != '':
        #print('GENE_NAME != 0')
        if re.search(chick_gene_name, str(os.listdir(somatic_lolliplots_dir))):
            pdf_text = '<font size=10>Lolliplot of Somatic Mutations in Gene Protein Products:</font>' 
            Story.append(Paragraph(pdf_text, styles["Normal"]))
            Story.append(Spacer(1, 12))

    # Iterate over lolliplot files
    for lolliplot in os.listdir(somatic_lolliplots_dir):
        # Query for files of appropriate gene lolliplot based on ensembl gene id or gene symbol
        if chick_gene_name == '':
            if lolliplot.startswith(chick_gene_id):
                #print('Inquiry of gene id')
                #print('Gene_id: ' + chick_gene_id)
                # Output the lolliplot
                out_lolli = Image(str(somatic_lolliplots_dir + lolliplot), width=5*inch, height=3*inch)
                Story.append(out_lolli)
        elif chick_gene_name != '':
            if lolliplot.startswith(chick_gene_name):
                #print('Inquiry of gene name')
                #print('Gene_id: ' + chick_gene_id)
                #print('Gene name: ' + chick_gene_name)
                # Output the lolliplot
                out_lolli = Image(str(somatic_lolliplots_dir + lolliplot), width=5*inch, height=3*inch)
                Story.append(out_lolli)

    # Output the somatic SNVs and INDELs for reference
    if re.search(chick_gene_name, str(os.listdir(somatic_lolliplots_dir))) or re.search(chick_gene_id, str(os.listdir(somatic_lolliplots_dir))):
        # Reset a somatic variant output variable before looping though somatic variants file
        out_somatic_vars = []
        n = 0
        # Loop through somatic SNV and INDEL final output file
        for so_snv_and_indel_line in open(so_snv_and_indel_file):
            if so_snv_and_indel_line[0] == '#':
                so_snv_and_indel_header = so_snv_and_indel_line
            elif so_snv_and_indel_line[0] != '#':
                so_snv_and_indel_line = so_snv_and_indel_line.rstrip()
                so_snv_and_indel_cols = so_snv_and_indel_line.split('\t')
                so_snv_and_indel_chick_gene_symbol = so_snv_and_indel_cols[6]
                so_snv_and_indel_chick_ensembl_gene_id = so_snv_and_indel_cols[7]
                # If the ensembl gene id matches in file, print variant line
                if so_snv_and_indel_chick_ensembl_gene_id == chick_gene_id:
                    n = n + 1
                    m = n - 1
                    out_somatic_vars.append(m)
                    out_somatic_vars[m] = so_snv_and_indel_line
        
        # Print the Header
        pdf_text = '<font size=10>%s</font>' % so_snv_and_indel_header
        Story.append(Paragraph(pdf_text, styles["Normal"]))
        # Print the Individual Variants
        for v in range(n):
            pdf_text = '<font size=6>%s</font>' % out_somatic_vars[v]
            Story.append(Paragraph(pdf_text, styles["Normal"]))
        Story.append(Spacer(1, 12))

    # Annotate the Somatic SNV Calls followed by VEP annotations
    # Print the Title
    pdf_text = '<font size=10>Detailed Annotation of Somatic SNVs:</font>' 
    Story.append(Paragraph(pdf_text, styles["Normal"]))
    Story.append(Spacer(1, 12))

    # Loop through the somatic SNV file
    for sosnv_line in open(sosnv_file):
        if sosnv_line[0] == '#':
            so_snv_line_header = sosnv_line
        if sosnv_line[0] != '#':
            sosnv_line = sosnv_line.rstrip()
            sosnv_cols = sosnv_line.split('\t')
            sosnv_chick_gene_symbol = sosnv_cols[6]
            sosnv_chick_ensembl_gene_id = sosnv_cols[7]
            # If the ensembl chick gene ID's match, collect info
            if sosnv_chick_ensembl_gene_id == chick_gene_id:
                sosnv_chr = sosnv_cols[0]
                sosnv_pos = sosnv_cols[1]
                sosnv_ref = sosnv_cols[2]
                sosnv_alt = sosnv_cols[3]
                # Capture unique snv info in variable
                sosnv_snv = sosnv_chr + sosnv_pos + sosnv_ref + sosnv_alt
                # Capture unique sample info in variable
                sosnv_sample = sosnv_cols[9]
                sosnv_sample_num = sosnv_sample.count('|') + 1
                # Note: Range treats numbers as zero-based
                sample = []
                # Collect info on each sample of variant
                for n in range(sosnv_sample_num):
                    sample.append(n)
                    sample[n] = sosnv_sample.split('|')[n]
                    # Add additional annotation from vep files
                    ss_vep_file2read = vcf_file[sample[n]]
                    # Loop through the VEP annotated file that is associated with captured sample above
                    for ss_vep_line in open(ss_vep_file2read):
                        if ss_vep_line[0] != '#': 
                            ss_vep_cols = ss_vep_line.split('\t')
                            ss_vep_chr = ss_vep_cols[0]
                            ss_vep_pos = ss_vep_cols[1]
                            ss_vep_ref = ss_vep_cols[3]
                            ss_vep_alt = ss_vep_cols[4]
                            ss_vep_snv = ss_vep_chr + ss_vep_pos + ss_vep_ref + ss_vep_alt
                            # If the variant from the somatic SNV file matches the variant from the sample's vep file,
                            # then collect vep annotation
                            if sosnv_snv == ss_vep_snv:
                                ss_vep_info = ss_vep_cols[7]
                                ss_vep_format = ss_vep_cols[8]
                                ss_vep_normal = ss_vep_cols[9]
                                ss_vep_tumor = ss_vep_cols[10]
                                if re.search('SOMATIC', ss_vep_info.split(';')[0]):
                                    ss_vep_somat = ss_vep_info.split(';')[0]
                                else:
                                    ss_vep_somat = 'NA'
                                if re.search('MVJSDU', ss_vep_info.split(';')[0]):
                                    ss_vep_tools = ss_vep_info.split(';')[0]
                                elif re.search('MVJSDU', ss_vep_info.split(';')[1]):
                                    ss_vep_tools = ss_vep_info.split(';')[1]
                                if re.search('NUM_TOOLS', ss_vep_info.split(';')[1]):
                                    ss_vep_tool_num = ss_vep_info.split(';')[1]
                                elif re.search('NUM_TOOLS', ss_vep_info.split(';')[2]):
                                    ss_vep_tool_num = ss_vep_info.split(';')[2]
                                if re.search('CSQ=', ss_vep_info.split(';')[2]):
                                    ss_vep_info_ann = ss_vep_info.split(';')[2].split('SQ=')[1]
                                    ss_vep_info_ann_num = ss_vep_info_ann.count(',') + 1
                                    info_ann = []
                                elif re.search('CSQ=', ss_vep_info.split(';')[3]):
                                    ss_vep_info_ann = ss_vep_info.split(';')[3].split('SQ=')[1]
                                    ss_vep_info_ann_num = ss_vep_info_ann.count(',') + 1
                                    info_ann = []
                                for n in range(ss_vep_info_ann_num):
                                    info_ann.append(n)
                                    info_ann[n] = ss_vep_info_ann.split(',')[n]
                                    info_ann2read = info_ann[n]
                                    info_cols = info_ann2read.split('|')
                                    ss_vep_allele = info_cols[0]
                                    ss_vep_cons = info_cols[1]
                                    ss_vep_impact = info_cols[2]
                                    ss_vep_symbol = info_cols[3]
                                    ss_vep_geneid = info_cols[4]
                                    ss_vep_feat_type = info_cols[5]
                                    ss_vep_feature = info_cols[6]
                                    ss_vep_biotype = info_cols[7]
                                    ss_vep_exon = info_cols[8]
                                    ss_vep_intron = info_cols[9]
                                    ss_vep_HGVSc = info_cols[10]
                                    ss_vep_HGVSp = info_cols[11]
                                    ss_vep_cDNA_pos = info_cols[12]
                                    ss_vep_CDS_pos = info_cols[13]
                                    ss_vep_protein_pos = info_cols[14]
                                    ss_vep_aminos = info_cols[15]
                                    ss_vep_codons = info_cols[16]
                                    ss_vep_existing_var = info_cols[17]
                                    ss_vep_distance = info_cols[18]
                                    ss_vep_strand = info_cols[19]
                                    ss_vep_flags = info_cols[20]
                                    ss_vep_symbol_source = info_cols[21]
                                    ss_vep_HGNC_ID = info_cols[22]
                                    ss_vep_tsl = info_cols[23]
                                    ss_vep_appris = info_cols[24]
                                    ss_vep_ccds = info_cols[25]
                                    ss_vep_ensp = info_cols[26]
                                    ss_vep_swissprot = info_cols[27]
                                    ss_vep_trembl = info_cols[28]
                                    ss_vep_uniparc = info_cols[29]
                                    ss_vep_sift = info_cols[30]
                                    ss_vep_domains = info_cols[31]
                                    ss_vep_hgvs_offset = info_cols[32]
                                    # Reset these just in case
                                    so_snv2vep1 = ''
                                    so_snv2vep2 = ''
                                    so_snv2vep3 = ''
                                    so_snv2vep4 = ''
                                    so_snv2vep5 = ''
                                    so_snv2vep6 = ''
                                    so_snv2vep7 = ''
                                    so_snv2vep8 = ''
                                    so_snv2vep9 = ''
                                    so_snv2vep10 = ''
                                    so_snv2vep11 = ''
                                    so_snv2vep12 = ''
                                    so_snv2vep13 = ''
                                    so_snv2vep14 = ''
                                    so_snv2vep15 = ''
                                    # Only print annotation on non-synonymous variables
                                    if ss_vep_impact == 'MODERATE' or ss_vep_impact == 'HIGH':
                                        so_snv2vep1 = so_snv_line_header
                                        so_snv2vep2 = sosnv_line
                                        so_snv2vep3 = 'VEP Annotation'
                                        if ss_vep_tool_num != '':
                                            so_snv2vep4 = ss_vep_tool_num + ' (Number of variant callers)'
                                        else:
                                            so_snv2vep4 = ''
                                        if ss_vep_tools != '':
                                            so_snv2vep5 = ss_vep_tools + ' (One letter abbreviations for each somatic-snv-caller)'
                                        else:
                                            so_snv2vep5 = ''
                                        if ss_vep_somat == 'SOMATIC':
                                            so_snv2vep6 = 'SomaticSeq predicted this variant to be somatic'
                                        else:
                                            so_snv2vep6 = ''
                                        if ss_vep_strand != '':
                                            so_snv2vep7 = 'DNA strand: ' + ss_vep_strand
                                        else:
                                            so_snv2vep7 = ''
                                        if ss_vep_sift != '':
                                            so_snv2vep8 = 'SIFT Loss-of-function prediciton: ' + ss_vep_sift
                                        else:
                                            so_snv2vep8 = ''
                                        if ss_vep_feat_type != '':
                                            so_snv2vep9 = 'Feature type: ' + ss_vep_feat_type
                                        else:
                                            so_snv2vep9 = ''
                                        if ss_vep_feature != '':
                                            so_snv2vep10 = 'Feature: ' + ss_vep_feature
                                        else:
                                            so_snv2vep10 = ''
                                        if ss_vep_biotype != '':
                                            so_snv2vep11 = 'Biotype: ' + ss_vep_biotype
                                        else:
                                            so_snv2vep11 = ''
                                        if ss_vep_exon != '':
                                            so_snv2vep12 = 'Exon: ' + ss_vep_exon
                                        else:
                                            so_snv2vep12 = ''
                                        if ss_vep_ensp != '' or ss_vep_swissprot != '' or ss_vep_trembl != '' or ss_vep_uniparc != '':
                                            so_snv2vep13 = 'Estimated protein identifiers:' 
                                            so_snv2vep13_1 = 'Ensembl: ' + ss_vep_ensp
                                            so_snv2vep13_2 = 'SwissProt: ' + ss_vep_swissprot
                                            so_snv2vep13_3 = 'TREMBL: ' + ss_vep_trembl
                                            so_snv2vep13_4 = 'UNIPARC: ' + ss_vep_uniparc
                                        else:
                                            so_snv2vep13 = ''
                                            so_snv2vep13_1 = ''
                                            so_snv2vep13_2 = ''
                                            so_snv2vep13_3 = ''
                                            so_snv2vep13_4 = ''
                                        if ss_vep_HGVSp != '':
                                            so_snv2vep14 = 'Protein alteration (HGVS): ' + ss_vep_HGVSp
                                        else:
                                            so_snv2vep14 = ''
                                        if ss_vep_domains != '':
                                            so_snv2vep15 = 'Mutation in protein domains: ' + ss_vep_domains
                                        else:
                                            so_snv2vep15 = ''
                                        # Consolidate output values
                                        so_snv2vep_fin = so_snv2vep1 + '<br/>' + so_snv2vep2 + '<br/>' + '<br/>' + so_snv2vep3 + '<br/>' + so_snv2vep4 + '<br/>' + so_snv2vep5 + '<br/>' + so_snv2vep6 + '<br/>' + so_snv2vep7 + '<br/>' + so_snv2vep8 + '<br/>' + so_snv2vep9 + '<br/>' + so_snv2vep10 + '<br/>' + so_snv2vep11 + '<br/>' + so_snv2vep12 + '<br/>' + so_snv2vep13 + '<br/>' + so_snv2vep14 + '<br/>' + so_snv2vep15
                                        # Associate consolidated output values with chicken ensembl gene ID in dictionary to eliminate redundency
                                        chick_gene_id2somatic_snv2vep[chick_gene_id] = {sosnv_snv: so_snv2vep_fin}
                
                if sosnv_snv in chick_gene_id2somatic_snv2vep[chick_gene_id].keys():
                    # Print the vep annotations for each somatic variant
                    pdf_text = '<font size=7>%s<br/> \
                    </font>' % (str(chick_gene_id2somatic_snv2vep[chick_gene_id][sosnv_snv]))
                    Story.append(Paragraph(pdf_text, styles["Normal"]))
                    Story.append(Spacer(1, 12))

    # Annotate the Somatic Indel Calls followed by VEP annotations
    # Print the Title
    pdf_text = '<font size=10>Detailed Annotation of Somatic INDELs:</font>' 
    Story.append(Paragraph(pdf_text, styles["Normal"]))
    Story.append(Spacer(1, 12))
    # Loop through the somatic INDEL files
    for soindel_line in open(soindel_file):
        if soindel_line[0] == '#':
            so_indel_line_header = soindel_line
        if soindel_line[0] != '#':
            soindel_line = soindel_line.rstrip()
            soindel_cols = soindel_line.split('\t')
            soindel_chick_gene_symbol = soindel_cols[6]
            soindel_chick_ensembl_gene_id = soindel_cols[7]
            # If the ensembl chick gene ID's match, collect info
            if soindel_chick_ensembl_gene_id == chick_gene_id:
                soindel_chr = soindel_cols[0]
                soindel_pos = soindel_cols[1]
                soindel_ref = soindel_cols[2]
                soindel_alt = soindel_cols[3]
                # Capture unique indel info in variable
                soindel_indel = soindel_chr + soindel_pos + soindel_ref + soindel_alt
                # Capture unique sample info in variable
                soindel_sample = soindel_cols[9]
                soindel_sample_num = soindel_sample.count('|') + 1
                # Note: Range treats numbers as zero-based
                sample_indel = []
                # Collect info on each sample of variant
                for n in range(soindel_sample_num):
                    sample_indel.append(n)
                    sample_indel[n] = soindel_sample.split('|')[n]
                    # Add additional annotation from vep files
                    si_vep_file2read = vcf_file_indel[sample_indel[n]]
                    # Loop through the VEP annotated file that is associated with captured sample above
                    for si_vep_line in open(si_vep_file2read):
                        if si_vep_line[0] != '#': 
                            si_vep_cols = si_vep_line.split('\t')
                            si_vep_chr = si_vep_cols[0]
                            si_vep_pos = si_vep_cols[1]
                            si_vep_ref = si_vep_cols[3]
                            si_vep_alt = si_vep_cols[4]
                            si_vep_indel = si_vep_chr + si_vep_pos + si_vep_ref + si_vep_alt
                            if soindel_indel == si_vep_indel:
                                #print('soindel_indel ' + soindel_indel)
                                #print('si_vep_indel ' + si_vep_indel)
                                si_vep_info = si_vep_cols[7]
                                si_vep_format = si_vep_cols[8]
                                si_vep_normal = si_vep_cols[9]
                                si_vep_tumor = si_vep_cols[10]
                                if re.search('SOMATIC', si_vep_info.split(';')[0]):
                                    si_vep_somat = si_vep_info.split(';')[0]
                                else:
                                    si_vep_somat = 'NA'
                                if re.search('MVDL', si_vep_info.split(';')[0]):
                                    si_vep_tools = si_vep_info.split(';')[0]
                                elif re.search('MVDL', si_vep_info.split(';')[1]):
                                    si_vep_tools = si_vep_info.split(';')[1]
                                if re.search('NUM_TOOLS', si_vep_info.split(';')[1]):
                                    si_vep_tool_num = si_vep_info.split(';')[1]
                                elif re.search('NUM_TOOLS', si_vep_info.split(';')[2]):
                                    si_vep_tool_num = si_vep_info.split(';')[2]
                                if re.search('CSQ=', si_vep_info.split(';')[2]):
                                    si_vep_info_ann = si_vep_info.split(';')[2].split('SQ=')[1]
                                    si_vep_info_ann_num = si_vep_info_ann.count(',') + 1
                                    info_ann_indel = []
                                elif re.search('CSQ=', si_vep_info.split(';')[3]):
                                    si_vep_info_ann = si_vep_info.split(';')[3].split('SQ=')[1]
                                    si_vep_info_ann_num = si_vep_info_ann.count(',') + 1
                                    info_ann_indel = []
                                for n in range(si_vep_info_ann_num):
                                    info_ann_indel.append(n)
                                    info_ann_indel[n] = si_vep_info_ann.split(',')[n]
                                    info_ann2read = info_ann_indel[n]
                                    info_cols = info_ann2read.split('|')
                                    si_vep_allele = info_cols[0]
                                    si_vep_cons = info_cols[1]
                                    si_vep_impact = info_cols[2]
                                    si_vep_symbol = info_cols[3]
                                    si_vep_geneid = info_cols[4]
                                    si_vep_feat_type = info_cols[5]
                                    si_vep_feature = info_cols[6]
                                    si_vep_biotype = info_cols[7]
                                    si_vep_exon = info_cols[8]
                                    si_vep_intron = info_cols[9]
                                    si_vep_HGVSc = info_cols[10]
                                    si_vep_HGVSp = info_cols[11]
                                    si_vep_cDNA_pos = info_cols[12]
                                    si_vep_CDS_pos = info_cols[13]
                                    si_vep_protein_pos = info_cols[14]
                                    si_vep_aminos = info_cols[15]
                                    si_vep_codons = info_cols[16]
                                    si_vep_existing_var = info_cols[17]
                                    si_vep_distance = info_cols[18]
                                    si_vep_strand = info_cols[19]
                                    si_vep_flags = info_cols[20]
                                    si_vep_symbol_source = info_cols[21]
                                    si_vep_HGNC_ID = info_cols[22]
                                    si_vep_tsl = info_cols[23]
                                    si_vep_appris = info_cols[24]
                                    si_vep_ccds = info_cols[25]
                                    si_vep_ensp = info_cols[26]
                                    si_vep_swissprot = info_cols[27]
                                    si_vep_trembl = info_cols[28]
                                    si_vep_uniparc = info_cols[29]
                                    si_vep_sift = info_cols[30]
                                    si_vep_domains = info_cols[31]
                                    si_vep_hgvs_offset = info_cols[32]
                                    # Reset these just in case
                                    si_indel2vep1 = ''
                                    si_indel2vep2 = ''
                                    si_indel2vep3 = ''
                                    si_indel2vep4 = ''
                                    si_indel2vep5 = ''
                                    si_indel2vep6 = ''
                                    si_indel2vep7 = ''
                                    si_indel2vep8 = ''
                                    si_indel2vep9 = ''
                                    si_indel2vep10 = ''
                                    si_indel2vep11 = ''
                                    si_indel2vep12 = ''
                                    si_indel2vep13 = ''
                                    si_indel2vep14 = ''
                                    si_indel2vep15 = ''
                                    if si_vep_impact == 'MODERATE' or si_vep_impact == 'HIGH':
                                        si_indel2vep1 = so_indel_line_header
                                        si_indel2vep2 = soindel_line
                                        si_indel2vep3 = 'VEP Annotation'
                                        if si_vep_tool_num != '':
                                            si_indel2vep4 = si_vep_tool_num + ' (Number of variant callers)'
                                        else:
                                            si_indel2vep4 = ''
                                        if si_vep_tools != '':
                                            si_indel2vep5 = si_vep_tools + ' (One letter abbreviations for each somatic-indel-caller)'
                                        else:
                                            si_indel2vep5 = ''
                                        if si_vep_somat == 'SOMATIC':
                                            si_indel2vep6 = 'SomaticSeq predicted this variant to be somatic'
                                        else:
                                            si_indel2vep6 = ''
                                        if si_vep_strand != '':
                                            si_indel2vep7 = 'DNA strand: ' + si_vep_strand
                                        else:
                                            si_indel2vep7 = ''
                                        if si_vep_sift != '':
                                            si_indel2vep8 = 'SIFT Loss-of-function prediciton: ' + si_vep_sift
                                        else:
                                            si_indel2vep8 = ''
                                        if si_vep_feat_type != '':
                                            si_indel2vep9 = 'Feature type: ' + si_vep_feat_type
                                        else:
                                            si_indel2vep9 = ''
                                        if si_vep_feature != '':
                                            si_indel2vep10 = 'Feature: ' + si_vep_feature
                                        else:
                                            si_indel2vep10 = ''
                                        if si_vep_biotype != '':
                                            si_indel2vep11 = 'Biotype: ' + si_vep_biotype
                                        else:
                                            si_indel2vep11 = ''
                                        if si_vep_exon != '':
                                            si_indel2vep12 = 'Exon: ' + si_vep_exon
                                        else:
                                            si_indel2vep12 = ''
                                        if si_vep_ensp != '' or si_vep_swissprot != '' or si_vep_trembl != '' or si_vep_uniparc != '':
                                            si_indel2vep13 = 'Estimated protein identifiers:'
                                            si_indel2vep13_1 = 'Ensembl: ' + si_vep_ensp
                                            si_indel2vep13_2 = 'SwissProt: ' + si_vep_swissprot
                                            si_indel2vep13_3 = 'TREMBL: ' + si_vep_trembl
                                            si_indel2vep13_4 = 'UNIPARC: ' + si_vep_uniparc
                                        else:
                                            si_indel2vep13 = ''
                                            si_indel2vep13_1 = ''
                                            si_indel2vep13_2 = ''
                                            si_indel2vep13_3 = ''
                                            si_indel2vep13_4 = ''
                                        if si_vep_HGVSp != '':
                                            si_indel2vep14 = 'Protein alteration (HGVS): ' + si_vep_HGVSp
                                        else:
                                            si_indel2vep14 = ''
                                        if si_vep_domains != '':
                                            si_indel2vep15 = 'Mutation in protein domains: ' + si_vep_domains
                                        else:
                                            si_indel2vep15 = ''
                                        si_indel2vep_fin = si_indel2vep1 + '<br/>' + si_indel2vep2 + '<br/>' + '<br/>' + si_indel2vep3 + '<br/>' + si_indel2vep4 + '<br/>' + si_indel2vep5 + '<br/>' + si_indel2vep6 + '<br/>' + si_indel2vep7 + '<br/>' + si_indel2vep8 + '<br/>' + si_indel2vep9 + '<br/>' + si_indel2vep10 + '<br/>' + si_indel2vep11 + '<br/>' + si_indel2vep12 + '<br/>' + si_indel2vep13 + '<br/>' + si_indel2vep14 + '<br/>' + si_indel2vep15 
                                        chick_gene_id2somatic_indel2vep[chick_gene_id] = {soindel_indel: si_indel2vep_fin}

                # Write the somatic Indel informatation to output file
                if soindel_indel in chick_gene_id2somatic_indel2vep[chick_gene_id]:
                    # Print the vep annotations for each somatic variant
                    pdf_text = '<font size=7>%s<br/> \
                    </font>' % (str(chick_gene_id2somatic_indel2vep[chick_gene_id][soindel_indel])) 
                    Story.append(Paragraph(pdf_text, styles["Normal"]))
                    Story.append(Spacer(1, 12))
                
    # Write the PDF output file
    outfile.build(Story)

###################################














































































# Annotate the somatic variants at the mutated gene level

python ./scripts/final_reports.py \
./results/somatic_snvs_final_test2.txt

# ./scripts/final_reports.py
######################################
import sys
import re
import os
import subprocess

# Input file
infile = sys.argv[1]

# Reference files:
#chick_gene_file = "/home/users/a.steep/databases/ensembl/galgal5_ensembl_gene_transcript_protein.tsv"
chick_gene_file = "/home/users/a.steep/databases/ensembl/galgal5_ensembl_gene_transcript_protein.tsv"
ortholog_file = "/home/users/a.steep/databases/ensembl/chicken-human_orthologs.txt"
#ncbi2ensembl_file = "/home/users/a.steep/databases/ncbi/gene2ensembl"
ncbi2ensembl_file = "/home/users/a.steep/databases/ncbi/gene2ensembl_uniq.txt"
gene2refseq_file = "/home/users/a.steep/databases/ncbi/refseq/gene_RefSeqGene"
cosmic_cgc_file = "/home/users/a.steep/databases/cosmic/cosmic_CGC_gene_list.txt"
omin_file = "/home/users/a.steep/databases/omin/genemap2.txt"
sosnv_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_final.txt"
soindel_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_indels_final.txt"
ss_vep_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_final_vep.vcf"
si_vep_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_indels_final_vep.vcf"
birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"


refseq_files = [
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.1.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.2.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.3.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.4.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.5.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.6.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.7.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.8.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.9.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.10.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.11.genomic.gbff"]

# Conditional variables
step1 = False
step2 = False

# Create empty dictionaries
ann_dict = {}
chick_gene_id2chick_gene_name = {}
chick_gene_id2chick_entrez_gene_id = {}
chick_gene_id2human_gene_id = {}
chick_gene_id2human_entrez_gene_id = {}
chick_gene_id2human_refseq_id = {}
chick_gene_id2human_refseq = {}
chick_gene_id2somatic_snv2vep = {}
chick_gene_id2somatic_indel2vep = {}

# Create a dictionary of vcf files
vcf_file = {}
vcf_file_indel = {}
# Iterate over samples labels (birds) and create dictionary of somatic snv vep files
# Iterate over samples labels (birds) and create dictionary of somatic snv vep files
for bird in open(birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_snv_vep.vcf"
	vcf_file_indel[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_indel_vep.vcf"


# Empty variables
chick_gene_id = ''

# Output file path:
outfile_path = './results/mutated_gene_summaries/'

# Build the appropriate dictionaries based on the input file
for in_line in open(infile):
	if in_line[0] != '#':
		in_line = in_line.rstrip()
		in_cols = in_line.split('\t')
		in_gene_symbol = in_cols[6]
		in_ensembl_gene_id = in_cols[7]
		in_entrez_gene_id = in_cols[8]
		print(len(ann_dict))
		print(in_gene_symbol + '\t' + in_ensembl_gene_id)
		# Start building the annotation dictionaries for annotation purposes
		for line in open(chick_gene_file):
			#print(ann_dict)
			# Start on the correct line
			if line.split('\t')[0] != 'Gene_ID' and in_ensembl_gene_id == line.split('\t')[0]:
				#print(line)
				line = line.rstrip()
				chick_gene_id = line.split('\t')[0]
				chick_transcript_id = line.split('\t')[1]
				chick_pro_id = line.split('\t')[2]
				chick_gene_name = line.split('\t')[3]
				chick_transcript_count = line.split('\t')[4]
				chick_gene_id2chick_gene_name[chick_gene_id] = chick_gene_name
				# Obtain ensembl ortholog gene name and ID
				for orth_line in open(ortholog_file):
					if orth_line.split('\t')[1] == chick_gene_id and orth_line.split('\t')[4].split('\n')[0] == "ortholog_one2one":
						human_gene_id = orth_line.split('\t')[3]
						human_gene_name = orth_line.split('\t')[2]
						# Create an empty dictionary with key value as ensembl gene id
						chick_gene_id2human_gene_id[chick_gene_id] = human_gene_id
						# Obtain Entrez ID
						for ncbi2ensembl_line in open(ncbi2ensembl_file):
							ncbi2ensembl_line = ncbi2ensembl_line.rstrip()
							if ncbi2ensembl_line.split('\t')[1] == chick_gene_id:
								chick_entrez_gene_id = ncbi2ensembl_line.split('\t')[0]
								chick_gene_id2chick_entrez_gene_id[chick_gene_id] = chick_entrez_gene_id
							elif ncbi2ensembl_line.split('\t')[1] == human_gene_id:
								human_entrez_gene_id = ncbi2ensembl_line.split('\t')[0]
								chick_gene_id2human_entrez_gene_id[chick_gene_id] = human_entrez_gene_id
								for gene2refseq_line in open(gene2refseq_file):
									gene2refseq_line = gene2refseq_line.rstrip()
									# Good spot for empty variables so script doesn't hang
									refseq1 = ''
									refseq2 = ''
									refseq3 = ''
									refseq4 = ''
									human_refseq = ''
									if gene2refseq_line.split('\t')[1] == chick_gene_id2human_entrez_gene_id[chick_gene_id]:
										human_refseq_id = gene2refseq_line.split('\t')[3]
										chick_gene_id2human_refseq_id[chick_gene_id] = human_refseq_id
										# Start building output file
										# Obtain a summary of the gene in refseq
										ref_seq_cmd = "zgrep -w " + chick_gene_id2human_refseq_id[chick_gene_id] + " " + "/home/users/a.steep/databases/ncbi/refseq/refseqgene.*.genomic.gbff.gz" + " | cut -d':' -f1 | sort | uniq | sed 's/.gz//'"
										#refseq_file = os.system(ref_seq_cmd)
										proc = subprocess.Popen([ref_seq_cmd], stdout=subprocess.PIPE, shell=True) 
										(out, err) = proc.communicate()
										out = str(out)
										refseq_file = out.replace("b'", "")[:-3]
										print(refseq_file)
										with open(refseq_file) as regseq_file_mem:
											while True:
												refseq_lines = regseq_file_mem.readlines(22000000)
												if not refseq_lines:
													break
												for refseq_line in refseq_lines:
													refseq_line = refseq_line.rstrip()
													if re.search("^LOCUS", refseq_line) and re.search(human_refseq_id.split('.')[0], refseq_line):
														step1 = True
													elif re.search("^PRIMARY", refseq_line):
														step1 = False
													elif step1:
														if re.search("DEFINITION", refseq_line):
															refseq1 = refseq_line + '\n'
														elif re.search("SOURCE", refseq_line):
															refseq2 = refseq_line + '\n' + '\n'
														elif re.search("Summary:", refseq_line):
															refseq3 = refseq_line
															step2 = True
														elif re.search("PRIMARY", refseq_line):
															step2 = False
														elif step2:
															refseq4 = refseq4 + refseq_line
													else:
														step2 = False
										human_refseq = refseq1 + refseq2 + refseq3 + refseq4.replace('   ', '')
										if human_refseq != '':
											ann_dict[chick_gene_id] = {chick_gene_name: {human_gene_id: {human_entrez_gene_id: {human_refseq_id: human_refseq}}}}
											chick_gene_id2human_refseq[chick_gene_id] = human_refseq
										else:
											break


# Start building the output file
for chick_gene_id, values in ann_dict.items():
	chick_gene_id = str(chick_gene_id)
	chick_entrez_gene_id = str(chick_gene_id2chick_entrez_gene_id[chick_gene_id])
	human_ensembl_gene_id = str(chick_gene_id2human_gene_id[chick_gene_id])
	human_entrez_gene_id = str(chick_gene_id2human_entrez_gene_id[chick_gene_id])
	if len(chick_gene_id2chick_gene_name[chick_gene_id]) > 0:
		outfile = open(outfile_path + str(chick_gene_id2chick_gene_name[chick_gene_id]) + '_annotations.txt', 'w')
	elif len(chick_gene_id2chick_gene_name[chick_gene_id]) == 0:
		outfile = open(outfile_path + chick_gene_id + '_annotations.txt', 'w')
	# Output Ensembl gene ID
	outfile.write('Ensembl Chicken Gene ID: ' + chick_gene_id + '\n')
	# print gene name
	if len(chick_gene_id2chick_gene_name[chick_gene_id]) > 0:
		outfile.write('Ensembl Chicken Gene Name: ' + chick_gene_id2chick_gene_name[chick_gene_id] + '\n' + '\n')
	# print refseq gene summary
	if len(chick_gene_id2human_refseq[chick_gene_id]) > 0:
		outfile.write('RefSeq Human Ortholog Summary:' + '\n' + chick_gene_id2human_refseq[chick_gene_id] + '\n' + '\n')

	# Grab COSMIC CGC annotation:
	# for chick_gene_id, values in ann_dict.items():
	#chick_gene_id = str(chick_gene_id) 
	#human_entrez_gene_id = str(chick_gene_id2human_entrez_gene_id[chick_gene_id])
	for cgc_line in open(cosmic_cgc_file):
		cgc_line = cgc_line.rstrip()
		if cgc_line.split('\t')[2] == human_entrez_gene_id:
			cgc_cols = cgc_line.split('\t')
			cgc_symbol = cgc_cols[0]
			cgc_synonyms = cgc_cols[17]
			cgc_gene_name = cgc_cols[1]
			cgc_somatic = cgc_cols[5]
			cgc_germline = cgc_cols[6]
			cgc_som_types = cgc_cols[7]
			cgc_germ_types = cgc_cols[8]
			cgc_cancer_syndrome = cgc_cols[9]
			cgc_tissue = cgc_cols[10]
			cgc_genetics = cgc_cols[11]
			cgc_role = cgc_cols[12]
			cgc_mut_types = cgc_cols[13]
			cgc_trans_part = cgc_cols[14]
			cgc_other_germ = cgc_cols[15]
			cgc_other_syn = cgc_cols[16]
			# Output the CGC info:
			outfile.write('COSMIC Cancer Gene Consensus' + '\n')
			outfile.write(cgc_symbol + '\n')
			outfile.write(cgc_gene_name + '\n')
			outfile.write('Synonyms: ' + cgc_synonyms + '\n')
			if cgc_somatic == 'yes':
				outfile.write('Somatic Mutation Types: ' + cgc_som_types + '\n')
			if cgc_germline == 'yes':
				outfile.write('Germline Mutation Types: ' + cgc_germ_types + '\n')
			if cgc_cancer_syndrome != '':
				outfile.write('Known Cancer Syndromes: ' + cgc_germline + '\n')
			if cgc_tissue != '':
				outfile.write('Tissue Types: ' + cgc_tissue + '\n')
			if cgc_role != '':
				outfile.write('Role of Mutated Gene in Cancer: ' + cgc_role + '\n')
			if cgc_genetics != '':
				outfile.write('Molecular Genetics: ' + cgc_genetics + '\n')
			if cgc_mut_types != '':
				outfile.write('Mutation Types: ' + cgc_mut_types + '\n')
			if cgc_other_germ == 'yes':
				outfile.write('Other Germline Mutations: ' + cgc_other_germ + '\n')
			if cgc_other_syn != '':
				outfile.write('Other Syndrome: ' + cgc_other_syn + '\n')

	# Grab OMIN annotation:
	# for chick_gene_id, values in ann_dict.items():
	#chick_gene_id = str(chick_gene_id)
	for omin_line in open(omin_file):
		if omin_line[0] != '#':
			omin_line = omin_line.rstrip()
			if re.search(human_ensembl_gene_id, omin_line) or re.search('\t'+human_entrez_gene_id+'\t', omin_line):
				omin_cols = omin_line.split('\t')
				omin_symbol = omin_cols[8]
				omin_com = omin_cols[11]
				omin_pheno = omin_cols[12]
				#Output the CGC info:
				outfile.write('\n' + 'OMIN Annotation' + '\n')
				outfile.write(omin_symbol + '\n')
				if omin_com != '':
					outfile.write('General Comments: ' + omin_com + '\n')
				if omin_pheno != '':
					outfile.write('Phenotypes: ' + omin_pheno + '\n')

	# Annotate the Somatic SNV Calls followed by VEP annotations
	outfile.write('\n' + 'Somatic SNVs')
	for sosnv_line in open(sosnv_file):
		so_snv2vep1 = ''
		so_snv2vep2 = ''
		so_snv2vep3 = ''
		so_snv2vep4 = ''
		so_snv2vep5 = ''
		so_snv2vep6 = ''
		so_snv2vep7 = ''
		so_snv2vep8 = ''
		so_snv2vep9 = ''
		so_snv2vep10 = ''
		so_snv2vep11 = ''
		so_snv2vep12 = ''
		so_snv2vep13 = ''
		so_snv2vep14 = ''
		so_snv2vep15 = ''
		if sosnv_line[0] == '#':
			so_snv_line_header = sosnv_line
		if sosnv_line[0] != '#':
			sosnv_line = sosnv_line.rstrip()
			sosnv_cols = sosnv_line.split('\t')
			sosnv_chick_gene_symbol = sosnv_cols[6]
			sosnv_chick_ensembl_gene_id = sosnv_cols[7]
			#sosnv_chick_entrez_gene_id = sosnv_cols[8]
			if sosnv_chick_ensembl_gene_id == chick_gene_id:
				sosnv_chr = sosnv_cols[0]
				sosnv_pos = sosnv_cols[1]
				sosnv_ref = sosnv_cols[2]
				sosnv_alt = sosnv_cols[3]
				# Capture unique snv info in variable
				sosnv_snv = sosnv_chr + sosnv_pos + sosnv_ref + sosnv_alt
				# Capture unique sample info in variable
				sosnv_sample = sosnv_cols[9]
				sosnv_sample_num = sosnv_sample.count('|') + 1
				# Note: Range treats numbers as zero-based
				sample = []
				for n in range(sosnv_sample_num):
					#print(n)
					#print(in_sample)
					#print(in_sample.split('|')[n])
					sample.append(n)
					sample[n] = sosnv_sample.split('|')[n]
					#print('sample[' + str(n) + ']: ' + sample[n])
					# Add additional annotation from vep files
					ss_vep_file2read = vcf_file[sample[n]]
					#print(ss_vep_file2read)
					for ss_vep_line in open(ss_vep_file2read):
						#ss_vep_line = ss_vep_line.rstrip()
						if ss_vep_line[0] != '#': 
							ss_vep_cols = ss_vep_line.split('\t')
							ss_vep_chr = ss_vep_cols[0]
							ss_vep_pos = ss_vep_cols[1]
							ss_vep_ref = ss_vep_cols[3]
							ss_vep_alt = ss_vep_cols[4]
							ss_vep_snv = ss_vep_chr + ss_vep_pos + ss_vep_ref + ss_vep_alt
							if sosnv_snv == ss_vep_snv:
								ss_vep_info = ss_vep_cols[7]
								ss_vep_format = ss_vep_cols[8]
								ss_vep_normal = ss_vep_cols[9]
								ss_vep_tumor = ss_vep_cols[10]
								if re.search('SOMATIC', ss_vep_info.split(';')[0]):
									ss_vep_somat = ss_vep_info.split(';')[0]
								else:
									ss_vep_somat = 'NA'
								if re.search('MVJSDU', ss_vep_info.split(';')[0]):
									ss_vep_tools = ss_vep_info.split(';')[0]
								elif re.search('MVJSDU', ss_vep_info.split(';')[1]):
									ss_vep_tools = ss_vep_info.split(';')[1]
								if re.search('NUM_TOOLS', ss_vep_info.split(';')[1]):
									ss_vep_tool_num = ss_vep_info.split(';')[1]
								elif re.search('NUM_TOOLS', ss_vep_info.split(';')[2]):
									ss_vep_tool_num = ss_vep_info.split(';')[2]
								if re.search('CSQ=', ss_vep_info.split(';')[2]):
									ss_vep_info_ann = ss_vep_info.split(';')[2].split('SQ=')[1]
									ss_vep_info_ann_num = ss_vep_info_ann.count(',') + 1
									info_ann = []
								elif re.search('CSQ=', ss_vep_info.split(';')[3]):
									ss_vep_info_ann = ss_vep_info.split(';')[3].split('SQ=')[1]
									ss_vep_info_ann_num = ss_vep_info_ann.count(',') + 1
									info_ann = []
								for n in range(ss_vep_info_ann_num):
									info_ann.append(n)
									info_ann[n] = ss_vep_info_ann.split(',')[n]
									info_ann2read = info_ann[n]
									info_cols = info_ann2read.split('|')
									ss_vep_allele = info_cols[0]
									ss_vep_cons = info_cols[1]
									ss_vep_impact = info_cols[2]
									ss_vep_symbol = info_cols[3]
									ss_vep_geneid = info_cols[4]
									ss_vep_feat_type = info_cols[5]
									ss_vep_feature = info_cols[6]
									ss_vep_biotype = info_cols[7]
									ss_vep_exon = info_cols[8]
									ss_vep_intron = info_cols[9]
									ss_vep_HGVSc = info_cols[10]
									ss_vep_HGVSp = info_cols[11]
									ss_vep_cDNA_pos = info_cols[12]
									ss_vep_CDS_pos = info_cols[13]
									ss_vep_protein_pos = info_cols[14]
									ss_vep_aminos = info_cols[15]
									ss_vep_codons = info_cols[16]
									ss_vep_existing_var = info_cols[17]
									ss_vep_distance = info_cols[18]
									ss_vep_strand = info_cols[19]
									ss_vep_flags = info_cols[20]
									ss_vep_symbol_source = info_cols[21]
									ss_vep_HGNC_ID = info_cols[22]
									ss_vep_tsl = info_cols[23]
									ss_vep_appris = info_cols[24]
									ss_vep_ccds = info_cols[25]
									ss_vep_ensp = info_cols[26]
									ss_vep_swissprot = info_cols[27]
									ss_vep_trembl = info_cols[28]
									ss_vep_uniparc = info_cols[29]
									ss_vep_sift = info_cols[30]
									ss_vep_domains = info_cols[31]
									ss_vep_hgvs_offset = info_cols[32]
									# Reset these just in case
									so_snv2vep1 = ''
									so_snv2vep2 = ''
									so_snv2vep3 = ''
									so_snv2vep4 = ''
									so_snv2vep5 = ''
									so_snv2vep6 = ''
									so_snv2vep7 = ''
									so_snv2vep8 = ''
									so_snv2vep9 = ''
									so_snv2vep10 = ''
									so_snv2vep11 = ''
									so_snv2vep12 = ''
									so_snv2vep13 = ''
									so_snv2vep14 = ''
									so_snv2vep15 = ''
									if ss_vep_impact == 'MODERATE' or ss_vep_impact == 'HIGH':
										#outfile.write('\n' + so_snv_line_header)
										so_snv2vep1 = '\n' + so_snv_line_header
										#outfile.write(sosnv_line + '\n')
										so_snv2vep2 = sosnv_line + '\n'
										#outfile.write('\n' + 'VEP Annotation' + '\n')
										so_snv2vep3 = '\n' + 'VEP Annotation' + '\n'
										if ss_vep_tool_num != '':
											#outfile.write(ss_vep_tool_num + ' (Number of variant callers)' +  '\n')
											so_snv2vep4 = ss_vep_tool_num + ' (Number of variant callers)' +  '\n'
										if ss_vep_tools != '':
											#outfile.write(ss_vep_tools + ' (One letter abbreviations for each somatic-snv-caller)' + '\n')
											so_snv2vep5 = ss_vep_tools + ' (One letter abbreviations for each somatic-snv-caller)' + '\n'
										if ss_vep_somat == 'SOMATIC':
											#outfile.write('SomaticSeq predicted this variant to be somatic' + '\n')
											so_snv2vep6 = 'SomaticSeq predicted this variant to be somatic' + '\n'
										if ss_vep_strand != '':
											#outfile.write('DNA Strand: ' + ss_vep_strand + '\n')
											so_snv2vep7 = 'DNA strand: ' + ss_vep_strand + '\n'
										if ss_vep_sift != '':
											#outfile.write('SIFT Loss-of-function Prediciton: ' + ss_vep_sift + '\n')
											so_snv2vep8 = 'SIFT Loss-of-function prediciton: ' + ss_vep_sift + '\n'
										if ss_vep_feat_type != '':
											so_snv2vep9 = 'Feature type: ' + ss_vep_feat_type + '\n'
										if ss_vep_feature != '':
											so_snv2vep10 = 'Feature: ' + ss_vep_feature + '\n'
										if ss_vep_biotype != '':
											so_snv2vep11 = 'Biotype: ' + ss_vep_biotype + '\n'
										if ss_vep_exon != '':
											so_snv2vep12 = 'Exon: ' + ss_vep_exon + '\n'
										if ss_vep_ensp != '' or ss_vep_swissprot != '' or ss_vep_trembl != '' or ss_vep_uniparc != '':
											so_snv2vep13 = 'Estimated protein identifiers:' + '\n' + '\t' + 'Ensembl: ' + ss_vep_ensp + '\n' + '\t' + 'SwissProt: ' + ss_vep_swissprot + '\n' + '\t' + 'TREMBL: ' + ss_vep_trembl + '\n' + '\t' + 'UNIPARC: ' + ss_vep_uniparc + '\n'
										if ss_vep_HGVSp != '':
											so_snv2vep14 = 'Protein alteration (HGVS): ' + ss_vep_HGVSp + '\n'
										if ss_vep_domains != '':
											#outfile.write('Mutation in protein domains: ' + ss_vep_domains + '\n')
											so_snv2vep15 = 'Mutation in protein domains: ' + ss_vep_domains + '\n'
										so_snv2vep_fin = so_snv2vep1 + so_snv2vep2 + so_snv2vep3 + so_snv2vep4 + so_snv2vep5 + so_snv2vep6 + so_snv2vep7 + so_snv2vep8 + so_snv2vep9 + so_snv2vep10 + so_snv2vep11 + so_snv2vep12 + so_snv2vep13 + so_snv2vep14 + so_snv2vep15 
										chick_gene_id2somatic_snv2vep[chick_gene_id] = {sosnv_snv: so_snv2vep_fin}
				outfile.write(chick_gene_id2somatic_snv2vep[chick_gene_id][sosnv_snv])

	# Annotate the Somatic Indel Calls followed by VEP annotations
	outfile.write('\n' + 'Somatic INDELs' + '\n')
	for soindel_line in open(soindel_file):
		so_indel2vep1 = ''
		so_indel2vep2 = ''
		so_indel2vep3 = ''
		so_indel2vep4 = ''
		so_indel2vep5 = ''
		so_indel2vep6 = ''
		so_indel2vep7 = ''
		so_indel2vep8 = ''
		so_indel2vep9 = ''
		so_indel2vep10 = ''
		so_indel2vep11 = ''
		so_indel2vep12 = ''
		so_indel2vep13 = ''
		so_indel2vep14 = ''
		so_indel2vep15 = ''
		if soindel_line[0] == '#':
			so_indel_line_header = soindel_line
		if soindel_line[0] != '#':
			soindel_line = soindel_line.rstrip()
			soindel_cols = soindel_line.split('\t')
			soindel_chick_gene_symbol = soindel_cols[6]
			soindel_chick_ensembl_gene_id = soindel_cols[7]
			if soindel_chick_ensembl_gene_id == chick_gene_id:
				soindel_chr = soindel_cols[0]
				soindel_pos = soindel_cols[1]
				soindel_ref = soindel_cols[2]
				soindel_alt = soindel_cols[3]
				# Capture unique indel info in variable
				soindel_indel = soindel_chr + soindel_pos + soindel_ref + soindel_alt
				# Capture unique sample info in variable
				soindel_sample = soindel_cols[9]
				soindel_sample_num = soindel_sample.count('|') + 1
				# Note: Range treats numbers as zero-based
				sample_indel = []
				for n in range(soindel_sample_num):
					#print(n)
					#print(in_sample)
					#print(in_sample.split('|')[n])
					sample_indel.append(n)
					sample_indel[n] = soindel_sample.split('|')[n]
					#print('sample[' + str(n) + ']: ' + sample_indel[n])
					# Add additional annotation from vep files
					si_vep_file2read = vcf_file_indel[sample_indel[n]]
					#print(si_vep_file2read)
					for si_vep_line in open(si_vep_file2read):
						#si_vep_line = si_vep_line.rstrip()
						if si_vep_line[0] != '#': 
							si_vep_cols = si_vep_line.split('\t')
							si_vep_chr = si_vep_cols[0]
							si_vep_pos = si_vep_cols[1]
							si_vep_ref = si_vep_cols[3]
							si_vep_alt = si_vep_cols[4]
							si_vep_indel = si_vep_chr + si_vep_pos + si_vep_ref + si_vep_alt
							if soindel_indel == si_vep_indel:
								#print('soindel_indel ' + soindel_indel)
								#print('si_vep_indel ' + si_vep_indel)
								si_vep_info = si_vep_cols[7]
								si_vep_format = si_vep_cols[8]
								si_vep_normal = si_vep_cols[9]
								si_vep_tumor = si_vep_cols[10]
								if re.search('SOMATIC', si_vep_info.split(';')[0]):
									si_vep_somat = si_vep_info.split(';')[0]
								else:
									si_vep_somat = 'NA'
								if re.search('MVDL', si_vep_info.split(';')[0]):
									si_vep_tools = si_vep_info.split(';')[0]
								elif re.search('MVDL', si_vep_info.split(';')[1]):
									si_vep_tools = si_vep_info.split(';')[1]
								if re.search('NUM_TOOLS', si_vep_info.split(';')[1]):
									si_vep_tool_num = si_vep_info.split(';')[1]
								elif re.search('NUM_TOOLS', si_vep_info.split(';')[2]):
									si_vep_tool_num = si_vep_info.split(';')[2]
								if re.search('CSQ=', si_vep_info.split(';')[2]):
									si_vep_info_ann = si_vep_info.split(';')[2].split('SQ=')[1]
									si_vep_info_ann_num = si_vep_info_ann.count(',') + 1
									info_ann_indel = []
								elif re.search('CSQ=', si_vep_info.split(';')[3]):
									si_vep_info_ann = si_vep_info.split(';')[3].split('SQ=')[1]
									si_vep_info_ann_num = si_vep_info_ann.count(',') + 1
									info_ann_indel = []
								for n in range(si_vep_info_ann_num):
									info_ann_indel.append(n)
									info_ann_indel[n] = si_vep_info_ann.split(',')[n]
									#print(info_ann_indel[n])
									info_ann2read = info_ann_indel[n]
									info_cols = info_ann2read.split('|')
									si_vep_allele = info_cols[0]
									si_vep_cons = info_cols[1]
									si_vep_impact = info_cols[2]
									si_vep_symbol = info_cols[3]
									si_vep_geneid = info_cols[4]
									si_vep_feat_type = info_cols[5]
									si_vep_feature = info_cols[6]
									si_vep_biotype = info_cols[7]
									si_vep_exon = info_cols[8]
									si_vep_intron = info_cols[9]
									si_vep_HGVSc = info_cols[10]
									si_vep_HGVSp = info_cols[11]
									si_vep_cDNA_pos = info_cols[12]
									si_vep_CDS_pos = info_cols[13]
									si_vep_protein_pos = info_cols[14]
									si_vep_aminos = info_cols[15]
									si_vep_codons = info_cols[16]
									si_vep_existing_var = info_cols[17]
									si_vep_distance = info_cols[18]
									si_vep_strand = info_cols[19]
									si_vep_flags = info_cols[20]
									si_vep_symbol_source = info_cols[21]
									si_vep_HGNC_ID = info_cols[22]
									si_vep_tsl = info_cols[23]
									si_vep_appris = info_cols[24]
									si_vep_ccds = info_cols[25]
									si_vep_ensp = info_cols[26]
									si_vep_swissprot = info_cols[27]
									si_vep_trembl = info_cols[28]
									si_vep_uniparc = info_cols[29]
									si_vep_sift = info_cols[30]
									si_vep_domains = info_cols[31]
									si_vep_hgvs_offset = info_cols[32]
									# Reset these just in case
									so_indel2vep1 = ''
									so_indel2vep2 = ''
									so_indel2vep3 = ''
									so_indel2vep4 = ''
									so_indel2vep5 = ''
									so_indel2vep6 = ''
									so_indel2vep7 = ''
									so_indel2vep8 = ''
									so_indel2vep9 = ''
									so_indel2vep10 = ''
									so_indel2vep11 = ''
									so_indel2vep12 = ''
									so_indel2vep13 = ''
									so_indel2vep14 = ''
									so_indel2vep15 = ''
									print('soindel_indel ' + soindel_indel)
									print('si_vep_indel ' + si_vep_indel)
									print('si_vep_impact ' +si_vep_impact)
									if si_vep_impact == 'MODERATE' or si_vep_impact == 'HIGH':
										#print('soindel_indel ' + soindel_indel)
										#print('si_vep_indel ' + si_vep_indel)
										#outfile.write('\n' + so_indel_line_header)
										so_indel2vep1 = '\n' + so_indel_line_header
										#outfile.write(soindel_line + '\n')
										so_indel2vep2 = soindel_line + '\n'
										#outfile.write('\n' + 'VEP Annotation' + '\n')
										so_indel2vep3 = '\n' + 'VEP Annotation' + '\n'
										if si_vep_tool_num != '':
											#outfile.write(si_vep_tool_num + ' (Number of variant callers)' +  '\n')
											so_indel2vep4 = si_vep_tool_num + ' (Number of variant callers)' +  '\n'
										if si_vep_tools != '':
											#outfile.write(si_vep_tools + ' (One letter abbreviations for each somatic-indel-caller)' + '\n')
											so_indel2vep5 = si_vep_tools + ' (One letter abbreviations for each somatic-indel-caller)' + '\n'
										if si_vep_somat == 'SOMATIC':
											#outfile.write('SomaticSeq predicted this variant to be somatic' + '\n')
											so_indel2vep6 = 'SomaticSeq predicted this variant to be somatic' + '\n'
										if si_vep_strand != '':
											#outfile.write('DNA Strand: ' + si_vep_strand + '\n')
											so_indel2vep7 = 'DNA strand: ' + si_vep_strand + '\n'
										if si_vep_sift != '':
											#outfile.write('SIFT Loss-of-function Prediciton: ' + si_vep_sift + '\n')
											so_indel2vep8 = 'SIFT Loss-of-function prediciton: ' + si_vep_sift + '\n'
										if si_vep_feat_type != '':
											so_indel2vep9 = 'Feature type: ' + si_vep_feat_type + '\n'
										if si_vep_feature != '':
											so_indel2vep10 = 'Feature: ' + si_vep_feature + '\n'
										if si_vep_biotype != '':
											so_indel2vep11 = 'Biotype: ' + si_vep_biotype + '\n'
										if si_vep_exon != '':
											so_indel2vep12 = 'Exon: ' + si_vep_exon + '\n'
										if si_vep_ensp != '' or si_vep_swissprot != '' or si_vep_trembl != '' or si_vep_uniparc != '':
											so_indel2vep13 = 'Estimated protein identifiers:' + '\n' + '\t' + 'Ensembl: ' + si_vep_ensp + '\n' + '\t' + 'SwissProt: ' + si_vep_swissprot + '\n' + '\t' + 'TREMBL: ' + si_vep_trembl + '\n' + '\t' + 'UNIPARC: ' + si_vep_uniparc + '\n'
										if si_vep_HGVSp != '':
											so_indel2vep14 = 'Protein alteration (HGVS): ' + si_vep_HGVSp + '\n'
										if si_vep_domains != '':
											#outfile.write('Mutation in protein domains: ' + si_vep_domains + '\n')
											so_indel2vep15 = 'Mutation in protein domains: ' + si_vep_domains + '\n'
										so_indel2vep_fin = so_indel2vep1 + so_indel2vep2 + so_indel2vep3 + so_indel2vep4 + so_indel2vep5 + so_indel2vep6 + so_indel2vep7 + so_indel2vep8 + so_indel2vep9 + so_indel2vep10 + so_indel2vep11 + so_indel2vep12 + so_indel2vep13 + so_indel2vep14 + so_indel2vep15 
										chick_gene_id2somatic_indel2vep[chick_gene_id] = {soindel_indel: so_indel2vep_fin}
										#print(chick_gene_id2somatic_indel2vep[chick_gene_id])
				# Write the somatic Indel infromatation to output file
				if soindel_indel in chick_gene_id2somatic_indel2vep[chick_gene_id]:
					outfile.write(chick_gene_id2somatic_indel2vep[chick_gene_id][soindel_indel])

	# Annotate with GenVisR lolliplots of somatic SNVs and INDELs in gene
	# Tutorial for reportlab: http://www.blog.pythonlibrary.org/2010/03/08/a-simple-step-by-step-reportlab-tutorial/
	# Documentation for reportlab: https://www.reportlab.com/docs/reportlab-userguide.pdf
	

	chick_gene_id
	chick_gene_id2chick_gene_name[chick_gene_id]
######################################













# Annotate the somatic variants at the mutated gene level

python ./scripts/final_reports.py \
./results/somatic_snvs_final_test2.txt

# ./scripts/final_reports.py
######################################
import sys
import re
import os
import subprocess

# Input file
infile = sys.argv[1]

# Reference files:
#chick_gene_file = "/home/users/a.steep/databases/ensembl/galgal5_ensembl_gene_transcript_protein.tsv"
chick_gene_file = "/home/users/a.steep/databases/ensembl/galgal5_ensembl_gene_transcript_protein.tsv"
ortholog_file = "/home/users/a.steep/databases/ensembl/chicken-human_orthologs.txt"
#ncbi2ensembl_file = "/home/users/a.steep/databases/ncbi/gene2ensembl"
ncbi2ensembl_file = "/home/users/a.steep/databases/ncbi/gene2ensembl_uniq.txt"
gene2refseq_file = "/home/users/a.steep/databases/ncbi/refseq/gene_RefSeqGene"
cosmic_cgc_file = "/home/users/a.steep/databases/cosmic/cosmic_CGC_gene_list.txt"
omin_file = "/home/users/a.steep/databases/omin/genemap2.txt"
sosnv_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_final.txt"
soindel_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_indels_final.txt"
ss_vep_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_snvs_final_vep.vcf"
si_vep_file = "/home/proj/MDW_genomics/steepale/mutated_gene_annotation/results/somatic_indels_final_vep.vcf"
birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"


refseq_files = [
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.1.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.2.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.3.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.4.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.5.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.6.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.7.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.8.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.9.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.10.genomic.gbff", \
"/home/users/a.steep/databases/ncbi/refseq/refseqgene.11.genomic.gbff"]

# Conditional variables
step1 = False
step2 = False

# Create empty dictionaries
ann_dict = {}
chick_gene_id2chick_gene_name = {}
chick_gene_id2chick_entrez_gene_id = {}
chick_gene_id2human_gene_id = {}
chick_gene_id2human_entrez_gene_id = {}
chick_gene_id2human_refseq_id = {}
chick_gene_id2human_refseq = {}
chick_gene_id2somatic_snv2vep = {}
chick_gene_id2somatic_indel2vep = {}

# Create a dictionary of vcf files
vcf_file = {}
# Iterate over samples labels (birds) and create dictionary
for bird in open(birds_file):
	bird = bird.rstrip()
	#vcf_file.append(bird)
	vcf_file[bird] = "./data/somaticseq_vcf/" + bird + "_somaticseq_snv_vep.vcf"


# Empty variables
chick_gene_id = ''

# Output file path:
outfile_path = './results/mutated_gene_summaries/'

# Build the appropriate dictionaries based on the input file
for in_line in open(infile):
	if in_line[0] != '#':
		in_line = in_line.rstrip()
		in_cols = in_line.split('\t')
		in_gene_symbol = in_cols[6]
		in_ensembl_gene_id = in_cols[7]
		in_entrez_gene_id = in_cols[8]
		print(len(ann_dict))
		print(in_gene_symbol + '\t' + in_ensembl_gene_id)
		# Start building the annotation dictionaries for annotation purposes
		for line in open(chick_gene_file):
			#print(ann_dict)
			# Start on the correct line
			if line.split('\t')[0] != 'Gene_ID' and in_ensembl_gene_id == line.split('\t')[0]:
				#print(line)
				line = line.rstrip()
				chick_gene_id = line.split('\t')[0]
				chick_transcript_id = line.split('\t')[1]
				chick_pro_id = line.split('\t')[2]
				chick_gene_name = line.split('\t')[3]
				chick_transcript_count = line.split('\t')[4]
				chick_gene_id2chick_gene_name[chick_gene_id] = chick_gene_name
				# Obtain ensembl ortholog gene name and ID
				for orth_line in open(ortholog_file):
					if orth_line.split('\t')[1] == chick_gene_id and orth_line.split('\t')[4].split('\n')[0] == "ortholog_one2one":
						human_gene_id = orth_line.split('\t')[3]
						human_gene_name = orth_line.split('\t')[2]
						# Create an empty dictionary with key value as ensembl gene id
						chick_gene_id2human_gene_id[chick_gene_id] = human_gene_id
						# Obtain Entrez ID
						for ncbi2ensembl_line in open(ncbi2ensembl_file):
							ncbi2ensembl_line = ncbi2ensembl_line.rstrip()
							if ncbi2ensembl_line.split('\t')[1] == chick_gene_id:
								chick_entrez_gene_id = ncbi2ensembl_line.split('\t')[0]
								chick_gene_id2chick_entrez_gene_id[chick_gene_id] = chick_entrez_gene_id
							elif ncbi2ensembl_line.split('\t')[1] == human_gene_id:
								human_entrez_gene_id = ncbi2ensembl_line.split('\t')[0]
								chick_gene_id2human_entrez_gene_id[chick_gene_id] = human_entrez_gene_id



# Start building the output file
for chick_gene_id, values in ann_dict.items():
	chick_gene_id = str(chick_gene_id)
	chick_entrez_gene_id = str(chick_gene_id2chick_entrez_gene_id[chick_gene_id])
	human_ensembl_gene_id = str(chick_gene_id2human_gene_id[chick_gene_id])
	human_entrez_gene_id = str(chick_gene_id2human_entrez_gene_id[chick_gene_id])
	if len(chick_gene_id2chick_gene_name[chick_gene_id]) > 0:
		outfile = open(outfile_path + str(chick_gene_id2chick_gene_name[chick_gene_id]) + '_annotations.txt', 'w')
	elif len(chick_gene_id2chick_gene_name[chick_gene_id]) == 0:
		outfile = open(outfile_path + chick_gene_id + '_annotations.txt', 'w')
	# Output Ensembl gene ID
	outfile.write('Ensembl Chicken Gene ID: ' + chick_gene_id + '\n')
	# print gene name
	if len(chick_gene_id2chick_gene_name[chick_gene_id]) > 0:
		outfile.write('Ensembl Chicken Gene Name: ' + chick_gene_id2chick_gene_name[chick_gene_id] + '\n' + '\n')
	# print refseq gene summary
	if len(chick_gene_id2human_refseq[chick_gene_id]) > 0:
		outfile.write('RefSeq Human Ortholog Summary:' + '\n' + chick_gene_id2human_refseq[chick_gene_id] + '\n' + '\n')

	# Grab COSMIC CGC annotation:
	# for chick_gene_id, values in ann_dict.items():
	#chick_gene_id = str(chick_gene_id) 
	#human_entrez_gene_id = str(chick_gene_id2human_entrez_gene_id[chick_gene_id])
	for cgc_line in open(cosmic_cgc_file):
		cgc_line = cgc_line.rstrip()
		if cgc_line.split('\t')[2] == human_entrez_gene_id:
			cgc_cols = cgc_line.split('\t')
			cgc_symbol = cgc_cols[0]
			cgc_synonyms = cgc_cols[17]
			cgc_gene_name = cgc_cols[1]
			cgc_somatic = cgc_cols[5]
			cgc_germline = cgc_cols[6]
			cgc_som_types = cgc_cols[7]
			cgc_germ_types = cgc_cols[8]
			cgc_cancer_syndrome = cgc_cols[9]
			cgc_tissue = cgc_cols[10]
			cgc_genetics = cgc_cols[11]
			cgc_role = cgc_cols[12]
			cgc_mut_types = cgc_cols[13]
			cgc_trans_part = cgc_cols[14]
			cgc_other_germ = cgc_cols[15]
			cgc_other_syn = cgc_cols[16]
			# Output the CGC info:
			outfile.write('COSMIC Cancer Gene Consensus' + '\n')
			outfile.write(cgc_symbol + '\n')
			outfile.write(cgc_gene_name + '\n')
			outfile.write('Synonyms: ' + cgc_synonyms + '\n')
			if cgc_somatic == 'yes':
				outfile.write('Somatic Mutation Types: ' + cgc_som_types + '\n')
			if cgc_germline == 'yes':
				outfile.write('Germline Mutation Types: ' + cgc_germ_types + '\n')
			if cgc_cancer_syndrome != '':
				outfile.write('Known Cancer Syndromes: ' + cgc_germline + '\n')
			if cgc_tissue != '':
				outfile.write('Tissue Types: ' + cgc_tissue + '\n')
			if cgc_role != '':
				outfile.write('Role of Mutated Gene in Cancer: ' + cgc_role + '\n')
			if cgc_genetics != '':
				outfile.write('Molecular Genetics: ' + cgc_genetics + '\n')
			if cgc_mut_types != '':
				outfile.write('Mutation Types: ' + cgc_mut_types + '\n')
			if cgc_other_germ == 'yes':
				outfile.write('Other Germline Mutations: ' + cgc_other_germ + '\n')
			if cgc_other_syn != '':
				outfile.write('Other Syndrome: ' + cgc_other_syn + '\n')

	# Grab OMIN annotation:
	# for chick_gene_id, values in ann_dict.items():
	#chick_gene_id = str(chick_gene_id)
	for omin_line in open(omin_file):
		if omin_line[0] != '#':
			omin_line = omin_line.rstrip()
			if re.search(human_ensembl_gene_id, omin_line) or re.search('\t'+human_entrez_gene_id+'\t', omin_line):
				omin_cols = omin_line.split('\t')
				omin_symbol = omin_cols[8]
				omin_com = omin_cols[11]
				omin_pheno = omin_cols[12]
				#Output the CGC info:
				outfile.write('\n' + 'OMIN Annotation' + '\n')
				outfile.write(omin_symbol + '\n')
				if omin_com != '':
					outfile.write('General Comments: ' + omin_com + '\n')
				if omin_pheno != '':
					outfile.write('Phenotypes: ' + omin_pheno + '\n')

	# Annotate the Somatic SNV Calls followed by VEP annotations
	outfile.write('\n' + 'Somatic SNVs')
	for sosnv_line in open(sosnv_file):
		so_snv2vep1 = ''
		so_snv2vep2 = ''
		so_snv2vep3 = ''
		so_snv2vep4 = ''
		so_snv2vep5 = ''
		so_snv2vep6 = ''
		so_snv2vep7 = ''
		so_snv2vep8 = ''
		so_snv2vep9 = ''
		so_snv2vep10 = ''
		so_snv2vep11 = ''
		so_snv2vep12 = ''
		so_snv2vep13 = ''
		so_snv2vep14 = ''
		so_snv2vep15 = ''
		if sosnv_line[0] == '#':
			so_snv_line_header = sosnv_line
		if sosnv_line[0] != '#':
			sosnv_line = sosnv_line.rstrip()
			sosnv_cols = sosnv_line.split('\t')
			sosnv_chick_gene_symbol = sosnv_cols[6]
			sosnv_chick_ensembl_gene_id = sosnv_cols[7]
			#sosnv_chick_entrez_gene_id = sosnv_cols[8]
			if sosnv_chick_ensembl_gene_id == chick_gene_id:
				sosnv_chr = sosnv_cols[0]
				sosnv_pos = sosnv_cols[1]
				sosnv_ref = sosnv_cols[2]
				sosnv_alt = sosnv_cols[3]
				# Capture unique snv info in variable
				sosnv_snv = sosnv_chr + sosnv_pos + sosnv_ref + sosnv_alt
				# Capture unique sample info in variable
				sosnv_sample = sosnv_cols[9]
				sosnv_sample_num = sosnv_sample.count('|') + 1
				# Note: Range treats numbers as zero-based
				sample = []
				for n in range(sosnv_sample_num):
					#print(n)
					#print(in_sample)
					#print(in_sample.split('|')[n])
					sample.append(n)
					sample[n] = sosnv_sample.split('|')[n]
					#print('sample[' + str(n) + ']: ' + sample[n])
					# Add additional annotation from vep files
					ss_vep_file2read = vcf_file[sample[n]]
					#print(ss_vep_file2read)
					for ss_vep_line in open(ss_vep_file2read):
						#ss_vep_line = ss_vep_line.rstrip()
						if ss_vep_line[0] != '#': 
							ss_vep_cols = ss_vep_line.split('\t')
							ss_vep_chr = ss_vep_cols[0]
							ss_vep_pos = ss_vep_cols[1]
							ss_vep_ref = ss_vep_cols[3]
							ss_vep_alt = ss_vep_cols[4]
							ss_vep_snv = ss_vep_chr + ss_vep_pos + ss_vep_ref + ss_vep_alt
							if sosnv_snv == ss_vep_snv:
								ss_vep_info = ss_vep_cols[7]
								ss_vep_format = ss_vep_cols[8]
								ss_vep_normal = ss_vep_cols[9]
								ss_vep_tumor = ss_vep_cols[10]
								if re.search('SOMATIC', ss_vep_info.split(';')[0]):
									ss_vep_somat = ss_vep_info.split(';')[0]
								else:
									ss_vep_somat = 'NA'
								if re.search('MVJSDU', ss_vep_info.split(';')[0]):
									ss_vep_tools = ss_vep_info.split(';')[0]
								elif re.search('MVJSDU', ss_vep_info.split(';')[1]):
									ss_vep_tools = ss_vep_info.split(';')[1]
								if re.search('NUM_TOOLS', ss_vep_info.split(';')[1]):
									ss_vep_tool_num = ss_vep_info.split(';')[1]
								elif re.search('NUM_TOOLS', ss_vep_info.split(';')[2]):
									ss_vep_tool_num = ss_vep_info.split(';')[2]
								if re.search('CSQ=', ss_vep_info.split(';')[2]):
									ss_vep_info_ann = ss_vep_info.split(';')[2].split('SQ=')[1]
									ss_vep_info_ann_num = ss_vep_info_ann.count(',') + 1
									info_ann = []
								elif re.search('CSQ=', ss_vep_info.split(';')[3]):
									ss_vep_info_ann = ss_vep_info.split(';')[3].split('SQ=')[1]
									ss_vep_info_ann_num = ss_vep_info_ann.count(',') + 1
									info_ann = []
									for n in range(ss_vep_info_ann_num):
										info_ann.append(n)
										info_ann[n] = ss_vep_info_ann.split(',')[n]
										info_ann2read = info_ann[n]
										info_cols = info_ann2read.split('|')
										ss_vep_allele = info_cols[0]
										ss_vep_cons = info_cols[1]
										ss_vep_impact = info_cols[2]
										ss_vep_symbol = info_cols[3]
										ss_vep_geneid = info_cols[4]
										ss_vep_feat_type = info_cols[5]
										ss_vep_feature = info_cols[6]
										ss_vep_biotype = info_cols[7]
										ss_vep_exon = info_cols[8]
										ss_vep_intron = info_cols[9]
										ss_vep_HGVSc = info_cols[10]
										ss_vep_HGVSp = info_cols[11]
										ss_vep_cDNA_pos = info_cols[12]
										ss_vep_CDS_pos = info_cols[13]
										ss_vep_protein_pos = info_cols[14]
										ss_vep_aminos = info_cols[15]
										ss_vep_codons = info_cols[16]
										ss_vep_existing_var = info_cols[17]
										ss_vep_distance = info_cols[18]
										ss_vep_strand = info_cols[19]
										ss_vep_flags = info_cols[20]
										ss_vep_symbol_source = info_cols[21]
										ss_vep_HGNC_ID = info_cols[22]
										ss_vep_tsl = info_cols[23]
										ss_vep_appris = info_cols[24]
										ss_vep_ccds = info_cols[25]
										ss_vep_ensp = info_cols[26]
										ss_vep_swissprot = info_cols[27]
										ss_vep_trembl = info_cols[28]
										ss_vep_uniparc = info_cols[29]
										ss_vep_sift = info_cols[30]
										ss_vep_domains = info_cols[31]
										ss_vep_hgvs_offset = info_cols[32]
										# Reset these just in case
										so_snv2vep1 = ''
										so_snv2vep2 = ''
										so_snv2vep3 = ''
										so_snv2vep4 = ''
										so_snv2vep5 = ''
										so_snv2vep6 = ''
										so_snv2vep7 = ''
										so_snv2vep8 = ''
										so_snv2vep9 = ''
										so_snv2vep10 = ''
										so_snv2vep11 = ''
										so_snv2vep12 = ''
										so_snv2vep13 = ''
										so_snv2vep14 = ''
										so_snv2vep15 = ''
										if ss_vep_impact == 'MODERATE' or ss_vep_impact == 'HIGH':
											#outfile.write('\n' + so_snv_line_header)
											so_snv2vep1 = '\n' + so_snv_line_header
											#outfile.write(sosnv_line + '\n')
											so_snv2vep2 = sosnv_line + '\n'
											#outfile.write('\n' + 'VEP Annotation' + '\n')
											so_snv2vep3 = '\n' + 'VEP Annotation' + '\n'
											if ss_vep_tool_num != '':
												#outfile.write(ss_vep_tool_num + ' (Number of variant callers)' +  '\n')
												so_snv2vep4 = ss_vep_tool_num + ' (Number of variant callers)' +  '\n'
											if ss_vep_tools != '':
												#outfile.write(ss_vep_tools + ' (One letter abbreviations for each somatic-snv-caller)' + '\n')
												so_snv2vep5 = ss_vep_tools + ' (One letter abbreviations for each somatic-snv-caller)' + '\n'
											if ss_vep_somat == 'SOMATIC':
												#outfile.write('SomaticSeq predicted this variant to be somatic' + '\n')
												so_snv2vep6 = 'SomaticSeq predicted this variant to be somatic' + '\n'
											if ss_vep_strand != '':
												#outfile.write('DNA Strand: ' + ss_vep_strand + '\n')
												so_snv2vep7 = 'DNA strand: ' + ss_vep_strand + '\n'
											if ss_vep_sift != '':
												#outfile.write('SIFT Loss-of-function Prediciton: ' + ss_vep_sift + '\n')
												so_snv2vep8 = 'SIFT Loss-of-function prediciton: ' + ss_vep_sift + '\n'
											if ss_vep_feat_type != '':
												so_snv2vep9 = 'Feature type: ' + ss_vep_feat_type + '\n'
											if ss_vep_feature != '':
												so_snv2vep10 = 'Feature: ' + ss_vep_feature + '\n'
											if ss_vep_biotype != '':
												so_snv2vep11 = 'Biotype: ' + ss_vep_biotype + '\n'
											if ss_vep_exon != '':
												so_snv2vep12 = 'Exon: ' + ss_vep_exon + '\n'
											if ss_vep_ensp != '' or ss_vep_swissprot != '' or ss_vep_trembl != '' or ss_vep_uniparc != '':
												so_snv2vep13 = 'Estimated protein identifiers:' + '\n' + '\t' + 'Ensembl: ' + ss_vep_ensp + '\n' + '\t' + 'SwissProt: ' + ss_vep_swissprot + '\n' + '\t' + 'TREMBL: ' + ss_vep_trembl + '\n' + '\t' + 'UNIPARC: ' + ss_vep_uniparc + '\n'
											if ss_vep_HGVSp != '':
												so_snv2vep14 = 'Protein alteration (HGVS): ' + ss_vep_HGVSp + '\n'
											if ss_vep_domains != '':
												#outfile.write('Mutation in protein domains: ' + ss_vep_domains + '\n')
												so_snv2vep15 = 'Mutation in protein domains: ' + ss_vep_domains + '\n'
											so_snv2vep_fin = so_snv2vep1 + so_snv2vep2 + so_snv2vep3 + so_snv2vep4 + so_snv2vep5 + so_snv2vep6 + so_snv2vep7 + so_snv2vep8 + so_snv2vep9 + so_snv2vep10 + so_snv2vep11 + so_snv2vep12 + so_snv2vep13 + so_snv2vep14 + so_snv2vep15 
											chick_gene_id2somatic_snv2vep[chick_gene_id] = {sosnv_snv: so_snv2vep_fin}
				outfile.write(chick_gene_id2somatic_snv2vep[chick_gene_id][sosnv_snv])

	# Annotate the Somatic Indel Calls followed by VEP annotations
	outfile.write('\n' + 'Somatic INDELs' + '\n')
	for soindel_line in open(soindel_file):
		so_indel2vep1 = ''
		so_indel2vep2 = ''
		so_indel2vep3 = ''
		so_indel2vep4 = ''
		so_indel2vep5 = ''
		so_indel2vep6 = ''
		so_indel2vep7 = ''
		so_indel2vep8 = ''
		so_indel2vep9 = ''
		so_indel2vep10 = ''
		so_indel2vep11 = ''
		so_indel2vep12 = ''
		so_indel2vep13 = ''
		so_indel2vep14 = ''
		so_indel2vep15 = ''
		if soindel_line[0] == '#':
			so_indel_line_header = soindel_line
		if soindel_line[0] != '#':
			soindel_line = soindel_line.rstrip()
			soindel_cols = soindel_line.split('\t')
			soindel_chick_gene_symbol = soindel_cols[6]
			soindel_chick_ensembl_gene_id = soindel_cols[7]
			if soindel_chick_ensembl_gene_id == chick_gene_id:
				soindel_chr = soindel_cols[0]
				soindel_pos = soindel_cols[1]
				soindel_ref = soindel_cols[2]
				soindel_alt = soindel_cols[3]
				# Capture unique indel info in variable
				soindel_indel = soindel_chr + soindel_pos + soindel_ref + soindel_alt
				# Capture unique sample info in variable
				soindel_sample = soindel_cols[9]
				soindel_sample_num = soindel_sample.count('|') + 1
				# Note: Range treats numbers as zero-based
				sample_indel = []
				for n in range(soindel_sample_num):
					#print(n)
					#print(in_sample)
					#print(in_sample.split('|')[n])
					sample_indel.append(n)
					sample_indel[n] = soindel_sample.split('|')[n]
					#print('sample[' + str(n) + ']: ' + sample_indel[n])
					# Add additional annotation from vep files
					si_vep_file2read = vcf_file[sample_indel[n]]
					#print(si_vep_file2read)
					for si_vep_line in open(si_vep_file2read):
						#si_vep_line = si_vep_line.rstrip()
						if si_vep_line[0] != '#': 
							si_vep_cols = si_vep_line.split('\t')
							si_vep_chr = si_vep_cols[0]
							si_vep_pos = si_vep_cols[1]
							si_vep_ref = si_vep_cols[3]
							si_vep_alt = si_vep_cols[4]
							si_vep_indel = si_vep_chr + si_vep_pos + si_vep_ref + si_vep_alt
							if soindel_indel == si_vep_indel:
								si_vep_info = si_vep_cols[7]
								si_vep_format = si_vep_cols[8]
								si_vep_normal = si_vep_cols[9]
								si_vep_tumor = si_vep_cols[10]
								if re.search('SOMATIC', si_vep_info.split(';')[0]):
									si_vep_somat = si_vep_info.split(';')[0]
								else:
									si_vep_somat = 'NA'
								if re.search('MVDL', si_vep_info.split(';')[0]):
									si_vep_tools = si_vep_info.split(';')[0]
								elif re.search('MVDL', si_vep_info.split(';')[1]):
									si_vep_tools = si_vep_info.split(';')[1]
								if re.search('NUM_TOOLS', si_vep_info.split(';')[1]):
									si_vep_tool_num = si_vep_info.split(';')[1]
								elif re.search('NUM_TOOLS', si_vep_info.split(';')[2]):
									si_vep_tool_num = si_vep_info.split(';')[2]
								if re.search('CSQ=', si_vep_info.split(';')[2]):
									si_vep_info_ann = si_vep_info.split(';')[2].split('SQ=')[1]
									si_vep_info_ann_num = si_vep_info_ann.count(',') + 1
									info_ann_indel = []
								elif re.search('CSQ=', si_vep_info.split(';')[3]):
									si_vep_info_ann = si_vep_info.split(';')[3].split('SQ=')[1]
									si_vep_info_ann_num = si_vep_info_ann.count(',') + 1
									info_ann_indel = []
									for n in range(si_vep_info_ann_num):
										info_ann_indel.append(n)
										info_ann_indel[n] = si_vep_info_ann.split(',')[n]
										print(info_ann_indel[n])
										info_ann2read = info_ann_indel[n]
										info_cols = info_ann2read.split('|')
										si_vep_allele = info_cols[0]
										si_vep_cons = info_cols[1]
										si_vep_impact = info_cols[2]
										si_vep_symbol = info_cols[3]
										si_vep_geneid = info_cols[4]
										si_vep_feat_type = info_cols[5]
										si_vep_feature = info_cols[6]
										si_vep_biotype = info_cols[7]
										si_vep_exon = info_cols[8]
										si_vep_intron = info_cols[9]
										si_vep_HGVSc = info_cols[10]
										si_vep_HGVSp = info_cols[11]
										si_vep_cDNA_pos = info_cols[12]
										si_vep_CDS_pos = info_cols[13]
										si_vep_protein_pos = info_cols[14]
										si_vep_aminos = info_cols[15]
										si_vep_codons = info_cols[16]
										si_vep_existing_var = info_cols[17]
										si_vep_distance = info_cols[18]
										si_vep_strand = info_cols[19]
										si_vep_flags = info_cols[20]
										si_vep_symbol_source = info_cols[21]
										si_vep_HGNC_ID = info_cols[22]
										si_vep_tsl = info_cols[23]
										si_vep_appris = info_cols[24]
										si_vep_ccds = info_cols[25]
										si_vep_ensp = info_cols[26]
										si_vep_swissprot = info_cols[27]
										si_vep_trembl = info_cols[28]
										si_vep_uniparc = info_cols[29]
										si_vep_sift = info_cols[30]
										si_vep_domains = info_cols[31]
										si_vep_hgvs_offset = info_cols[32]
										# Reset these just in case
										so_indel2vep1 = ''
										so_indel2vep2 = ''
										so_indel2vep3 = ''
										so_indel2vep4 = ''
										so_indel2vep5 = ''
										so_indel2vep6 = ''
										so_indel2vep7 = ''
										so_indel2vep8 = ''
										so_indel2vep9 = ''
										so_indel2vep10 = ''
										so_indel2vep11 = ''
										so_indel2vep12 = ''
										so_indel2vep13 = ''
										so_indel2vep14 = ''
										so_indel2vep15 = ''
										if si_vep_impact == 'MODERATE' or si_vep_impact == 'HIGH':
											#outfile.write('\n' + so_indel_line_header)
											so_indel2vep1 = '\n' + so_indel_line_header
											#outfile.write(soindel_line + '\n')
											so_indel2vep2 = soindel_line + '\n'
											#outfile.write('\n' + 'VEP Annotation' + '\n')
											so_indel2vep3 = '\n' + 'VEP Annotation' + '\n'
											if si_vep_tool_num != '':
												#outfile.write(si_vep_tool_num + ' (Number of variant callers)' +  '\n')
												so_indel2vep4 = si_vep_tool_num + ' (Number of variant callers)' +  '\n'
											if si_vep_tools != '':
												#outfile.write(si_vep_tools + ' (One letter abbreviations for each somatic-indel-caller)' + '\n')
												so_indel2vep5 = si_vep_tools + ' (One letter abbreviations for each somatic-indel-caller)' + '\n'
											if si_vep_somat == 'SOMATIC':
												#outfile.write('SomaticSeq predicted this variant to be somatic' + '\n')
												so_indel2vep6 = 'SomaticSeq predicted this variant to be somatic' + '\n'
											if si_vep_strand != '':
												#outfile.write('DNA Strand: ' + si_vep_strand + '\n')
												so_indel2vep7 = 'DNA strand: ' + si_vep_strand + '\n'
											if si_vep_sift != '':
												#outfile.write('SIFT Loss-of-function Prediciton: ' + si_vep_sift + '\n')
												so_indel2vep8 = 'SIFT Loss-of-function prediciton: ' + si_vep_sift + '\n'
											if si_vep_feat_type != '':
												so_indel2vep9 = 'Feature type: ' + si_vep_feat_type + '\n'
											if si_vep_feature != '':
												so_indel2vep10 = 'Feature: ' + si_vep_feature + '\n'
											if si_vep_biotype != '':
												so_indel2vep11 = 'Biotype: ' + si_vep_biotype + '\n'
											if si_vep_exon != '':
												so_indel2vep12 = 'Exon: ' + si_vep_exon + '\n'
											if si_vep_ensp != '' or si_vep_swissprot != '' or si_vep_trembl != '' or si_vep_uniparc != '':
												so_indel2vep13 = 'Estimated protein identifiers:' + '\n' + '\t' + 'Ensembl: ' + si_vep_ensp + '\n' + '\t' + 'SwissProt: ' + si_vep_swissprot + '\n' + '\t' + 'TREMBL: ' + si_vep_trembl + '\n' + '\t' + 'UNIPARC: ' + si_vep_uniparc + '\n'
											if si_vep_HGVSp != '':
												so_indel2vep14 = 'Protein alteration (HGVS): ' + si_vep_HGVSp + '\n'
											if si_vep_domains != '':
												#outfile.write('Mutation in protein domains: ' + si_vep_domains + '\n')
												so_indel2vep15 = 'Mutation in protein domains: ' + si_vep_domains + '\n'
											so_indel2vep_fin = so_indel2vep1 + so_indel2vep2 + so_indel2vep3 + so_indel2vep4 + so_indel2vep5 + so_indel2vep6 + so_indel2vep7 + so_indel2vep8 + so_indel2vep9 + so_indel2vep10 + so_indel2vep11 + so_indel2vep12 + so_indel2vep13 + so_indel2vep14 + so_indel2vep15 
											chick_gene_id2somatic_indel2vep[chick_gene_id] = {soindel_indel: so_indel2vep_fin}
											print(so_indel2vep_fin)
				#outfile.write(chick_gene_id2somatic_indel2vep[chick_gene_id][soindel_indel])


######################################



































#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#


## Check for individually called somatic INDELs on tumors, germlines, parental lines
#grep -v '^CHROM' ./data/all_nonsyn_snvs_indels.txt | \
#awk 'length($3) > 1 || length($4) > 1 {print $0}' | \
#sort | uniq > ./data/all_nonsyn_indels_to_read.txt
#
## Replace all of the samples ID's using an array and sed to replace the word only strings in file
#declare -A samples
#samples["S1"]="738-1_S1"
#samples["S2"]="741-1_S2"
#samples["S3"]="756-3_S3"
#samples["S4"]="766-1_S4"
#samples["S5"]="798-1_S5"
#samples["S6"]="833-1_S6"
#samples["S7"]="834-2_S7"
#samples["S8"]="855-1_S8"
#samples["S9"]="863-1_S9"
#samples["S10"]="918-3_S10"
#samples["S11"]="927-2_S11"
#samples["S12"]="834-2_2_S12"
#samples["S13"]="911-1_2_S13"
#samples["S14"]="777-3_S14"
#samples["S15"]="787-2_S15"
#samples["S16"]="788-1_S16"
#samples["S17"]="794-1_S17"
#samples["S18"]="835-1_S18"
#samples["S19"]="841-3_S19"
#samples["S20"]="842-2_S20"
#samples["S21"]="884-2_S21"
#samples["S22"]="901-2_S22"
#samples["S23"]="906-1_S23"
#samples["S24"]="911-1_S24"
#samples["S25"]="842-2_2_S25"
#samples["S26"]="901-2_2_S26"
#for n in "${!samples[@]}"
#do
#echo "$n - ${samples[$n]}"
#sed -i "s/\b$n\b/${samples[$n]}/g " ./data/all_nonsyn_indels_to_read.txt
#done
#
#rm indels_germline_samples_pass.txt
#rm indels_tumor_samples_pass.txt
#rm ./data/filter/*.int
#rm ./data/filter/*.test
#echo "Counts" > ./indels_tumor_counts.txt
#echo "Counts" > ./indels_germline_counts.txt
#echo "FAIL" > ./data/somatic_indelss_fail_germline_sample_freq.txt
## Attempt 2016/12/15
## Print the header for variants in pass and fail files
## Header for filtered variants that passed (pass file 1)
#echo "#Somatic indels that passed custom filtering" > ./data/somatic_indels_pass.txt
#echo "#Filters include:" >> ./data/somatic_indels_pass.txt
##echo "#Somatic indels cannot appear in more than 8 germline samples" >> ./data/somatic_indels_pass.txt
##echo "#Variant allele must have at least 2 read bases" >> ./data/somatic_indels_pass.txt
##echo "#Variant allele frequency must be at least 10%" >> ./data/somatic_indels_pass.txt
## Header for filtered variants that passed (final pass file)
#echo "#Somatic indels that passed custom filtering" > ./data/somatic_indels_pass_final.txt
#echo "#Filters include:" >> ./data/somatic_indels_pass_final.txt
##echo "#Variant cannot appear in more than 8 germline samples" >> ./data/somatic_indels_pass_final.txt
##echo "#Variant allele must have at least 2 read bases" >> ./data/somatic_indels_pass_final.txt
##echo "#Variant allele frequency must be at least 10%" >> ./data/somatic_indels_pass_final.txt
##echo "#Variant must appear in at least one tumor samples after variant allele frequency and variant coverage filters" >> ./data/somatic_indels_pass_final.txt
##echo "#Variant must have a coverage across entire cohort of tumor and germline bam files of greater than 150 base reads total (unique filter due to spots in genome of low coverage)" >> ./data/somatic_indels_pass_final.txt
#
## Header for filtered variants that did not pass 
#echo -e "#Somatic indels that did not pass variant allele count filter\n" > ./data/somatic_indels_fail_allele_count.txt
#echo -e "#Somatic indels that did not pass variant allele frequency filter\n" > ./data/somatic_indels_fail_vaf.txt
#echo -e "#Somatic indels that did not pass tumor sample frequency threshold\n" > ./data/somatic_indels_fail_tumor_sample_freq.txt
#echo -e "#Somatic indels that did not pass germline sample frequency threshold\n" > ./data/somatic_indels_fail_germline_sample_freq.txt
#
## Reading each unique somatic variant in while loop (input file at very end of loop)
#while read line
#do
#chr=`echo $line | cut -d ' ' -f 1`
#pos=`echo $line | cut -d ' ' -f 2`
#ref=`echo $line | cut -d ' ' -f 3`
## Length of the reference allele
#l_ref=`expr length $ref`
#
## check alt allele for comma, meaning 2 alt alleles. I customly checked these and one candidate of interest (FAN1) was a germline SNP
#alt_int=`echo $line | cut -d ' ' -f 4`
#if (echo $alt_int | grep -q ','); then
#alt="Z"
#else
#alt=`echo $line | cut -d ' ' -f 4`
## Length of the alternative allele
#l_alt=`expr length $alt`
#fi
#
## Length of insertion according to samtools
## Arithmetic in POSIX shells is done with $ and double parentheses
## $(()) is preferable since it avoids a fork/execute for the expr command
#l_st_ins="$(($l_alt - $l_ref))"
## Substring insertion from the right side, AKA the sequence of insertion in samtools mpileup
#seq_st_ins=`echo -e "+$l_st_ins${alt:(-$l_st_ins)}"`
## Length of deletion according to samtools
#l_st_del="$(($l_ref - $l_alt))"
#l_st_del4seq=$((l_st_del+1))
#seq_del=`seq -s "N" $l_st_del4seq | sed 's/[0-9]//g'`
#seq_st_del=`echo -e "-$l_st_del$seq_del"`
#
## Variant sample
#vs=`echo $line | cut -d ' ' -f 10`
## Variant with annotation
#var=`echo $line`
## The gene symbol of gene associated with variant
#symbol=`echo "$var" | cut -d " " -f 7`
## File name of variant
#fv=`echo -e "$var" | sed 's/ /_/g'`
## Create file to count number of somatic samples containing variant, allows files to have a 0 count
#touch "./data/filter/"$fv"_tumor.test"
## Create file to count number of germline samples containing variant, allows files to have a 0 count
#touch "./data/filter/"$fv"_germline.test"
## Create file to count (2nd count) number of somatic samples containing variant, allows files to have a 0 count
#touch ./data/filter/tumor_count.int
## Create file to count (2nd count) number of germline samples containing variant, allows files to have a 0 count
#touch ./data/filter/germline_count.int
#
#echo -e "\n$var"  >> ./data/filter/length.int
#echo -e "REF: $ref"  >> ./data/filter/length.int
#echo -e "ALT: $alt"  >> ./data/filter/length.int
#echo -e "Insertion Length: $l_st_ins"  >> ./data/filter/length.int
#echo -e "Insertion Sequence: $seq_st_ins"  >> ./data/filter/length.int
#echo -e "Deletion Length: $l_st_del" >> ./data/filter/length.int
#echo -e "Deletion Sequence: $seq_st_del"  >> ./data/filter/length.int
#
## Search each tumor bam for each somatic called insertions and deletions
## Create zero value for sum of coverage of tumor variant sites
#tcovsum=0
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
# CORE VARIABLES
# CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## Samtools mpileup output: CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
## Coverage
#cov=`echo -e "$mpu" | cut -f4`
#cov="${cov:-0}"
## Add coverage to the sum of coverage
#tcovsum=`expr $tcovsum + $cov`
#
## Place somaticly verified variants in file so line number corresponds to number of tumor samples that contain varaint
#if [ "$l_alt" -gt "1" ] && (echo $int | grep -q "$seq_st_ins"); then
#echo -e "$s\t$mpu" >> "./data/filter/"$fv"_tumor.test"
#elif [ "$l_ref" -gt "1" ] && (echo $int | grep -q \\"$seq_st_del"); then
#echo -e "$s\t$mpu" >> "./data/filter/"$fv"_tumor.test"
#fi
#done
#
## Search each germline bam for each somatic called insertion and deletion
## Create zero value for sum of coverage of tumor variant sites
#gcovsum=0
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[0]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## Samtools mpileup output: CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
# Coverage
#cov=`echo -e "$mpu" | cut -f4`
#cov="${cov:-0}"
## Add coverage to the sum of coverage
#fcovsum=`expr $gcovsum + $cov`
## Place somatically called variants  that appear in germline samples in file so line number corresponds to number of germline samples that contain varaint
#if [ "$l_alt" -gt "1" ] && (echo $int | grep -q "$seq_st_ins"); then
#echo -e "$s\t$mpu" >> "./data/filter/"$fv"_germline.test"
#elif [ "$l_ref" -gt "1" ] && (echo $int | grep -q \\"$seq_st_del"); then
#echo -e "$s\t$mpu" >> "./data/filter/"$fv"_germline.test"
#fi
#done
#
## Add the sum of coverage on all tumor and germline samples. This will be used to filter out variants with inadequate
## coverage across cohort of samples
#covsum=`expr $tcovsum + $gcovsum`
#
## Number of tumor samples with variant
#tsnum=`wc -l "./data/filter/"$fv"_tumor.test" | cut -d ' ' -f1`
#echo -e "$tsnum $fv" >> ./tumor_counts.txt
## Number of germline samples with variant
#gsnum=`wc -l "./data/filter/"$fv"_germline.test" | cut -d ' ' -f1`
#echo -e "$tsnum $fv" >> ./germline_counts.txt
#
## Print the header for variants in pass file, (only if there is a tumor sample with called variant)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] ; then
#echo -e "\nVariant" | tee ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#echo "$var" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#echo "Tumor Samples Containing Variant" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#fi
## Print the header for each variant in fail allele filter file
#echo -e "\nVariant" >> ./data/somatic_indels_fail_allele_count.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_indels_fail_allele_count.txt
#echo "$var" >> ./data/somatic_indels_fail_allele_count.txt
#echo "Tumor Samples Containing Variant" >> ./data/somatic_indels_fail_allele_count.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_indels_fail_allele_count.txt
## Print the header for each variant in the fail variant allele frequency file
#echo -e "\nVariant" >> ./data/somatic_indels_fail_vaf.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_indels_fail_vaf.txt
#echo "$var" >> ./data/somatic_indels_fail_vaf.txt
#echo "Tumor Samples Containing Variant" >> ./data/somatic_indels_fail_vaf.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_indels_fail_vaf.txt
## Print the header for each variant in the fail germline sample frequency file
#echo -e "\nVariant" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#echo -e "CHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#echo "$var" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#echo "Germline Samples Containing Variant" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#
## Search each tumor bam for each somatic called variant
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
## CORE VARIABLES
## CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
## Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
## CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`
#
## FILTER VARIABLES
## Variant allele count
#vcount_ins=`echo $int | grep -o "$seq_st_ins" | wc -l`
#vcount_del=`echo $int | grep -o -- "$seq_st_del" | wc -l`
#
## Coverage assigned a value even if mpu variable is either empty or is undefined
#cov=`echo -e "$mpu" | cut -f 4`
#cov="${cov:-1000000}"
## Variant allele frequency even if mpu variable is either empty or is undefined
#vaf_ins=`echo "scale=2;$vcount_ins/$cov" | bc`
#vaf_ins="${vaf_ins:-0}"
#vaf_del=`echo "scale=2;$vcount_del/$cov" | bc`
#vaf_del="${vaf_del:-0}"
## Variant allele frequency threshold
#vaf_thres=`echo "scale=2;1/20" | bc`
#
#echo -e "vcount_del: $vcount_del" >> ./data/somatic_indels_fail_allele_count.txt
#echo -e "seq_st_del: $seq_st_del" >> ./data/somatic_indels_fail_allele_count.txt
#
#
## Filters applying to insertions
#if [ "$l_alt" -gt "1" ]; then
## Filter variants that contain less than 1 alternative allele
#if [ $vcount_ins -le "0" ]; then
#echo -e "$s\t$mpu\t$vcount_ins\t$vaf_ins" >> ./data/somatic_indels_fail_allele_count.txt
#echo -e "Variant Allele Count: $vcount_ins" >> ./data/somatic_indels_fail_allele_count.txt
#
## Filter variants that contain a variant allele frequency less than variant allele frequency theshold (5%)
#elif (( $(echo "$vaf_ins < $vaf_thres" | bc -l) )); then
#echo -e "$s\t$mpu\t$vcount_ins\t$vaf_ins" >> ./data/somatic_indels_fail_vaf.txt
#echo -e "Variant Allele Frequency: $vaf_ins" >> ./data/somatic_indels_fail_vaf.txt
#
# Filter variant that do not show a variant allele in any tumor samples
# Redundent filter with current settings
#elif [ "$tsnum" -le "0" ]; then
#echo -e "$tsnum $fv" >> ./data/somatic_indels_fail_tumor_sample_freq.txt
#
## Filter variants that appear in greater than 8 germline samples
#elif [ "$gsnum" -gt "8" ]; then
#echo -e "$gsnum $fv" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#
## Print the variables that passed all filters
#else
#echo -e "$s\t$mpu\t$vcount_ins\t$vaf_ins" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#fi
#fi
#
## Filters applying to deletions
#if [ "$l_ref" -gt "1" ]; then
## Filter variants that contain less than 1 alternative allele
#if [ $vcount_del -le "0" ]; then
#echo -e "$s\t$mpu\t$vcount_del\t$vaf_del" >> ./data/somatic_indels_fail_allele_count.txt
#echo -e "Variant Allele Count: $vcount_del" >> ./data/somatic_indels_fail_allele_count.txt
#
## Filter variants that contain a variant allele frequency less than variant allele frequency theshold (5%)
#elif (( $(echo "$vaf_del < $vaf_thres" | bc -l) )); then
#echo -e "$s\t$mpu\t$vcount_del\t$vaf_del" >> ./data/somatic_indels_fail_vaf.txt
#echo -e "Variant Allele Frequency: $vaf_del" >> ./data/somatic_indels_fail_vaf.txt
#
## Filter variant that do not show a variant allele in any tumor samples
## Redundent filter with current settings
#elif [ "$tsnum" -le "0" ]; then
#echo -e "$tsnum $fv" >> ./data/somatic_indels_fail_tumor_sample_freq.txt
#
## Filter variants that appear in greater than 8 germline samples
#elif [ "$gsnum" -gt "8" ]; then
#echo -e "$gsnum $fv" >> ./data/somatic_indels_fail_germline_sample_freq.txt
#
## Print the variables that passed all filters
#else
#echo -e "$s\t$mpu\t$vcount_del\t$vaf_del" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#fi
#fi
#done 
#done <./data/all_nonsyn_indels_to_read.txt
#
#
#
## Place holder to allow for counting of tumor samples with variants (2nd count)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ]; then
#echo -e "----------" | tee -a ./data/filter/tumor_count.int >> ./data/somatic_indels_pass.txt
#fi
#
## Count the number of tumor samples that passed the test
#echo "$var" >> tumor_samples_pass.txt
#echo "Tumor Samples That Passed Filters" >> tumor_samples_pass.txt
#tsnum2=`sed -n '/^Tumor/,/^---/p' ./data/filter/tumor_count.int | grep -v -e "^Tumor" -e "^---" -e "^SAMPLE" | wc -l`
#tscalls=`sed -n '/^Tumor/,/^---/p' ./data/filter/tumor_count.int | grep -v -e "^Tumor" -e "^---" -e "^SAMPLE"`
#tscalls_tsf=`echo -e "$tscalls" | sed "s/$/\t$tsnum2/g" | sed "s/^/LINE_T\t/"`
#
#echo -e "$tnum2" >> tumor_samples_pass.txt
#
## Print the header and variants in FINAL pass file, (only if there is a tumor sample with called variant)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
#echo -e "\nVariant" >> ./data/somatic_indels_pass_final.txt
#echo -e "LINE_ID\tCHROM\tPOS\tREF\tALT\tMUT\tIMPACT\tSYMBOL\tENSEMBL\tENTREZ\tSAMPLE" >> ./data/somatic_indels_pass_final.txt
#echo -e "LINE_V $var" >> ./data/somatic_indels_pass_final.txt
#echo -e "Tumor Samples Containing Variant" >> ./data/somatic_indels_pass_final.txt
#echo -e "LINE_ID\tSAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF\tTSF" >> ./data/somatic_indels_pass_final.txt
#echo -e "$tscalls_tsf" >> ./data/somatic_indels_pass_final.txt
#fi

# Print the header for germline samples called in pass file (pass file 1)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ]; then
#echo "Germline Samples Containing Variant" | tee ./data/filter/germline_count.int >> ./data/somatic_indels_pass.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" | tee -a ./data/filter/germline_count.int >> ./data/somatic_indels_pass.txt
#fi

# Search each germline bam for each somatic called variant
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/*-[0]*_S*_Bwa_RG_dedupped_realigned.bam`
#do
# CORE VARIABLES
# CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
# Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
# CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`

# FILTER VARIABLES
# Variant allele count
#vcount=`echo $int | grep -o "$alt" | wc -l`
# Coverage assigned a value even if mpu variable is either empty or is undefined
#cov=`echo -e "$mpu" | cut -f 4`
#cov="${cov:-1000000}"
# Variant allele frequency even if mpu variable is either empty or is undefined
#vaf=`echo "scale=2;$vcount/$cov" | bc`
#vaf="${vaf:-0}"
# Variant allele frequency threshold
#vaf_thres=`echo "scale=2;1/10" | bc`

#echo -e "gsnum: $gsnum" >> ./gsnum.txt

# Filter variants that contain less than 2 alternative alleles
#if [ $vcount -le "1" ]; then
#echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_allele_count.txt
#echo -e "Variant Allele Count: $vcount" >> ./data/somatic_SNVs_fail_allele_count.txt

# Filter variants that contain a variant allele frequency less than theshold (5%)
#elif (( $(echo "$vaf < $vaf_thres" | bc -l) )); then
#echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_vaf.txt
#echo -e "Variant Allele Frequency: $vaf" >> ./data/somatic_SNVs_fail_vaf.txt

# Filter variants that appear in 9 or more germline samples contain
#elif [ "$gsnum" -gt "8" ]; then
#echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_SNVs_fail_germline_sample_freq.txt

# Print the variables that passed all filters
#else
#echo -e "$s\t$mpu\t$vcount\t$vaf" | tee -a ./data/filter/germline_count.int >> ./data/somatic_indels_pass.txt
#fi
#done

# Place holder to allow for counting of germline samples with variants (2nd count)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ]; then
#echo -e "----------" | tee -a ./data/filter/germline_count.int >> ./data/somatic_indels_pass.txt
#fi

# Count the number of germline samples that passed the test
#echo "$var" >> germline_samples_pass.txt
#echo "Germline Samples That Passed Filters" >> germline_samples_pass.txt
#gsnum2=`sed -n '/^Germline/,/^---/p' ./data/filter/germline_count.int | grep -v -e "^Germline" -e "^---" -e "^SAMPLE" | wc -l`
#gscalls=`sed -n '/^Germline/,/^---/p' ./data/filter/germline_count.int | grep -v -e "^Germline" -e "^---" -e "^SAMPLE"`
#gscalls_gsf=`echo -e "$gscalls" | sed "s/$/\t$gsnum2/g"`
#cat ./data/filter/germline_count.int >> germline.txt
#echo -e "$gnum2" >> germline_samples_pass.txt

# Print the header and variants for germline samples called in pass file (final pass file)
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$gsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
#echo "Germline Samples Containing Variant" >> ./data/somatic_indels_pass_final.txt
#echo -e "LINE_ID\tSAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF\tGSF" >> ./data/somatic_indels_pass_final.txt
#echo -e "LINE_G\t$gscalls_gsf" >> ./data/somatic_indels_pass_final.txt
#fi

# Print the parental header in FINAL pass file
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
#echo "Parental Lines Containing Variant" >> ./data/somatic_indels_pass_final.txt
#echo -e "SAMPLE\tCHROM\tPOS\tREF\tCOV\tBASES\tQUAL\tVAC\tVAF" >> ./data/somatic_indels_pass_final.txt
#fi

# Search each parental line bam for each somatic called variant
#for bam in `ls -1 /home/proj/MDW_genomics/xu/final_bam/00268[3-4]_Line-[6-7]_Bwa_RG_dedupped_realigned.bam`
#do
# CORE VARIABLES
# CHROM, POS, REF, COV, BASES, QUAL
#mpu=`samtools mpileup -r $chr:$pos-$pos $bam`
# Tumor sample
#s=`echo "$bam" | xargs -i basename {} | sed 's/_Bwa_RG_dedupped_realigned.bam//'`
# CHROM, POS, READ_BASES
#int=`echo $mpu | cut -d ' ' -f 1,2,5 | tr '[:lower:]' '[:upper:]'`

# FILTER VARIABLES
# Variant allele count
#vcount=`echo $int | grep -o "$alt" | wc -l`
# Coverage assigned a value even if mpu variable is either empty or is undefined
#cov=`echo -e "$mpu" | cut -f 4`
#cov="${cov:-1000000}"
# Variant allele frequency even if mpu variable is either empty or is undefined
#vaf=`echo "scale=2;$vcount/$cov" | bc`
#vaf="${vaf:-0}"
# Variant allele frequency threshold
#vaf_thres=`echo "scale=2;1/10" | bc`

# Filter only calls that will appear in file due to previous filter of somatic calls (":" is linux equivalent to Python's "PASS)
# Print the variables that passed all filters
#if [ "$tsnum" -ge "1" ] && [ "$gsnum" -le "8" ] && [ "$tsnum2" -ge "1" ] && [ "$covsum" -gt "150" ]; then
#echo -e "$s\t$mpu\t$vcount\t$vaf" >> ./data/somatic_indels_pass_final.txt
#fi
#done
#done <./data/all_nonsyn_indels_to_read.txt








7	017834-2	+/lower	
12	017834-2_2	+/lower

20	017842-2	+/none
25	017842-2_2	+/none

22	017901-2	+/+
26	017901-2_2	+/+

13	017911-1_2	
24	017911-1	

3 017756-3	-/-
8 017855-1	-/+


WNT investigation

missense_variant        MODERATE        WNT3    ENSGALG00000001079
missense_variant        MODERATE        WNT5B   ENSGALG00000012998
2 2523061 AT	A
High confidence sample in S9

# Look at very specific positions in the BAM file

find /home/proj/MDW_genomics/xu/final_bam/ -name '*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "samtools view -h -b /home/proj/MDW_genomics/xu/final_bam/{}_Bwa_RG_dedupped_realigned.bam 2:2523051-2523071 > /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/WNT3/{}_2:2523051-2523071_WNT3.bam"

find /home/proj/MDW_genomics/xu/final_bam/ -name '*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "samtools index /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/WNT3/{}_2:2523051-2523071_WNT3.bam"


rsync -avp a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/WNT3/* /Users/Alec/Documents/Bioinformatics/MDV_Project/mutated_gene_annotation/WNT3/

7 caller inquiry
S9
S12
S15
S16
S18
S21
S22
S25
S26

Genome viewer investigation (Tumour/Normal)
line6 -
line7 +
6x7 -
S1 -/-
S2 -/-
S3 +/-
S4 +/-
S5 -/-
S6 -/+ (caution)
S7 -/-
S8 +/-
S9 +/-
S10 +/+
S11 +/-
S12 +/-
S13 +/-
S14 +/-
S15 +/- (interesting finding in control)
S16 +/+ (higher frequency in tumour)
S17 -/+ (caution)
S18 +/+ (high frequency in tumour)
S19 -/-
S20 +/+ (high frequency in tumour) 
S21 +/-
S22 +/+ (high frequency in tumour)
S23 +/-
S24 +/-
S25 +/+ (high frequency in tumour)
S26 -/+ (caution)

Conclusion: This could be a germline variant and somatic variant. It seems to be more present in tumours than in
matched germline samples. The mutation would likely need to be a GOF mutation given RNA expression and that WNT usually
acts as an oncogene. Also, note that the single base deletion comes right before a series of Ts. Need to investigate
where exactly this mutation hits in WNT3 and determine if it could be a GOF mutation.

Potential driver. 

Need to investigate specific mutation (GOF?) and compare RNA levels (predicted not to change)
########################################
IKZF1

Variant:
2 80972152 A AACT 
HC Calls:
S10
LC Calls:
S10
Manual:
S10
None in controls

find /home/proj/MDW_genomics/xu/final_bam/ -name '*-0_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972152-80972152 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972152-80972152 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

Variant:
2 80972149 TGTAACTACGCCTGCCGGCGCA T
HC Calls:
S13
S24
LC Calls:
S13
S24
Manual:
S13
S24
None in controls

# examine the controls
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-0_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972149-80972149 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972149-80972149 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

Variant:
2 80972101 C T
HC Calls:
S14
S22
LC Calls:
S14
S22
S26
Manual examination:
S14
S26
S22
None in controls

# examine the controls
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-0_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972101-80972101 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972101-80972101 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

Variant:
2 80972104 C T
HC Calls:
S20
LC Calls:
S20
S25
Manual:
None in controls
S25
S20
S11?

# examine the controls
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-0_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972104-80972104 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972104-80972104 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

Variant:
2 80972116 C T
HC Calls:
S22
S26
LC Calls:
S22
S26
Manual:
None in controls
S26
S22

# examine the controls
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-0_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972116-80972116 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972116-80972116 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

Variant:
2 80972118 C G
HC Calls:
S3
LC Calls:
S3
Manual:
S3

# examine the controls
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-0_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972118-80972118 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972118-80972118 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# examine the tumours
find /home/proj/MDW_genomics/xu/final_bam/ -name '*-[1-9]*_S*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "echo {}; samtools mpileup -r 2:80972100-80972150 /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam | column -t"

# Create tiny bam files (won't need to do this in the future)
find /home/proj/MDW_genomics/xu/final_bam/ -name '*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "samtools view -h -b /home/proj/MDW_genomics/xu/final_bam/{}_Bwa_RG_dedupped_realigned.bam 2:80972000-80972300 > /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam"

find /home/proj/MDW_genomics/xu/final_bam/ -name '*_Bwa_RG_dedupped_realigned.bam' | \
xargs -i basename {} | \
sed 's/_Bwa_RG_dedupped_realigned.bam//' | \
sort | uniq | \
xargs -i sh -c "samtools index /home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/{}_2:80972000-80972300_IKZF1.bam"

rsync -avp a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/mutated_gene_annotation/data/IKZF1/* /Users/Alec/Documents/Bioinformatics/MDV_Project/mutated_gene_annotation/IKZF1/

# Get RNA gene read counts for Ikaros
Sample	Read Count
017733 7761
017748 7914
017820	5914
017824	10042
017936	11698
017939	11334
017945	9110
017947	10822
017738-1	510
017741-1	5640
017766-1	6225
017777-3	11083
017787-2	10499
017794-1	5067
017798-1_1	8572
017798-1_2	9622
017833-1	8775                         
017835-1	4336
017841-3	1979
017842-2_1	11065
017842-2_2	13045
017855-1_1	871
017855-1_2	835
017863-1	2632
017884-2	199
017901-2_1	8407
017901-2_2	11643
017906-1	1470
017911-1_1	5516
017911-1_2	7598
017918-3	12085
017927-2	7045
   
Repressed RNA (under 3000 read count)
S1	510
S19	1979
S8	871
S8(rep)	835
S9	2632
S21	199
S23	1470

DNA Variants (LOF)
S3
S10
S11
S13
S14
S20
S22
S24
S25
S26





